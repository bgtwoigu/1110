#ifndef _BTMSG_H
#define _BTMSG_H

#ifdef FEATURE_BT

/*====*====*====*====*====*====*====*====*====*====*====*====*====*====*====*

            B L U E T O O T H    M S G    M O D U L E

DESCRIPTION
  This file contains the Bluetooth Message Logging module.

USAGE
  In all Bluetooth files that include the Bluetooth Logging module header,
  BT_MSG_LAYER must be defined to one of BT_MSG_*, defined below, like this:

#define BT_MSG_LAYER  BT_MSG_L2

Copyright (c) 2000 by QUALCOMM Incorporated. All Rights Reserved.

*====*====*====*====*====*====*====*====*====*====*====*====*====*====*====*/

/*===========================================================================

                        EDIT HISTORY FOR MODULE

  This section contains comments describing changes made to the module.
  Notice that changes are listed in reverse chronological order.

$PVCSHeader:   O:/src/asw/COMMON/vcs/btmsg.h_v   1.5   04 Sep 2002 11:36:06   waynelee
$Header: //source/qcom/qct/wconnect/bthost/core/rel/00.00.26/src/btmsg.h#1 $ $DateTime:

$Log:   O:/src/asw/COMMON/vcs/btmsg.h_v  $
 *
 *    #8        09 Oct 2008            AP
 * Fixed Critical Errs generated by superlint.
 *
 *    #7          27 Jun 2006          DSN
 * Replaced LPOS mask with HCI driver message mask.
 *
 *    #6         16 Jun 2005            DP
 * Fixed BDA debug message for no BDA.
 *
 *    #5         8  Apr 2005            DP
 * Redid BDA debug message macro and thus created BT_BDA macro.
 *
 *    #4         7  Apr 2005            DP
 * Added Bluetooth Device Address (BDA) debug message macros.
 * 
 *    Rev 1.5   04 Sep 2002 11:36:06   waynelee
 * Fix for compiles if msg level is none.
 * 
 *    Rev 1.4   03 Apr 2002 13:58:38   propach
 * Made use of BT_SWDEV_BNEP switch.
 * 
 *    Rev 1.3   08 Mar 2002 14:39:12   amitj
 * Changes to debug BNEP code
 * 
 *    Rev 1.2   13 Nov 2001 13:45:08   ryuen
 * Added BT_MSG_LPOS
 * 
 *    Rev 1.1   16 Mar 2001 20:57:02   ryuen
 * Added BT_MSG_BA
 * 
 *    Rev 1.0   29 Jan 2001 17:08:38   propach
 * Initial revision.
 * 
 *    Rev 1.6   21 Dec 2000 17:44:20   waynelee
 * Changed BT_ERR and BT_ERR_FATAL to call bt_record_fault().
 * 
 *    Rev 1.5   27 Nov 2000 10:24:22   waynelee
 * remove ifdef for NA
 * 
 *    Rev 1.4   05 Sep 2000 16:46:04   waynelee
 * Added online, offline support.  Added debug MSGs.  Added Robustness.
 * 
 *    Rev 1.3   02 Sep 2000 19:37:20   propach
 * Added bterr.h include.
 *
 *    Rev 1.2   31 Aug 2000 14:05:52   waynelee
 * Changes to support new BT debug MSG macros
 *
 *    Rev 1.1   30 Aug 2000 10:07:32   waynelee
 * Changes for new BT_MSG macros
 *
 *    Rev 1.0   25 Aug 2000 23:42:36   ryuen
 * Initial revision.

===========================================================================*/

/*===========================================================================

                     INCLUDE FILES FOR MODULE

===========================================================================*/

#include "msg.h"
#include "err.h"


/*===========================================================================

                DEFINITIONS AND DECLARATIONS FOR MODULE

This section contains definitions for constants, macros, types, variables
and other items needed by this module.

===========================================================================*/

/*-------------------------------------------------------------------------*/
/*                                                                         */
/*                        Global Data Declarations                         */
/*                                                                         */
/*-------------------------------------------------------------------------*/


/* Add new defines as new modules within Bluetooth are defined */

#define    BT_MSG_GN     0x00  /* General Bluetooth Layer          */
#define    BT_MSG_BB     0x01  /* Baseband Layer                   */
#define    BT_MSG_LP     0x02  /* Link Manager Protocol Layer      */
#define    BT_MSG_SE     0x03  /* Security portion of LMP Layer    */
#define    BT_MSG_LM     0x04  /* Link Manager Layer               */
#define    BT_MSG_HC     0x05  /* Host Controller Interface Layer  */
#define    BT_MSG_RM     0x06  /* Radio Manager layer              */
#define    BT_MSG_SC     0x07  /* SCO Layer                        */
#define    BT_MSG_L2     0x08  /* L2CAP Layer                      */
#define    BT_MSG_SD     0x09  /* SDP Layer                        */
#define    BT_MSG_RC     0x0a  /* RFCOMM Layer                     */
#define    BT_MSG_SP     0x0b  /* Serial Port Profile              */
#ifdef FEATURE_BT_AG
  #define  BT_MSG_AG     0x0c  /* Audio Gateway Profile            */
#endif
#ifdef FEATURE_BT_HS
#error code not present
#endif
#define    BT_MSG_NA     0x0e  /* Network Access Profile           */
#define    BT_MSG_AP     0x0f  /* HCI Parser API Tester  Layer     */
#define    BT_MSG_BA     0x10  /* Bonding App                      */
#ifdef FEATURE_BT_SOC
#define    BT_MSG_HH     0x11  /* HCI Driver Layer  */
#define    BT_MSG_LAST   0x12
#else
#define    BT_MSG_LAST   0x11
#endif /* FEATURE_BT_SOC */



/* Definition of the meaning of each bit in the bt_msg_debug_mode variable */

#define BT_MSG_DEBUG_B    0x01 /* Map BT_MSG_DEBUG() to MSG_LOW()          */
#define BT_MSG_SIG_B      0x02 /* Map BT_MSG_SIG() to BT_MSG_DEBUG()       */
#define BT_MSG_API_B      0x04 /* Map BT_MSG_API() to BT_MSG_DEBUG()       */
#define BT_MSG_PYLD_B     0x08 /* Map BT_MSG_PYLD() to BT_MSG_DEBUG()      */
#define BT_MSG_API_PYLD_B 0x10 /* Map BT_MSG_API_PYLD() to BT_MSG_DEBUG()  */

extern uint8 bt_msg_mode[ BT_MSG_LAST ];

/*-------------------------------------------------------------------------*/
/*                                                                         */
/*                           External Macros                               */
/*                                                                         */
/*-------------------------------------------------------------------------*/

/*===========================================================================

MACRO
  BT_MSG_HIGH()
  BT_MSG_DEBUG()
  BT_MSG_SIG()
  BT_MSG_API()
  BT_MSG_PYLD()
  BT_MSG_API_PYLD()
  BT_ERR()
  BT_ERR_FATAL()

DESCRIPTION
  Bluetooth Message MACROs.  Each Bluetooth module will define BT_MSG_LAYER
  to be the layer of the module.  Each MACRO can be turned on/off by setting
  the appropriate byte in the bt_msg_mode array.  The bit definitions are
  defined above.  The usage of the BT_MSG_* macros are described as follows:

  BT_MSG_HIGH()      - Bluetooth system level announcements and recoverable
                       errors.
  BT_MSG_DEBUG()     - General debug announcements.
  BT_MSG_SIG()       - Announcements when protocol signalling messages are TX/RX,
                       except protocol payload msgs covered by BT_MSG_PYLD().
  BT_MSG_API()       - Announcements when BT cmds/events are TX/RX except
                       tx/rx data cmds/events covered by BT_MSG_API_PYLD(). 
  BT_MSG_PYLD()      - Announcements when protocol payload msgs are TX/RX.
  BT_MSG_API_PYLD()  - Announcements BT tx/rx data cmds/events are TX/RX.
  BT_ERR()           - Announcements when a serious unrecoverable event occurs.
                       This MACRO will cause the BT driver to be reset. 
  BT_ERR_FATAL()     - Announcements when a serious unrecoverable event occurs
                       that must force the phone to reset.

  NOTE: We have defined new MACROs as a temporary fix to allow more
  granularity in filtering MSGs until the MSG services implements a new
  general mechanism for per subsystem MSG filtering.

PARAMETERS
  fmt  - format string (per MSG_* macros)
  a    - parameter 1   (per MSG_* macros)
  b    - parameter 2   (per MSG_* macros)
  c    - parameter 3   (per MSG_* macros)

===========================================================================*/
#ifdef FEATURE_BT_MSG_DEBUG

#define BT_MSG_HIGH( fmt, a, b, c )   MSG_HIGH( fmt, (a), (b), (c) )

#define BT_MSG_DEBUG( fmt, a, b, c )                            \
do {                                                            \
  if ( bt_msg_mode[ BT_MSG_LAYER ] & BT_MSG_DEBUG_B )           \
  {                                                             \
    MSG_LOW( fmt, (a), (b), (c) );                                    \
  }                                                             \
} while( 0 )

#define BT_MSG_SIG( fmt, a, b, c )                              \
do {                                                            \
  if ( bt_msg_mode[ BT_MSG_LAYER ] & BT_MSG_SIG_B )             \
  {                                                             \
    BT_MSG_DEBUG( fmt, a, b, c );                               \
  }                                                             \
} while( 0 )

#define BT_MSG_API( fmt, a, b, c )                              \
do {                                                            \
  if ( bt_msg_mode[ BT_MSG_LAYER ] & BT_MSG_API_B )             \
  {                                                             \
    BT_MSG_DEBUG( fmt, a, b, c );                               \
  }                                                             \
} while( 0 )

#define BT_MSG_PYLD( fmt, a, b, c )                             \
do {                                                            \
  if ( bt_msg_mode[ BT_MSG_LAYER ] & BT_MSG_PYLD_B )            \
  {                                                             \
    BT_MSG_DEBUG( fmt, a, b, c );                               \
  }                                                             \
} while( 0)

#define BT_MSG_API_PYLD( fmt, a, b, c )                         \
do {                                                            \
  if ( bt_msg_mode[ BT_MSG_LAYER ] & BT_MSG_API_PYLD_B )        \
  {                                                             \
    BT_MSG_DEBUG( fmt, a, b, c );                               \
  }                                                             \
} while( 0 )

#else

#define BT_MSG_HIGH( fmt, a, b, c )       MSG_HIGH( fmt, (a), (b), (c) )
#define BT_MSG_DEBUG( fmt, a, b, c ) 
#define BT_MSG_SIG( fmt, a, b, c )        MSG_LOW( fmt, (a), (b), (c) )
#define BT_MSG_API( fmt, a, b, c )
#define BT_MSG_PYLD( fmt, a, b, c )
#define BT_MSG_API_PYLD( fmt, a, b, c )

#endif /* FEATURE_BT_MSG_DEBUG */

#define BT_ERR( fmt, a, b, c )                     \
do {                                               \
  bt_record_fault( msg_file,                       \
                   __LINE__,                       \
                   (uint32) (a),                     \
                   (uint32) (b),                     \
                   (uint32) (c) );                   \
  ERR( fmt, (a), (b), (c) );                             \
} while( 0 )

#define BT_ERR_FATAL( fmt, a, b, c )               \
do {                                               \
  bt_record_fault( msg_file,                       \
                   __LINE__,                       \
                   (uint32) (a),                     \
                   (uint32) (b),                     \
                   (uint32) (c) );                   \
  ERR_FATAL( fmt, (a), (b), (c) );                       \
} while( 0 )


#ifdef FEATURE_BT_MSG_DEBUG
/*===========================================================================

MACRO
  BT_BDA

DESCRIPTION
  Outputs a debug message containing the specified BD address via the
  the specified BT MSG macro.

PARAMETERS
  msg      Last part of BT_* message macro to use (e.g., "MSG_HIGH")
  fmt      Format string (per MSG_* macros)
  bda_ptr  Pointer to bt_bd_addr_type to be output in message

===========================================================================*/
#ifdef FEATURE_BT_QSC1100  //add  by yangdecai 2010-10-25
#define BT_BDA( msg, fmt, bda_ptr )                       \
{                                                         \
  bt_bd_addr_type*  bp = (bda_ptr);                       \
                                                          \
  if ( bp != NULL )                                       \
  {                                                       \
    BT_##msg##( fmt " BDA %04x %04x %04x",                \
                ((uint16)(bp->bd_addr_bytes[ 5 ] << 8) |  \
                            bp->bd_addr_bytes[ 4 ]),      \
                ((uint16)(bp->bd_addr_bytes[ 3 ] << 8) |  \
                            bp->bd_addr_bytes[ 2 ]),      \
                ((uint16)(bp->bd_addr_bytes[ 1 ] << 8) |  \
                            bp->bd_addr_bytes[ 0 ]) );    \
  }                                                       \
  else                                                    \
  {                                                       \
    BT_##msg##( fmt " BDA NONE", 0, 0, 0 );               \
  }                                                       \
}
#else
#define BT_BDA( msg, fmt, bda_ptr )                       \
{
	;
}
#endif

/*===========================================================================

MACRO
  BT_MSG_UUID128

DESCRIPTION
  Outputs a debug message containing the specified 128-bit UUID via the
  the specified BT MSG macro.

PARAMETERS
  msg      Last part of BT_* message macro to use (e.g., "MSG_HIGH")
  fmt      Format string (per MSG_* macros)
  bda_ptr  Pointer to bt_sd_uuid128_type to be output in message

===========================================================================*/

#define BT_MSG_UUID128( msg, fmt, uuid128_ptr )           \
{                                                         \
  bt_sd_uuid128_type*  up = (uuid128_ptr);                \
                                                          \
  if ( up != NULL )                                       \
  {                                                       \
    BT_##msg##( fmt " UUID128[0-11]  %08x %08x %08x",     \
                ((uint32)(up->uuid_byte[ 0 ]  << 24) |    \
                         (up->uuid_byte[ 1 ]  << 16) |    \
                         (up->uuid_byte[ 2 ]  << 8)  |    \
                         (up->uuid_byte[ 3 ]) ),          \
                ((uint32)(up->uuid_byte[ 4 ]  << 24) |    \
                         (up->uuid_byte[ 5 ]  << 16) |    \
                         (up->uuid_byte[ 6 ]  << 8)  |    \
                         (up->uuid_byte[ 7 ]) ),          \
                ((uint32)(up->uuid_byte[ 8 ]  << 24) |    \
                         (up->uuid_byte[ 9 ]  << 16) |    \
                         (up->uuid_byte[ 10 ] << 8)  |    \
                         (up->uuid_byte[ 11 ]) ) );       \
    BT_##msg##( fmt " UUID128[12-15] %08x",               \
                ((uint32)(up->uuid_byte[ 12 ] << 24) |    \
                         (up->uuid_byte[ 13 ] << 16) |    \
                         (up->uuid_byte[ 14 ] << 8)  |    \
                         (up->uuid_byte[ 15 ]) ),         \
                0, 0 );                                   \
  }                                                       \
  else                                                    \
  {                                                       \
    BT_##msg##( fmt " UUID128 NONE", 0, 0, 0 );           \
  }                                                       \
}

#endif /* FEATURE_BT_MSG_DEBUG */

    
/*-------------------------------------------------------------------------*/
/*                                                                         */
/*                    External Functions Prototypes                        */
/*                                                                         */
/*-------------------------------------------------------------------------*/

#endif /* FEATURE_BT */

#endif  /*  _BTMSG_H  */

