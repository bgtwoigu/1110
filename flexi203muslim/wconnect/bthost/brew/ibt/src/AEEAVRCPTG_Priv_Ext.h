/**===========================================================================
  @file         AEEAVRCPTG_Priv_Ext.idl

  AEEAVRCPTG_Priv_Ext - AVRCP target Metadata Interface 

  AEEAVRCPTG_Priv_Ext interface supports settings of current playing 
  Media attributes as well as Media player attributes.

=============================================================================
        Copyright (c) 2008 QUALCOMM Incorporated.
               All Rights Reserved.
        Qualcomm Confidential and Proprietary
=============================================================================
*/
// Copyright (c) 2006, 2007 QUALCOMM Incorporated.

/* Auto generated code by the Component Services IDL compiler.
 * Warning: DO NOT EDIT THIS FILE. CHANGES MAY BE LOST.
 */

#ifndef AEEAVRCPTG_PRIV_EXT_H
#define AEEAVRCPTG_PRIV_EXT_H

#include "AEEStdDef.h"

#include "AEEInterface.h"

#if !defined(AEEINTERFACE_CPLUSPLUS)

#include "AEEIQI.h"
#include "AEEISignal.h"
#include "AEEBTDef.h"
#define AEEIID_AEEAVRCPTG_Priv_Ext 0x1072957

enum AEEBTAVRCPTgAttrEventEnum
{
   AEEBTAVRCPTG_SET_ATTR_CONFIG_UPDATES,
   AEEBTAVRCPTG_PLAYER_APP_SETTING_MODIFIED,
   AEEBTAVRCPTG_CT_BATT_STATUS_CHANGED,
   AEEBTAVRCPTG_INFORM_CHARACTER_SET,
   AEEBTAVRCPTG_GROUP_NAV_COMMAND,
   AEEBTAVRCPTG_UPDATE_LAST_CMD_STATUS,
   _QIDL_PLACEHOLDER_AEEBTAVRCPTgAttrEventEnum = 0x7fffffff
};

typedef enum AEEBTAVRCPTgAttrEventEnum AEEBTAVRCPTgAttrEventEnum;

#define AEEBTAVRCPTG_ILLEGAL_CHARSET_ID 0

#define AEEBTAVRCPTG_LANG_ENCODING_UTF8 106

#define AEEBTAVRCPTG_LANG_ENCODING_UTF16 1015

typedef uint32 AEEBTAVRCPTgCharsetId;

#define AEEBTAVRCPTG_CMD_RESPONSE_INVALID_PDU 0x0

#define AEEBTAVRCPTG_CMD_RESPONSE_INVALID_PARAMETER 0x1

#define AEEBTAVRCPTG_CMD_RESPONSE_PARAMETER_NOT_FOUND 0x2

#define AEEBTAVRCPTG_CMD_RESPONSE_INTERNAL_ERROR 0x3

#define AEEBTAVRCPTG_CMD_RESPONSE_NOT_IMPLEMENTED 0x8

#define AEEBTAVRCPTG_CMD_RESPONSE_ACCEPTED 0x9

#define AEEBTAVRCPTG_CMD_RESPONSE_REJECTED 0xa

#define AEEBTAVRCPTG_CMD_RESPONSE_IN_TRANSITION 0xb

#define AEEBTAVRCPTG_CMD_RESPONSE_IMPLEMENTED 0xc

#define AEEBTAVRCPTG_CMD_RESPONSE_STABLE 0xc

#define AEEBTAVRCPTG_CMD_RESPONSE_CHANGED 0xd

typedef uint32 AEEBTAVRCPTgCmdResponseStatus;

#define AEEBTAVRCPTG_PLAYBACK_STATUS_CHANGED 0x1

#define AEEBTAVRCPTG_TRACK_CHANGED 0x2

#define AEEBTAVRCPTG_TRACK_REACHED_END 0x4

#define AEEBTAVRCPTG_TRACK_REACHED_START 0x8

#define AEEBTAVRCPTG_PLAYBACK_POS_CHANGED 0x10

#define AEEBTAVRCPTG_BATT_STATUS_CHANGED 0x20

#define AEEBTAVRCPTG_SYSTEM_STATUS_CHANGED 0x40

#define AEEBTAVRCPTG_PLAYER_APP_SETTING_CHANGED 0x80

typedef uint32 AEEBTAVRCPTgMediaEventMask;

#define AEEBTAVRCPTG_CT_BATT_NORMAL 0x0

#define AEEBTAVRCPTG_CT_BATT_WARNING 0x1

#define AEEBTAVRCPTG_CT_BATT_CRITICAL 0x2

#define AEEBTAVRCPTG_CT_BATT_EXTERNAL 0x3

#define AEEBTAVRCPTG_CT_BATT_FULL 0x4

typedef uint32 AEEBTAVRCPTgContBattStatus;

#define AEEBTAVRCPTG_MEDIA_ATTR_ILLEGAL 0x0

#define AEEBTAVRCPTG_MEDIA_ATTR_TITLE 0x1

#define AEEBTAVRCPTG_MEDIA_ATTR_ARTIST 0x2

#define AEEBTAVRCPTG_MEDIA_ATTR_ALBUM 0x3

#define AEEBTAVRCPTG_MEDIA_ATTR_TRACK_NUMBER 0x4

#define AEEBTAVRCPTG_MEDIA_ATTR_TOTAL_TRACK_NUMBER 0x5

#define AEEBTAVRCPTG_MEDIA_ATTR_GENRE 0x6

#define AEEBTAVRCPTG_MEDIA_ATTR_PLAYING_TIME 0x7

typedef uint32 AEEBTAVRCPTgMediaAttrs;

#define AEEBTAVRCPTG_PLAYER_ILLEGAL_STATUS 0x0

#define AEEBTAVRCPTG_PLAYER_EQUALISER_STATUS 0x1

#define AEEBTAVRCPTG_PLAYER_REPEAT_STATUS 0x2

#define AEEBTAVRCPTG_PLAYER_SHUFFLE_STATUS 0x3

#define AEEBTAVRCPTG_PLAYER_SCAN_STATUS 0x4

typedef uint32 AEEBTAVRCPTgPlayerAppAttrs;

#define AEEBTAVRCPTG_PLAYER_EQUALISER_OFF 0x1

#define AEEBTAVRCPTG_PLAYER_EQUALISER_ON 0x2

typedef uint32 AEEBTAVRCPTgPlayerEqualiserModeValues;

#define AEEBTAVRCPTG_PLAYER_REPEAT_OFF 0x1

#define AEEBTAVRCPTG_PLAYER_REPEAT_SINGLE_TRACK 0x2

#define AEEBTAVRCPTG_PLAYER_REPEAT_ALL_TRACK 0x3

#define AEEBTAVRCPTG_PLAYER_REPEAT_GROUP_TRACK 0x4

typedef uint32 AEEBTAVRCPTgPlayerRepeatModeValues;

#define AEEBTAVRCPTG_PLAYER_SHUFFLE_OFF 0x1

#define AEEBTAVRCPTG_PLAYER_SHUFFLE_ALL_TRACKS 0x2

#define AEEBTAVRCPTG_PLAYER_SHUFFLE_GROUP_TRACKS 0x3

typedef uint32 AEEBTAVRCPTgPlayerShuffleModeValues;

#define AEEBTAVRCPTG_PLAYER_SCAN_OFF 0x1

#define AEEBTAVRCPTG_PLAYER_SCAN_ALL_TRACKS 0x2

#define AEEBTAVRCPTG_PLAYER_SCAN_GROUP_TRACKS 0x3

typedef uint32 AEEBTAVRCPTgPlayerScanModeValues;

enum AEEBTAVRCPTgGroupNavCommandEnum
{
   AEEBTAVRCPTG_NEXT_GROUP,
   AEEBTAVRCPTG_PREVIOUS_GROUP,
   _QIDL_PLACEHOLDER_AEEBTAVRCPTgGroupNavCommandEnum = 0x7fffffff
};

typedef enum AEEBTAVRCPTgGroupNavCommandEnum AEEBTAVRCPTgGroupNavCommandEnum;

typedef struct AEEBTAVRCPTgEventType AEEBTAVRCPTgEventType;

struct AEEBTAVRCPTgEventType
{
   AEEBTAVRCPTgAttrEventEnum event;
   uint32 evparam;
};

#define AEEAVRCPTG_PLAYSTAT_STOPPED 0x0

#define AEEAVRCPTG_PLAYSTAT_PLAYING 0x1

#define AEEAVRCPTG_PLAYSTAT_PAUSED 0x2

#define AEEAVRCPTG_PLAYSTAT_SEEK_FORWARD 0x3

#define AEEAVRCPTG_PLAYSTAT_SEEK_BACKWARD 0x4

#define AEEAVRCPTG_PLAY_STAT_TRACK_CHANGED 0x5

#define AEEAVRCPTG_PLAY_STAT_TRACK_REACHED_END 0x6

#define AEEAVRCPTG_PLAY_STAT_TRACK_REACHED_START 0x7

#define AEEAVRCPTG_PLAYSTAT_ERROR 0xff

typedef uint32 AEEBTAVRCPTgPlayStatus;

#define INHERIT_AEEAVRCPTG_Priv_Ext(iname) \
   INHERIT_IQI(iname); \
   AEEResult (*OnEventNotify)(iname* _pif, /*in*/ ISignal* piSig); \
   AEEResult (*GetEvent)(iname* _pif, /*rout*/ AEEBTAVRCPTgEventType* pEvent); \
   AEEResult (*GetAttrConfigUpdates)(iname* _pif, /*rout*/ boolean* startUpdate, /*rout*/ uint32* songPosUpdateMs); \
   AEEResult (*SetMediaTitle)(iname* _pif, /*in*/ uint32 charset, /*in*/ const unsigned char* title, /*in*/ int titleLen); \
   AEEResult (*SetArtistName)(iname* _pif, /*in*/ uint32 charset, /*in*/ const unsigned char* artistName, /*in*/ int artistNameLen); \
   AEEResult (*SetAlbumName)(iname* _pif, /*in*/ uint32 charset, /*in*/ const unsigned char* albumName, /*in*/ int albumNameLen); \
   AEEResult (*SetMediaTrackNumber)(iname* _pif, /*in*/ const unsigned char* trackNumber, /*in*/ int trackNumberLen); \
   AEEResult (*SetTotalTracks)(iname* _pif, /*in*/ const unsigned char* totalTracks, /*in*/ int totalTracksLen); \
   AEEResult (*SetGenre)(iname* _pif, /*in*/ uint32 charset, /*in*/ const unsigned char* genre, /*in*/ int genreLen); \
   AEEResult (*SetPlayingTimeMs)(iname* _pif, /*in*/ const unsigned char* playingTime, /*in*/ int playingTimeLen); \
   AEEResult (*SetSongPositionMs)(iname* _pif, /*in*/ uint32 curPosMs); \
   AEEResult (*SetPlayStatus)(iname* _pif, /*in*/ AEEBTAVRCPTgPlayStatus playStatus, /*in*/ uint32 curPosMs, /*in*/ const unsigned char* trackIndex, /*in*/ int trackIndexLen); \
   AEEResult (*SetCapability)(iname* _pif, /*in*/ AEEBTAVRCPTgMediaEventMask eventMask, /*in*/ uint32 compId); \
   AEEResult (*GetControllerBatteryStatus)(iname* _pif, /*rout*/ AEEBTAVRCPTgContBattStatus* batteryStatus); \
   AEEResult (*SetPlayerAttrList)(iname* _pif, /*in*/ const int* attributeids, /*in*/ int attributeidsLen); \
   AEEResult (*SetPlayerAttrValueList)(iname* _pif, /*in*/ uint32 attributeid, /*in*/ const int* attributeValues, /*in*/ int attributeValuesLen); \
   AEEResult (*SetPlayerCurrentAttrValue)(iname* _pif, /*in*/ uint32 attributeid, /*in*/ uint32 attributeValue); \
   AEEResult (*GetPlayerCurrentAttrValue)(iname* _pif, /*rout*/ uint32* attributeid, /*rout*/ uint32* attributeValue); \
   AEEResult (*GetDisplayableCharacterSet)(iname* _pif, /*rout*/ uint32* charset); \
   AEEResult (*SetPlayerAttrText)(iname* _pif, /*in*/ uint32 attributeid, /*in*/ uint32 charset, /*in*/ const unsigned char* attributeText, /*in*/ int attributeTextLen); \
   AEEResult (*SetPlayerAttrValueText)(iname* _pif, /*in*/ uint32 attributeid, /*in*/ uint32 attributeValue, /*in*/ uint32 charset, /*in*/ const unsigned char* attributeValueText, /*in*/ int attributeValueTextLen); \
   AEEResult (*GetNavigateGroupCmd)(iname* _pif, /*rout*/ AEEBTAVRCPTgGroupNavCommandEnum* navigationCommand); \
   AEEResult (*SetLastCommandStatus)(iname* _pif, /*in*/ AEEBTAVRCPTgCmdResponseStatus status)

AEEINTERFACE_DEFINE(AEEAVRCPTG_Priv_Ext);

static __inline unsigned int AEEAVRCPTG_Priv_Ext_AddRef(AEEAVRCPTG_Priv_Ext* _pif)
{
   return AEEGETPVTBL(_pif,AEEAVRCPTG_Priv_Ext)->AddRef(_pif);
}

static __inline unsigned int AEEAVRCPTG_Priv_Ext_Release(AEEAVRCPTG_Priv_Ext* _pif)
{
   return AEEGETPVTBL(_pif,AEEAVRCPTG_Priv_Ext)->Release(_pif);
}

static __inline int AEEAVRCPTG_Priv_Ext_QueryInterface(AEEAVRCPTG_Priv_Ext* _pif, AEEIID iid, void** ppo)
{
   return AEEGETPVTBL(_pif,AEEAVRCPTG_Priv_Ext)->QueryInterface(_pif, iid, ppo);
}

static __inline AEEResult AEEAVRCPTG_Priv_Ext_OnEventNotify(AEEAVRCPTG_Priv_Ext* _pif, /*in*/ ISignal* piSig)
{
   return AEEGETPVTBL(_pif,AEEAVRCPTG_Priv_Ext)->OnEventNotify(_pif, piSig);
}

static __inline AEEResult AEEAVRCPTG_Priv_Ext_GetEvent(AEEAVRCPTG_Priv_Ext* _pif, /*rout*/ AEEBTAVRCPTgEventType* pEvent)
{
   return AEEGETPVTBL(_pif,AEEAVRCPTG_Priv_Ext)->GetEvent(_pif, pEvent);
}

static __inline AEEResult AEEAVRCPTG_Priv_Ext_GetAttrConfigUpdates(AEEAVRCPTG_Priv_Ext* _pif, /*rout*/ boolean* startUpdate, /*rout*/ uint32* songPosUpdateMs)
{
   return AEEGETPVTBL(_pif,AEEAVRCPTG_Priv_Ext)->GetAttrConfigUpdates(_pif, startUpdate, songPosUpdateMs);
}

static __inline AEEResult AEEAVRCPTG_Priv_Ext_SetMediaTitle(AEEAVRCPTG_Priv_Ext* _pif, /*in*/ uint32 charset, /*in*/ const unsigned char* title, /*in*/ int titleLen)
{
   return AEEGETPVTBL(_pif,AEEAVRCPTG_Priv_Ext)->SetMediaTitle(_pif, charset, title, titleLen);
}

static __inline AEEResult AEEAVRCPTG_Priv_Ext_SetArtistName(AEEAVRCPTG_Priv_Ext* _pif, /*in*/ uint32 charset, /*in*/ const unsigned char* artistName, /*in*/ int artistNameLen)
{
   return AEEGETPVTBL(_pif,AEEAVRCPTG_Priv_Ext)->SetArtistName(_pif, charset, artistName, artistNameLen);
}

static __inline AEEResult AEEAVRCPTG_Priv_Ext_SetAlbumName(AEEAVRCPTG_Priv_Ext* _pif, /*in*/ uint32 charset, /*in*/ const unsigned char* albumName, /*in*/ int albumNameLen)
{
   return AEEGETPVTBL(_pif,AEEAVRCPTG_Priv_Ext)->SetAlbumName(_pif, charset, albumName, albumNameLen);
}

static __inline AEEResult AEEAVRCPTG_Priv_Ext_SetMediaTrackNumber(AEEAVRCPTG_Priv_Ext* _pif, /*in*/ const unsigned char* trackNumber, /*in*/ int trackNumberLen)
{
   return AEEGETPVTBL(_pif,AEEAVRCPTG_Priv_Ext)->SetMediaTrackNumber(_pif, trackNumber, trackNumberLen);
}

static __inline AEEResult AEEAVRCPTG_Priv_Ext_SetTotalTracks(AEEAVRCPTG_Priv_Ext* _pif, /*in*/ const unsigned char* totalTracks, /*in*/ int totalTracksLen)
{
   return AEEGETPVTBL(_pif,AEEAVRCPTG_Priv_Ext)->SetTotalTracks(_pif, totalTracks, totalTracksLen);
}

static __inline AEEResult AEEAVRCPTG_Priv_Ext_SetGenre(AEEAVRCPTG_Priv_Ext* _pif, /*in*/ uint32 charset, /*in*/ const unsigned char* genre, /*in*/ int genreLen)
{
   return AEEGETPVTBL(_pif,AEEAVRCPTG_Priv_Ext)->SetGenre(_pif, charset, genre, genreLen);
}

static __inline AEEResult AEEAVRCPTG_Priv_Ext_SetPlayingTimeMs(AEEAVRCPTG_Priv_Ext* _pif, /*in*/ const unsigned char* playingTime, /*in*/ int playingTimeLen)
{
   return AEEGETPVTBL(_pif,AEEAVRCPTG_Priv_Ext)->SetPlayingTimeMs(_pif, playingTime, playingTimeLen);
}

static __inline AEEResult AEEAVRCPTG_Priv_Ext_SetSongPositionMs(AEEAVRCPTG_Priv_Ext* _pif, /*in*/ uint32 curPosMs)
{
   return AEEGETPVTBL(_pif,AEEAVRCPTG_Priv_Ext)->SetSongPositionMs(_pif, curPosMs);
}

static __inline AEEResult AEEAVRCPTG_Priv_Ext_SetPlayStatus(AEEAVRCPTG_Priv_Ext* _pif, /*in*/ AEEBTAVRCPTgPlayStatus playStatus, /*in*/ uint32 curPosMs, /*in*/ const unsigned char* trackIndex, /*in*/ int trackIndexLen)
{
   return AEEGETPVTBL(_pif,AEEAVRCPTG_Priv_Ext)->SetPlayStatus(_pif, playStatus, curPosMs, trackIndex, trackIndexLen);
}

static __inline AEEResult AEEAVRCPTG_Priv_Ext_SetCapability(AEEAVRCPTG_Priv_Ext* _pif, /*in*/ AEEBTAVRCPTgMediaEventMask eventMask, /*in*/ uint32 compId)
{
   return AEEGETPVTBL(_pif,AEEAVRCPTG_Priv_Ext)->SetCapability(_pif, eventMask, compId);
}

static __inline AEEResult AEEAVRCPTG_Priv_Ext_GetControllerBatteryStatus(AEEAVRCPTG_Priv_Ext* _pif, /*rout*/ AEEBTAVRCPTgContBattStatus* batteryStatus)
{
   return AEEGETPVTBL(_pif,AEEAVRCPTG_Priv_Ext)->GetControllerBatteryStatus(_pif, batteryStatus);
}

static __inline AEEResult AEEAVRCPTG_Priv_Ext_SetPlayerAttrList(AEEAVRCPTG_Priv_Ext* _pif, /*in*/ const int* attributeids, /*in*/ int attributeidsLen)
{
   return AEEGETPVTBL(_pif,AEEAVRCPTG_Priv_Ext)->SetPlayerAttrList(_pif, attributeids, attributeidsLen);
}

static __inline AEEResult AEEAVRCPTG_Priv_Ext_SetPlayerAttrValueList(AEEAVRCPTG_Priv_Ext* _pif, /*in*/ uint32 attributeid, /*in*/ const int* attributeValues, /*in*/ int attributeValuesLen)
{
   return AEEGETPVTBL(_pif,AEEAVRCPTG_Priv_Ext)->SetPlayerAttrValueList(_pif, attributeid, attributeValues, attributeValuesLen);
}

static __inline AEEResult AEEAVRCPTG_Priv_Ext_SetPlayerCurrentAttrValue(AEEAVRCPTG_Priv_Ext* _pif, /*in*/ uint32 attributeid, /*in*/ uint32 attributeValue)
{
   return AEEGETPVTBL(_pif,AEEAVRCPTG_Priv_Ext)->SetPlayerCurrentAttrValue(_pif, attributeid, attributeValue);
}

static __inline AEEResult AEEAVRCPTG_Priv_Ext_GetPlayerCurrentAttrValue(AEEAVRCPTG_Priv_Ext* _pif, /*rout*/ uint32* attributeid, /*rout*/ uint32* attributeValue)
{
   return AEEGETPVTBL(_pif,AEEAVRCPTG_Priv_Ext)->GetPlayerCurrentAttrValue(_pif, attributeid, attributeValue);
}

static __inline AEEResult AEEAVRCPTG_Priv_Ext_GetDisplayableCharacterSet(AEEAVRCPTG_Priv_Ext* _pif, /*rout*/ uint32* charset)
{
   return AEEGETPVTBL(_pif,AEEAVRCPTG_Priv_Ext)->GetDisplayableCharacterSet(_pif, charset);
}

static __inline AEEResult AEEAVRCPTG_Priv_Ext_SetPlayerAttrText(AEEAVRCPTG_Priv_Ext* _pif, /*in*/ uint32 attributeid, /*in*/ uint32 charset, /*in*/ const unsigned char* attributeText, /*in*/ int attributeTextLen)
{
   return AEEGETPVTBL(_pif,AEEAVRCPTG_Priv_Ext)->SetPlayerAttrText(_pif, attributeid, charset, attributeText, attributeTextLen);
}

static __inline AEEResult AEEAVRCPTG_Priv_Ext_SetPlayerAttrValueText(AEEAVRCPTG_Priv_Ext* _pif, /*in*/ uint32 attributeid, /*in*/ uint32 attributeValue, /*in*/ uint32 charset, /*in*/ const unsigned char* attributeValueText, /*in*/ int attributeValueTextLen)
{
   return AEEGETPVTBL(_pif,AEEAVRCPTG_Priv_Ext)->SetPlayerAttrValueText(_pif, attributeid, attributeValue, charset, attributeValueText, attributeValueTextLen);
}

static __inline AEEResult AEEAVRCPTG_Priv_Ext_GetNavigateGroupCmd(AEEAVRCPTG_Priv_Ext* _pif, /*rout*/ AEEBTAVRCPTgGroupNavCommandEnum* navigationCommand)
{
   return AEEGETPVTBL(_pif,AEEAVRCPTG_Priv_Ext)->GetNavigateGroupCmd(_pif, navigationCommand);
}

static __inline AEEResult AEEAVRCPTG_Priv_Ext_SetLastCommandStatus(AEEAVRCPTG_Priv_Ext* _pif, /*in*/ AEEBTAVRCPTgCmdResponseStatus status)
{
   return AEEGETPVTBL(_pif,AEEAVRCPTG_Priv_Ext)->SetLastCommandStatus(_pif, status);
}

#else /* C++ */

#include "AEEIQI.h"
#include "AEEISignal.h"
#include "AEEBTDef.h"
const AEEIID AEEIID_AEEAVRCPTG_Priv_Ext = 0x1072957;

enum AEEBTAVRCPTgAttrEventEnum
{
   AEEBTAVRCPTG_SET_ATTR_CONFIG_UPDATES,
   AEEBTAVRCPTG_PLAYER_APP_SETTING_MODIFIED,
   AEEBTAVRCPTG_CT_BATT_STATUS_CHANGED,
   AEEBTAVRCPTG_INFORM_CHARACTER_SET,
   AEEBTAVRCPTG_GROUP_NAV_COMMAND,
   AEEBTAVRCPTG_UPDATE_LAST_CMD_STATUS,
   _QIDL_PLACEHOLDER_AEEBTAVRCPTgAttrEventEnum = 0x7fffffff
};

const uint32 AEEBTAVRCPTG_ILLEGAL_CHARSET_ID = 0;

const uint32 AEEBTAVRCPTG_LANG_ENCODING_UTF8 = 106;

const uint32 AEEBTAVRCPTG_LANG_ENCODING_UTF16 = 1015;

typedef uint32 AEEBTAVRCPTgCharsetId;

const uint32 AEEBTAVRCPTG_CMD_RESPONSE_INVALID_PDU = 0x0;

const uint32 AEEBTAVRCPTG_CMD_RESPONSE_INVALID_PARAMETER = 0x1;

const uint32 AEEBTAVRCPTG_CMD_RESPONSE_PARAMETER_NOT_FOUND = 0x2;

const uint32 AEEBTAVRCPTG_CMD_RESPONSE_INTERNAL_ERROR = 0x3;

const uint32 AEEBTAVRCPTG_CMD_RESPONSE_NOT_IMPLEMENTED = 0x8;

const uint32 AEEBTAVRCPTG_CMD_RESPONSE_ACCEPTED = 0x9;

const uint32 AEEBTAVRCPTG_CMD_RESPONSE_REJECTED = 0xa;

const uint32 AEEBTAVRCPTG_CMD_RESPONSE_IN_TRANSITION = 0xb;

const uint32 AEEBTAVRCPTG_CMD_RESPONSE_IMPLEMENTED = 0xc;

const uint32 AEEBTAVRCPTG_CMD_RESPONSE_STABLE = 0xc;

const uint32 AEEBTAVRCPTG_CMD_RESPONSE_CHANGED = 0xd;

typedef uint32 AEEBTAVRCPTgCmdResponseStatus;

const uint32 AEEBTAVRCPTG_PLAYBACK_STATUS_CHANGED = 0x1;

const uint32 AEEBTAVRCPTG_TRACK_CHANGED = 0x2;

const uint32 AEEBTAVRCPTG_TRACK_REACHED_END = 0x4;

const uint32 AEEBTAVRCPTG_TRACK_REACHED_START = 0x8;

const uint32 AEEBTAVRCPTG_PLAYBACK_POS_CHANGED = 0x10;

const uint32 AEEBTAVRCPTG_BATT_STATUS_CHANGED = 0x20;

const uint32 AEEBTAVRCPTG_SYSTEM_STATUS_CHANGED = 0x40;

const uint32 AEEBTAVRCPTG_PLAYER_APP_SETTING_CHANGED = 0x80;

typedef uint32 AEEBTAVRCPTgMediaEventMask;

const uint32 AEEBTAVRCPTG_CT_BATT_NORMAL = 0x0;

const uint32 AEEBTAVRCPTG_CT_BATT_WARNING = 0x1;

const uint32 AEEBTAVRCPTG_CT_BATT_CRITICAL = 0x2;

const uint32 AEEBTAVRCPTG_CT_BATT_EXTERNAL = 0x3;

const uint32 AEEBTAVRCPTG_CT_BATT_FULL = 0x4;

typedef uint32 AEEBTAVRCPTgContBattStatus;

const uint32 AEEBTAVRCPTG_MEDIA_ATTR_ILLEGAL = 0x0;

const uint32 AEEBTAVRCPTG_MEDIA_ATTR_TITLE = 0x1;

const uint32 AEEBTAVRCPTG_MEDIA_ATTR_ARTIST = 0x2;

const uint32 AEEBTAVRCPTG_MEDIA_ATTR_ALBUM = 0x3;

const uint32 AEEBTAVRCPTG_MEDIA_ATTR_TRACK_NUMBER = 0x4;

const uint32 AEEBTAVRCPTG_MEDIA_ATTR_TOTAL_TRACK_NUMBER = 0x5;

const uint32 AEEBTAVRCPTG_MEDIA_ATTR_GENRE = 0x6;

const uint32 AEEBTAVRCPTG_MEDIA_ATTR_PLAYING_TIME = 0x7;

typedef uint32 AEEBTAVRCPTgMediaAttrs;

const uint32 AEEBTAVRCPTG_PLAYER_ILLEGAL_STATUS = 0x0;

const uint32 AEEBTAVRCPTG_PLAYER_EQUALISER_STATUS = 0x1;

const uint32 AEEBTAVRCPTG_PLAYER_REPEAT_STATUS = 0x2;

const uint32 AEEBTAVRCPTG_PLAYER_SHUFFLE_STATUS = 0x3;

const uint32 AEEBTAVRCPTG_PLAYER_SCAN_STATUS = 0x4;

typedef uint32 AEEBTAVRCPTgPlayerAppAttrs;

const uint32 AEEBTAVRCPTG_PLAYER_EQUALISER_OFF = 0x1;

const uint32 AEEBTAVRCPTG_PLAYER_EQUALISER_ON = 0x2;

typedef uint32 AEEBTAVRCPTgPlayerEqualiserModeValues;

const uint32 AEEBTAVRCPTG_PLAYER_REPEAT_OFF = 0x1;

const uint32 AEEBTAVRCPTG_PLAYER_REPEAT_SINGLE_TRACK = 0x2;

const uint32 AEEBTAVRCPTG_PLAYER_REPEAT_ALL_TRACK = 0x3;

const uint32 AEEBTAVRCPTG_PLAYER_REPEAT_GROUP_TRACK = 0x4;

typedef uint32 AEEBTAVRCPTgPlayerRepeatModeValues;

const uint32 AEEBTAVRCPTG_PLAYER_SHUFFLE_OFF = 0x1;

const uint32 AEEBTAVRCPTG_PLAYER_SHUFFLE_ALL_TRACKS = 0x2;

const uint32 AEEBTAVRCPTG_PLAYER_SHUFFLE_GROUP_TRACKS = 0x3;

typedef uint32 AEEBTAVRCPTgPlayerShuffleModeValues;

const uint32 AEEBTAVRCPTG_PLAYER_SCAN_OFF = 0x1;

const uint32 AEEBTAVRCPTG_PLAYER_SCAN_ALL_TRACKS = 0x2;

const uint32 AEEBTAVRCPTG_PLAYER_SCAN_GROUP_TRACKS = 0x3;

typedef uint32 AEEBTAVRCPTgPlayerScanModeValues;

enum AEEBTAVRCPTgGroupNavCommandEnum
{
   AEEBTAVRCPTG_NEXT_GROUP,
   AEEBTAVRCPTG_PREVIOUS_GROUP,
   _QIDL_PLACEHOLDER_AEEBTAVRCPTgGroupNavCommandEnum = 0x7fffffff
};

struct AEEBTAVRCPTgEventType
{
   ::AEEBTAVRCPTgAttrEventEnum event;
   ::uint32 evparam;
};

const uint32 AEEAVRCPTG_PLAYSTAT_STOPPED = 0x0;

const uint32 AEEAVRCPTG_PLAYSTAT_PLAYING = 0x1;

const uint32 AEEAVRCPTG_PLAYSTAT_PAUSED = 0x2;

const uint32 AEEAVRCPTG_PLAYSTAT_SEEK_FORWARD = 0x3;

const uint32 AEEAVRCPTG_PLAYSTAT_SEEK_BACKWARD = 0x4;

const uint32 AEEAVRCPTG_PLAY_STAT_TRACK_CHANGED = 0x5;

const uint32 AEEAVRCPTG_PLAY_STAT_TRACK_REACHED_END = 0x6;

const uint32 AEEAVRCPTG_PLAY_STAT_TRACK_REACHED_START = 0x7;

const uint32 AEEAVRCPTG_PLAYSTAT_ERROR = 0xff;

typedef uint32 AEEBTAVRCPTgPlayStatus;

class AEEAVRCPTG_Priv_Ext : public IQI
{
public:
   virtual ::AEEResult CDECL OnEventNotify (/*in*/ ::ISignal* piSig) = 0;
   virtual ::AEEResult CDECL GetEvent (/*rout*/ ::AEEBTAVRCPTgEventType* pEvent) = 0;
   virtual ::AEEResult CDECL GetAttrConfigUpdates (/*rout*/ boolean* startUpdate, /*rout*/ ::uint32* songPosUpdateMs) = 0;
   virtual ::AEEResult CDECL SetMediaTitle (/*in*/ ::uint32 charset, /*in*/ const unsigned char* title, /*in*/ int titleLen) = 0;
   virtual ::AEEResult CDECL SetArtistName (/*in*/ ::uint32 charset, /*in*/ const unsigned char* artistName, /*in*/ int artistNameLen) = 0;
   virtual ::AEEResult CDECL SetAlbumName (/*in*/ ::uint32 charset, /*in*/ const unsigned char* albumName, /*in*/ int albumNameLen) = 0;
   virtual ::AEEResult CDECL SetMediaTrackNumber (/*in*/ const unsigned char* trackNumber, /*in*/ int trackNumberLen) = 0;
   virtual ::AEEResult CDECL SetTotalTracks (/*in*/ const unsigned char* totalTracks, /*in*/ int totalTracksLen) = 0;
   virtual ::AEEResult CDECL SetGenre (/*in*/ ::uint32 charset, /*in*/ const unsigned char* genre, /*in*/ int genreLen) = 0;
   virtual ::AEEResult CDECL SetPlayingTimeMs (/*in*/ const unsigned char* playingTime, /*in*/ int playingTimeLen) = 0;
   virtual ::AEEResult CDECL SetSongPositionMs (/*in*/ ::uint32 curPosMs) = 0;
   virtual ::AEEResult CDECL SetPlayStatus (/*in*/ ::AEEBTAVRCPTgPlayStatus playStatus, /*in*/ ::uint32 curPosMs, /*in*/ const unsigned char* trackIndex, /*in*/ int trackIndexLen) = 0;
   virtual ::AEEResult CDECL SetCapability (/*in*/ ::AEEBTAVRCPTgMediaEventMask eventMask, /*in*/ ::uint32 compId) = 0;
   virtual ::AEEResult CDECL GetControllerBatteryStatus (/*rout*/ ::AEEBTAVRCPTgContBattStatus* batteryStatus) = 0;
   virtual ::AEEResult CDECL SetPlayerAttrList (/*in*/ const int* attributeids, /*in*/ int attributeidsLen) = 0;
   virtual ::AEEResult CDECL SetPlayerAttrValueList (/*in*/ ::uint32 attributeid, /*in*/ const int* attributeValues, /*in*/ int attributeValuesLen) = 0;
   virtual ::AEEResult CDECL SetPlayerCurrentAttrValue (/*in*/ ::uint32 attributeid, /*in*/ ::uint32 attributeValue) = 0;
   virtual ::AEEResult CDECL GetPlayerCurrentAttrValue (/*rout*/ ::uint32* attributeid, /*rout*/ ::uint32* attributeValue) = 0;
   virtual ::AEEResult CDECL GetDisplayableCharacterSet (/*rout*/ ::uint32* charset) = 0;
   virtual ::AEEResult CDECL SetPlayerAttrText (/*in*/ ::uint32 attributeid, /*in*/ ::uint32 charset, /*in*/ const unsigned char* attributeText, /*in*/ int attributeTextLen) = 0;
   virtual ::AEEResult CDECL SetPlayerAttrValueText (/*in*/ ::uint32 attributeid, /*in*/ ::uint32 attributeValue, /*in*/ ::uint32 charset, /*in*/ const unsigned char* attributeValueText, /*in*/ int attributeValueTextLen) = 0;
   virtual ::AEEResult CDECL GetNavigateGroupCmd (/*rout*/ ::AEEBTAVRCPTgGroupNavCommandEnum* navigationCommand) = 0;
   virtual ::AEEResult CDECL SetLastCommandStatus (/*in*/ ::AEEBTAVRCPTgCmdResponseStatus status) = 0;
};

#endif /* !defined(AEEINTERFACE_CPLUSPLUS) */

/**============================================================================
   DATA STRUCTURE DOCUMENTATION
===============================================================================

AEEBTAVRCPTgAttrEventEnum

Description:
  Possible events that can occur on the AEEAVRCPTG_Priv_Ext object, 
  retreivable via the AEEAVRCPTG_Priv_Ext_GetEvent API. If application
  retrieves events slower than they are generated, when the event queue reaches 
  its capacity, older events will be replaced with newer ones and an 
  EVENT_Q_OVERFLOW will get generated to alert application.

Definition:
  enum AEEBTAVRCPTgAttrEventEnum
  {
     AEEBTAVRCPTG_SET_ATTR_CONFIG_UPDATES, 
     AEEBTAVRCPTG_PLAYER_APP_SETTING_MODIFIED,
     AEEBTAVRCPTG_CT_BATT_STATUS_CHANGED,
     AEEBTAVRCPTG_INFORM_CHARACTER_SET,
     AEEBTAVRCPTG_GROUP_NAV_COMMAND,
     AEEBTAVRCPTG_UPDATE_LAST_CMD_STATUS,
    _QIDL_PLACEHOLDER_AEEBTAVRCPTgAttrEventEnum = 0x7fffffff
  }; 
  
Members:
  AEEBTAVRCPTG_SET_ATTR_CONFIG_UPDATES :
    To configure the config updates from the application.
  AEEBTAVRCPTG_PLAYER_APP_SETTING_MODIFIED:
    Player App setting modification command from CT
  AEEBTAVRCPTG_CT_BATT_STATUS_CHANGED:
    Battery status changed command from CT
  AEEBTAVRCPTG_INFORM_CHARACTER_SET:
    Character set information from CT
  AEEBTAVRCPTG_GROUP_NAV_COMMAND:
    Group navigation command from CT
  AEEBTAVRCPTG_UPDATE_LAST_CMD_STATUS:
    To get the status of last executed command
  
  

===============================================================================

AEEBTAVRCPTgPlayStatus

Description: 
    Status of the current playing song / track.

Definition:
#define AEEAVRCPTG_PLAYSTAT_STOPPED             = 0x00;
#define AEEAVRCPTG_PLAYSTAT_PLAYING             = 0x01;
#define AEEAVRCPTG_PLAYSTAT_PAUSED              = 0x02;
#define AEEAVRCPTG_PLAYSTAT_SEEK_FORWARD        = 0x03;
#define AEEAVRCPTG_PLAYSTAT_SEEK_BACKWARD       = 0x04;
#define AEEAVRCPTG_PLAY_STAT_TRACK_CHANGED      = 0x05
#define AEEAVRCPTG_PLAY_STAT_TRACK_REACHED_END  = 0x06
#define AEEAVRCPTG_PLAY_STAT_TRACK_REACHED_START= 0x07
#define AEEAVRCPTG_PLAYSTAT_ERROR               = 0xFF;

typedef uint32 AEEBTAVRCPTgPlayStatus;

Members:
  AEEAVRCPTG_PLAYSTAT_STOPPED : 
    Current playback status is Stopped
  AEEAVRCPTG_PLAYSTAT_PLAYING : 
    Current playback status is Playing
  AEEAVRCPTG_PLAYSTAT_PAUSED : 
    Current playback status is Paused
  AEEAVRCPTG_PLAYSTAT_SEEK_FORWARD : 
    Current playback status is seeking forward
  AEEAVRCPTG_PLAYSTAT_SEEK_BACKWARD : 
    Current playback status is seeking backward
 AEEAVRCPTG_PLAY_STAT_TRACK_CHANGED :
   Current track is changed
 AEEAVRCPTG_PLAY_STAT_TRACK_REACHED_END:
   Track has reached end
 AEEAVRCPTG_PLAY_STAT_TRACK_REACHED_START:
   Track has reached start
  AEEAVRCPTG_PLAYSTAT_ERROR : 
    Current playback status is Error


===============================================================================
AEEBTAVRCPTgContBattStatus

Description: 
  Possible status levels of the AVRCP Target's/Controller's battery.
Definition: 
  #define AEEBTAVRCPTG_CT_BATT_NORMAL    =0x0;
  #define AEEBTAVRCPTG_CT_BATT_WARNING   =0x1;
  #define AEEBTAVRCPTG_CT_BATT_CRITICAL  =0x2;
  #define AEEBTAVRCPTG_CT_BATT_EXTERNAL  =0x3;
  #define AEEBTAVRCPTG_CT_BATT_FULL      =0x4;
  
  typedef uint32 AEEBTAVRCPTgContBattStatus;

Members:
  AEEBTAVRCPTG_CT_BATT_NORMAL : 
    Battery operation is in normal state.
  AEEBTAVRCPTG_CT_BATT_WARNING :
    Battery is Low, will become inoperable soon.
  AEEBTAVRCPTG_CT_BATT_CRITICAL :
    Battery is very low, unable to operate any more.
  AEEBTAVRCPTG_CT_BATT_EXTERNAL :
    Connected to external power supply.
  AEEBTAVRCPTG_CT_BATT_FULL : 
    Battery is fully charged.

===============================================================================

AEEBTAVRCPGroupNavCommand

Description: 
    Possible Group Navigation Commands.

Definition:
    enum AEEBTAVRCPTgGroupNavCommandEnum
    {
      AEEBTAVRCPTG_NEXT_GROUP,
      AEEBTAVRCPTG_PREVIOUS_GROUP,
      _QIDL_PLACEHOLDER_AEEBTAVRCPTgGroupNavCommandEnum = 0x7fffffff
    };

Members:
      AEEBTAVRCPTG_NEXT_GROUP       : Move to the first song in the next group
      AEEBTAVRCPTG_PREVIOUS_GROUP   : Move to the first song in the previous 
                                      group.

//qidl location=bottom
============================================================================
    INTERFACE DOCUMENTATION
===============================================================================

Interface Name: AEEAVRCPTG_Priv_Ext

Description : 
  AEEAVRCPTG_Priv_Ext Interface is used by application such as media player
  to set the various media attributes for the current playing media. When some 
  of the attribues are not supported or avaliable to the application then the 
  corresponding attribute should be set to a NULL. The application should call 
  the APIs in this interface to update the current status of the playing media.

  This interface also provides the APIs for the media player application 
  to set the various media player attributes their possible values as well as the 
  current set value for each of the attribute

==============================================================================
Interfaces:
==============================================================================
AEEAVRCPTG_Priv_Ext_AddRef()

Description:
   Inherited from IQI_AddRef().

See Also:
   AEEAVRCPTG_Priv_Ext_Release()

==============================================================================

AEEAVRCPTG_Priv_Ext_Release()

Description:
   Inherited from IQI_Release().

See Also:
   AEEAVRCPTG_Priv_Ext_AddRef()
   
==============================================================================

AEEAVRCPTG_Priv_Ext_QueryInterface()

Description:
   Inherited from IQI_QueryInterface().

===============================================================================

Function: AEEAVRCPTG_Priv_Ext_OnEventNotify

Description: 
  Registers a signal with the interface to be set when the event occurs. Once 
  this signal is set, the event may be retrieved by calling 
  AEEAVRCPTG_Priv_Ext_GetEvent().

  Each event is internally queues and presented in order to the application. If 
  too many events have been received before the application retrieves them, 
  oldest event will be dropped and the event  EVENT_Q_OVERFLOW will be generated

Prototype:
  AEEResult AEEAVRCPTG_Priv_Ext_OnEventNotify(AEEAVRCPTG_Priv_Ext* _me, 
                                              ISignal* piSig)

Parameters:
   _me [i]     : The object
   piSig [i]   : Signal to be set when an event occurs.

Return Values:
  AEE_SUCCESS  : The event signal handler was successfully registered.
  AEE_EBADPARM : Invalid input parameters

See Also:
  AEEAVRCPTG_Priv_Ext_GetEvent

===============================================================================
Function: AEEAVRCPTG_Priv_Ext_GetEvent

Description:

Prototype:
  AEEResult AEEAVRCPTG_Priv_Ext_GetEvent(AEEAVRCPTG_Priv_Ext* _me, 
                                         AEEBTAVRCPTgAttrEventEnum* pEvent)

Parameters:
  _me [i]      : The object
   pEvent [o]   : Destination for event data

Return Values:
   AEE_SUCCESS  : Event is successfully retrieved
   AEE_EBADPARM : Invalid input parameters
   AEE_ENOMORE  : No more events to retrieve

See Also:
  AEEAVRCPTG_Priv_Ext_OnEventNotify

===============================================================================

Function: AEEAVRCPTG_Priv_Ext_GetAttrConfigUpdates

Description:
  This API is used to configure the set updates from the application on the 
  AEEAVRCPTG_Priv_Ext interface. This API is called by the media player
  application when it receives the AEEBTAVRCPTG_SET_ATTR_CONFIG_UPDATES event.

  
  This is used to configure the media player to start or stop the updates 
  when the media attributes changes. Further this is also used to control the 
  frequency of the song position update (SetSongPosition ) from the media player 
  (in milliseconds) on this interface.
  
  When the songPosUpdateMs value is set to 0, the app should immediately updtate
  the current song position using the SetSongPositionMs() Interface API.


Prototype:
  AEEResult AEEAVRCPTG_Priv_Ext_GetAttrConfigUpdates(AEEAVRCPTG_Priv_Ext* _me, 
                                                     boolean* startUpdate, 
                                                     int* songPosUpdateMs)

Parameters:
  _me [i]             : The object
  startUpdate [o]     : Boolean indicating the start or stop of updates. 
                        True = Start Updates, False = Stop further updates.
  songPosUpdateMs [o] : Indicates the interval for song position updates in 
                        milli-seconds.

Return Values:
  AEE_SUCCESS       - The configuration options were successfully retrieved 
  AEE_EBADPARM      - Invalid input parameters

See Also:

===============================================================================

Function: AEEAVRCPTG_Priv_Ext_SetMediaTitle

Description:
  This API is used to set the title of the currently playing media.

Prototype:
  AEEResult AEEAVRCPTG_Priv_Ext_SetMediaTitle(AEEAVRCPTG_Priv_Ext* _me,
                                              uint32 charset,
                                              const uint8* title, 
                                              uint32 titleLen)

Parameters:
  _me [i]             : The object
  charset [i]         : The character set encoding used for the title.
  title [i]           : Buffer containing the title encoded in charset
  titleLen [i]        : The length of the buffer

Return Values:
  AEE_SUCCESS       - The configuration options were successfully set 
  AEE_EBADPARM      - Invalid input parameters

See Also:

===============================================================================

Function: AEEAVRCPTG_Priv_Ext_SetArtistName

Description:
  This API is used to set the Artist Name of the currently playing media.

Prototype:
  AEEResult AEEAVRCPTG_Priv_Ext_SetArtistName(AEEAVRCPTG_Priv_Ext* _me, 
                                              uint32 charset, 
                                              const uint8* artistName, 
                                              uint32 artistNameLen )

Parameters:
  _me [i]             : The object
  charset [i]         : The character set encoding used for the artist name.
  title [i]           : Buffer containing the artist name encoded in charset
  titleLen [i]        : The length of the buffer


Return Values:
  AEE_SUCCESS       - The configuration options were successfully set 
  AEE_EBADPARM      - Invalid input parameters

See Also:

===============================================================================

Function: AEEAVRCPTG_Priv_Ext_SetAlbumName 

Description:
  This API is used to set the Album name of the currently playing media.

Prototype:
  AEEResult AEEAVRCPTG_Priv_Ext_SetAlbumName(AEEAVRCPTG_Priv_Ext* _me, 
                                             uint32 charset, 
                                             const uint8* albumName, 
                                             uint32 albumNameLen)

Parameters:
  _me [i]             : The object
  charset [i]         : The character set encoding used for the artist name.
  albumName [i]       : Buffer containing the name of the album encoded in 
                        charset.
  albumNameLen [i]    : The length of the buffer

Return Values:
  AEE_SUCCESS       - The configuration options were successfully set
  AEE_EBADPARM      - Invalid input parameters

See Also:

===============================================================================

Function: AEEAVRCPTG_Priv_Ext_SetMediaTrackNumber

Description:
  This API is used to set the currently playing media's track number.

Prototype: 
  AEEResult AEEAVRCPTG_Priv_Ext_SetMediaTrackNumber(AEEAVRCPTG_Priv_Ext* _me, 
                                                    const uint8* trackNumber, 
                                                    uint32 trackNumberLen)

Parameters:
  _me [i]             : The object
  trackNumber [i]     : Buffer containing the ASCII text of the track number
                        for the currently playing media.
  trackNumberLen [i]  : The length of the buffer.

Return Values:
  AEE_SUCCESS       - The configuration options were successfully set
  AEE_EBADPARM      - Invalid input parameters

See Also:

===============================================================================

Function: AEEAVRCPTG_Priv_Ext_SetTotalTracks

Description: 
  This API is used to set the total tracks in the currently playing media.

Prototype:
  AEEResult AEEAVRCPTG_Priv_Ext_SetTotalTracks(AEEAVRCPTG_Priv_Ext* _me,
                                               const uint8* totalTracks, 
                                               uint32 totalTracksLen )

Parameters:
  _me [i]             : The object
  totalTracks [i]     : Buffer containing the ASCII text of the total tracks 
                        in the currenlty playing media
  totalTracksLen [i]  : The length of the buffer

Return Values:
  AEE_SUCCESS       - The configuration options were successfully set
  AEE_EBADPARM      - Invalid input parameters

See Also:

===============================================================================

Function: AEEAVRCPTG_Priv_Ext_SetGenre
  
Description:
  This API is used to set the Genre of the currently playing media.

Prototype:
  AEEResult AEEAVRCPTG_Priv_Ext_SetGenre(AEEAVRCPTG_Priv_Ext* _me, 
                                         uint32 charset,
                                         const uint8* genre, 
                                         uint32 genreLen )

Parameters:
  _me [i]             : The object
  charset [i]         : The character set encoding used for the genre 
  genre [i]           : Buffer containing the Genre of the currently playing 
                        encoded in charset.
  genreLen [i]        : The length of the buffer

Return Values:
  AEE_SUCCESS       - The configuration options were successfully set
  AEE_EBADPARM      - Invalid input parameters

See Also:

===============================================================================

Function: AEEAVRCPTG_Priv_Ext_SetPlayingTimeMs

Description:
  This API is used to set the playing time in milliseconds for the currently
  playing media.

Prototype:
  AEEResult AEEAVRCPTG_Priv_Ext_SetPlayingTimeMs(AEEAVRCPTG_Priv_Ext* _me,
                                                 const uint8* playingTime, 
                                                 uint32 playingTimeLen)

Parameters:
  _me [i]             : The object
  playingTime [i]     : Buffer containing numeric ASCII text of the playing 
                        time in milliseconds of the currently playing media
  playingTimeLen [i]  : Length of the buffer  

Return Values:
  AEE_SUCCESS       - The configuration options were successfully set
  AEE_EBADPARM      - Invalid input parameters

See Also:

===============================================================================

Function: AEEAVRCPTG_Priv_Ext_SetSongPositionMs

Description: 
  This API is used to set the curreent playing position in milli-seconds

Prototype:
  AEEResult AEEAVRCPTG_Priv_Ext_SetSongPositionMs(AEEAVRCPTG_Priv_Ext* _me, 
                                                  uint32 curPosMs)

Parameters:
  _me [i]             : The object
  curPosMs [i]        : The millisecond value of the current playing position

Return Values:
  AEE_SUCCESS       - The configuration options were successfully set
  AEE_EBADPARM      - Invalid input parameters

See Also:

===============================================================================

Function: AEEAVRCPTG_Priv_Ext_SetPlayStatus

Description:
  This API is useed to set the current playing status

Prototype:
  AEEResult AEEAVRCPTG_Priv_Ext_SetPlayStatus(AEEAVRCPTG_Priv_Ext* _me,
                                              AEEBTAVRCPTgPlayStatus playStatus
											  uint32 curPosMs,
                                              const uint8* trackIndex
                                              uint32 trackIndexLen))

Parameters:
  _me [i]             : The object
  playStatus [i]      : Current play status
  curPosMs [i]        : The millisecond value of the current playing position
  trackIndex [i]      : The index of the current track
  trackIndexLen[i]    : trackIndexLen

Return Values:
  AEE_SUCCESS       - The configuration options were successfully set
  AEE_EBADPARM      - Invalid input parameters

See Also:

===============================================================================

Function: AEEAVRCPTG_Priv_Ext_SetCapability

Description:
    This API is used to set the list of all the Events and company id 
    supported by the Media Player Application. 

Prototype:
    AEEResult AEEAVRCPTG_Priv_Ext_SetCapability(AEEAVRCPTG_Priv_Ext* _me,
                                                AEEBTAVRCPTgMediaEventMask eventMask,
                                                uint32 companyId)
                                         

Parameters:
    _me[i]          : Pointer to the AEEAVRCPTG_Priv_Ext object.
    eventMask[i]       : A mask containing or or more of the events defined in
                         AEEBTAVRCPTgMediaEventMask.
    companyId[i]       : Supported company id by the Target. The app should give 
                         one Company Id supported by it.

Return Values:
    AEE_SUCCESS       - The supported event mask and comp id were successfully
                        set 
    AEE_EBADPARM      - Invalid input parameters

See Also:
    AEEBTAVRCPTgMediaEventMask
===============================================================================

Function: AEEAVRCPTG_Priv_Ext_GetControllerBatteryStatus

Description:
    This API is used to get the current battery status of the remote AVRCP 
    controller. This API is called by the media player application in response 
    to the signal AEEBTAVRCPTG_CT_BATT_STATUS_CHANGED

Prototype:
    AEEResult AEEAVRCPTG_Priv_Ext_GetControllerBatteryStatus(AEEAVRCPTG_Priv_Ext* _me,
                                                             AEEBTAVRCPTgContBattStatus* batteryStatus)

Parameters:
    _me[i]             : Pointer to the AEEAVRCPTG_Priv_Ext object.
    batteryStatus[o]   : The battery status of the controller, one of the 
                         values defined by AEEBTAVRCPTgContBattStatus.

Return Values:
    AEE_SUCCESS       - The controller's battery status was successfully retreived.
    AEE_EBADPARM      - Invalid input parameters

See Also:
    AEEBTAVRCPTgContBattStatus
    AEEBTAVRCPTG_CT_BATT_STATUS_CHANGED
===============================================================================

Function: AEEAVRCPTG_Priv_Ext_SetPlayerAttrList

Description:
    This API is used to set the list of all the application settings attributes
    that are supported by the Media Player.

Prototype:
    AEEResult AEEAVRCPTG_Priv_Ext_SetPlayerAttrList(AEEAVRCPTG_Priv_Ext* _me, 
                                                    uint32* attributeids, 
                                                    uint32 attributeidsCount)

Parameters:
    _me[i]                : Pointer to the AEEAVRCPTG_Priv_Ext object.
    attributeids[i]       : Buffer containing the list of attributes 
                            ids supported by the media player application.
    attributeidsLen[i]    : Count of attribute ids.
    
Return Values:
    AEE_SUCCESS           - The list of supported attributes were successfully 
                            set.
    AEE_EBADPARM          - Invalid input parameters
    See Also:

===============================================================================

Function: AEEAVRCPTG_Priv_Ext_SetPlayerAttrValueList

Description:
    This API is used by media player application to set the list of all the 
    possible values corresponding to a particular attribute id.

Prototype:
    AEEResult AEEAVRCPTG_Priv_Ext_SetPlayerAttrValueList(AEEAVRCPTG_Priv_Ext* _me,
                                                         uint32 attributeid,
                                                         uint32* attributeValues,
                                                         uint32 attributeValuesCount)

Parameters:
    _me[i]                   : Pointer to the AEEAVRCPTG_Priv_Ext object.
    attributeid[i]           : The attribute id corresponding to which the values
                               need to be set.
    attributeValues[i]       : Buffer containing the attribute values
                               corresponding to the input attribute id.
    attributeValuesLen[i]    : Count of attribute value ids.
   
   Return Values: 
    AEE_SUCCESS           - The list of supported attribute values were 
                            successfully set.
    AEE_EBADPARM          - Invalid input parameters

See Also:

===============================================================================

Function: AEEAVRCPTG_Priv_Ext_SetPlayerCurrentAttrValue

Description: 
    This API is used by media player application to set the current set value 
    for the specified attribute id.

Prototype:
    AEEResult AEEAVRCPTG_Priv_Ext_SetPlayerCurrentAttrValue(AEEAVRCPTG_Priv_Ext* _me,
                                                            uint32 attributeid,
                                                            uint32 attributeValue)

Parameters:
    _me[i]                : Pointer to the AEEAVRCPTG_Priv_Ext object.
    attributeid[i]        : The attribute id corresponding to which the current 
                            value need to be set.
    attributeValue[i]     : The current set value.

Return Values:
    AEE_SUCCESS           - The current set attribute value was successfully 
                            set.
    AEE_EBADPARM          - Invalid input parameters

See Also:

===============================================================================

Function: AEEAVRCPTG_Priv_Ext_GetPlayerCurrentAttrValue

Description:
    This API is used to get the value for a player application attribute which is set
    by the AVRCP Controller. This API is called by the media player application in 
    response to the event AEEBTAVRCPTG_PLAYER_APP_SETTING_MODIFIED. The media player
    application is going to get this event whenever Controller sends command to update
    the current value of player attribute application settings.

Prototype:
    AEEResult AEEAVRCPTG_Priv_Ext_GetPlayerCurrentAttrValue(AEEAVRCPTG_Priv_Ext* _me,
                                                            uint32* attributeid,    
                                                            uint32* attributeValue)

Parameters:
    _me[i]                : Pointer to the AEEAVRCPTG_Priv_Ext object.
    attributeid[o]        : The attribute id corresponding to which the current 
                            set value needs to be retrieved.
    attributeValue[o]     : The attribute value

Return Values:

See Also:
    AEEBTAVRCPTG_PLAYER_APP_SETTING_MODIFIED

===============================================================================

Function: AEEAVRCPTG_Priv_Ext_GetDisplayableCharacterSet

Description: 
    This API is used to get the supported character set by the controller.
    This API is called by media player application in response to the event 
    AEEBTAVRCPTG_INFORM_CHARACTER_SET.  

Prototype:
    AEEResult AEEAVRCPTG_Priv_Ext_GetDisplayableCharacterSet(AEEAVRCPTG_Priv_Ext* _me, 
                                                             uint32* charset )

Parameters:
    _me[i]                : Pointer to the AEEAVRCPTG_Priv_Ext object.
    charset[o]            : The character set value.

Return Values:
    AEE_SUCCESS           - The current attribute values was successfully set 
                            or stored to be set later.
    AEE_EBADPARM          - Invalid input parameters

See Also:

===============================================================================

Function: AEEAVRCPTG_Priv_Ext_SetPlayerAttrText

Description:
    This API is used by media player application to set the displayable text 
    associated with the attribute id.

Prototype:
    AEEResult AEEAVRCPTG_Priv_Ext_SetPlayerAttrText(AEEAVRCPTG_Priv_Ext* _me,
                                                    uint32 attributeid,
                                                    uint32  charset,
                                                    uint8* attributeText,
                                                    uint32 attributeTextLen)

Parameters:
    _me[i]                  : Pointer to the AEEAVRCPTG_Priv_Ext object.
    attributeid[i]          : The attribute id corresponding to which the 
                              displayable text needs to be set.
    charset[i]              : The character set encoding used for the 
                              displayable text.
    attributeText[i]        : Buffer containing the attribute id text.
    attributeTextLen[i]     : Length of the buffer.
    

Return Values:
    AEE_SUCCESS           - The attribute text string was successfully 
                            set
    AEE_EBADPARM          - Invalid input parameters.
    
See Also:

===============================================================================

Function: AEEAVRCPTG_Priv_Ext_SetPlayerAttrValueText

Description:
    This API is used by media player application to set the displayable string 
    associated with a particular attribute value of an attribute id.

Prototype:
    AEEResult AEEAVRCPTG_Priv_Ext_SetPlayerAttrValueText(AEEAVRCPTG_Priv_Ext* _me,
                                                         uint32 attributeid,
														 uint32 attributeValue,
                                                         uint32 charset,
                                                         uint8* attributeValueText,
                                                         uint32 attributeValueTextLen)

Parameters:
    _me[i]                       : Pointer to the AEEAVRCPTG_Priv_Ext object.
    attributeid[i]               : The attribute id.
    attributevalue[i]            : The attribute value corresponding corresponding
                                   to which the displayable text has to be set
    charset[i]                   : The character set encoding used for the 
                                   displayable text.
    attributeValueText[i]        : Buffer containing the attribute value 
                                   text.
    attributeValueTextLen[i]     : Length of the buffer.
    

Return Values:
    AEE_SUCCESS           - The attribute value text string was successfully 
                            set
    AEE_EBADPARM          - Invalid input parameters.

See Also:

===============================================================================

Function: AEEAVRCPTG_Priv_Ext_GetNavigateGroupCmd
  

Description:
    This API is used to perform logical one directional group navigation.
    The definitions of groups is implementation dependent. The group 
    structure can consist of parts of or a mix of playlists and artist/
    album/genre folders etc. that are used by the media player application.
    This is called in  response to the event AEEBTAVRCPTG_GROUP_NAV_COMMAND

Prototype:
    AEEResult AEEAVRCPTG_Priv_Ext_NavigateGroup(AEEAVRCPTG_Priv_Ext* _me,
                                                AEEBTAVRCPGroupNavCommand* navigationCommand)

Parameters:
    _me[i]                       : Pointer to the AEEAVRCPTG_Priv_Ext object.
    navigationCommand[o]         : Command to navigate to the next/previous group.

Return Values:
     AEE_SUCCESS           - The attribute value text string was successfully 
                             set
     AEE_EBADPARM          - Invalid input parameters.

See Also:
    AEEBTAVRCPTG_GROUP_NAV_COMMAND

===============================================================================

Function: AEEAVRCPTG_Priv_Ext_SetLastCommandStatus


Description:
    This API is used to set the status of last command executed by
    the media player application. This is called in  response to the 
    event AEEBTAVRCPTG_UPDATE_LAST_CMD_STATUS

Prototype:
    AEEResult SetLastCommandStatus(AEEAVRCPTG_Priv_Ext* _me,
                                   AEEBTAVRCPTgCmdResponseStatus status)

Parameters:
    _me[i]                       : Pointer to the AEEAVRCPTG_Priv_Ext object.
    status[i]                    : Status of the last command executed.  

Return Values:
     AEE_SUCCESS           - The attribute value text string was successfully 
                            set
     AEE_EBADPARM          - Invalid input parameters.

See Also:
    AEEBTAVRCPTG_UPDATE_LAST_CMD_STATUS

*/
#endif /* #ifndef AEEAVRCPTG_PRIV_EXT_H */
