/*======================================================================
USE CASE SCENARIOS DOCUMENTATION
=========================================================================
=Sensor - IPort1 based implementationto Write/Read data to/from a Sensor=

This section discusses how user creates an instance of IPort1 object, 
Writes data into the sensor and Reads data from the sensor.

==Sensor applications' usage of IPort1 interface==


===Step 1: Create instance of IPort1 object for Sensors===

An application will need to create a port to the sensor to be able to 
configure and communicate with it.

{{{
   
	IPort1 *pIPort1; // IPort1 object pointer.
   
	if ( SUCCESS != ISHELL_CreateInstance( pIShell, AEECLSID_Port1Sensor, 
		   (void **)&pIPort1 ) )
	{   
	   // Handle error condition
	   return;
	}

	or
   
	if ( SUCCESS != IEnv_CreateInstance( pIEnv, AEECLSID_Port1Sensor, 
				        (void **)&pIPort1 ) )
	{
	   // Handle error condition
	   return;
	}
}}}

===Step 2: Requesting Data from a sensor===

Here the application is requesting accelx, accely and accelz values. 
The app creates a message buffer and passes it to IPort1_Write. It 
reads data that is returned by the sensors by calling IPort1_Read.
[Note: Please refer to the Sensor Message Protocol described in 
AEEPort1Sensor.bid to find examples of the ASCII messages that
 are used to request data from the Sensors. ]

{{{
	#define                         MAX_SIZE_BUFFER 100

        ISignalCBFactory                *writeData_SignalCBFactory;
        ISignal                         *writeData_Signal;
        ISignalCtl                      *writeData_SignalCtl;

        ISignalCBFactory                *getData_SignalCBFactory;
        ISignal                         *getData_Signal;
        ISignalCtl                      *getData_SignalCtl;

        char                            sendBuf[ MAX_SIZE_BUFFER ];
        char                            receiveBuf[ MAX_SIZE_BUFFER ];
      

        int GetData( SensorApp* pMe )
        {
           char * strgetdata = "get,accelx,accely,accelz";
           len = STRLEN(strgetdata);

           STRLCPY( sendBuf, strgetdata, 
                    ( (len > MAX_SIZE_BUFFER) ? MAX_SIZE_BUFFER : (len+1) ) );

           if ( SUCCESS != ISHELL_CreateInstance( pIShell, AEECLSID_SignalCBFactory, 
                           		          (void**)&getData_SignalCBFactory ) )
           {
              // Handle error condition
              return;
           }

           ISignalCBFactory_CreateSignal( getData_SignalCBFactory, 
                                          GetDataCB, 
                                          pMe, 
                                          &getData_Signal, 
                                          &getData_SignalCtl );

            IPort1_Readable( pSensorPort, getData_Signal );
            WriteData( pMe );
        }
}}}

Call IPort1_Write. If no more data can be written into the sensor manager
it might return AEE_EWOULDBLOCK. To be notified when to call IPort1_Write() 
again, the caller must call IPort1_Writeable().

{{{
        void WriteData( void *pUserData )
        {
           int nRet = SUCCESS;
           SensorApp* pMe = (SensorApp*)pUserData;
           int    numBytesWritten;

           nRet = IPort1_Write( pSensorPort, sendBuf, len, &numBytesWritten );
           if ( AEE_EWOULDBLOCK == nRet )
           {
              ISHELL_CreateInstance( pIShell, 
                                     AEECLSID_SignalCBFactory, 
                                     (void**)&writeData_SignalCBFactory );
              ISignalCBFactory_CreateSignal( writeData_SignalCBFactory, 
                                             WriteData, 
                                             pMe, 
                                             &writeData_Signal, 
                                             &writeData_SignalCtl );

              IPort1_Writeable( pSensorPort, writeData_Signal ); 
              return;
          }

          else if ( SUCCESS ==nRet  )
          {
             printf("IPort1_Write Success");
          }

          else if ( AEE_EFAILED == nRet )
          {
             printf("IPort1_Write failed");        
          }      
      }   
}}}

This is the call back that is called when there is some data to be read. 
If there is no data available at the time this callback is called, 
IPort1_Read() returns AEE_EWOULDBLOCK. The application must then call
IPort1_Readable to enable this callback to be called again when data
becomes available.
The application also needs call ISignalCtl_Enable if it intends to recieve
more than one callback.

{{{
        void GetDataCB( void* pUserData )
        {
           SensorApp* pMe = (SensorApp*)pUserData;
           int nRet = SUCCESS;
           int    numBytesRead;

           nret = IPort1_Read( pSensor, receiveBuf, MAX_SIZE_BUFFER, &numBytesRead );

           if ( AEE_EWOULDBLOCK == nRet )
           {
             //No Data available yet...re-schedule callback
             IPort1_Readable( pSensorPort, getData_Signal );      
           }

           else if ( AEE_SUCCESS == nRet)
           {
             printf("IPort1_Read Success");
             printf("Data recieved is %s",receivebuf);
           }

           else if ( AEE_EFAILED == nRet )
           {
             printf("IPort1_Read Failed");
           }

           ISignalCtl_Enable( getData_SignalCtl );
        }
}}}

===Step 3: Releasing the IPort1 handler===

{{{
	IPort1_Release( pSensor ); //releasing an active IPort1 object pointer
}}}


==Handling Error Conditions==
Following are common error conditions that an application may encounter.
#	Cannot create IPort1 object: The ISHELL_CreateInstance() or IEnv_CreateInstance failed. A likely cause is that the AEECLSID_Port1Sensor
	class is not supported. Check the error code to determine the actual failure.
#	IPort1_Write or IPort1_Read failed. This is mainly due to stream errors and not actual errors returned from the sensors.
#	Check the response string to determine if the response has some error. The "error" tag is embedded in the response and it signifies
	the error returned by the sensor data fetch.

==Summary==
The IPort1 object for class AEECLSID_Port1Sensor can be initialized to stream sensor data from the physical sensor. The IPort1 API should be used in conjunction with the Sensors Message Protocol defined in the AEEPort1Sensor.bid.
