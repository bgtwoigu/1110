#============================================================================
#
#  Description:
#    An includable component of the makefile to build the DMSS software for
#    the SURF (Subscriber Unit Reference Design).
#
#    This file specifies the make file rules that are common across all
#    targets and makefiles
#
# Copyright (c) 2004--2009 by QUALCOMM, Incorporated. All Rights Reserved.
#----------------------------------------------------------------------------
#============================================================================
#
#                     EDIT HISTORY FOR MODULE
#
# $Header: //depot/asic/qsc1100/build/ms/boot_targets_rom.min#25 $ $DateTime: 2009/04/15 05:32:20 $ $Author: dkammath $
#
# when       who     what, where, why
# --------   ---     --------------------------------------------------------
# 04/15/09   ddk     Updated the memory report generation update given by target team.
# 05/01/09   tnk     Splitted Secure boot build into two phases(Normal build,signbuild)
# 11/30/07   ps      Initial Port for ULC
# 02/06/07   anb     Update Certificate Names.
# 12/10/06   anb     Added support to delete and preserve OEMSBL objects.
# 11/15/06   rjain   Added support to take partition sizes from builds file.
# 11/01/06   anb     Added support for Progressive Boot.
# 09/13/06   rjain   Added new signing rules for customer.
#                    Added new rules for internal use and general cleanup.
# 06/28/06   rjain   Support for relocatable QC-SBL; user can now specify a
#                    destination address for the QC-SBL image.
# 05/12/06   rjain   Changes for creating qcsbl.lib file
# 01/13/06   pp      Changes to move hash to first segment
# 11/22/05   eav     Adding the version before creating the header file
# 11/17/05   eav     Adding version number to end of QCSBL, OEMSBL
# 11/09/05   eav     Moved partition.c to be with cfg_data
# 10/05/05   tkuo    Change 6275 to 6280 for signature file name and certificates.
# 05/01/05   tk      Created.
#============================================================================




#===============================================================================
#                             SECURE BOOT DEFINES
#===============================================================================


#-------------------------------------------------------------------------------
# Build paths
#-------------------------------------------------------------------------------
BUILD_NAME = `cd $(SRCROOT); pwd | sed 's/^.*\///';`
MBNPATH = $(BINPATH)/$(TARGET)
MBNPATH_TEMP = $(BINPATH)/$(TARGET)/temp
MBNPATH_FSBL = $(MBNPATH)/fsbl
MBNPATH_DBL = $(MBNPATH)/dbl
MBNPATH_OSBL = $(MBNPATH)/osbl
MBNPATH_AMSSHASH = $(MBNPATH)/amsshash
MBNPATH_INPUTIMAGESFORNOR = $(MBNPATH)/inputimages
MBNPATH_NORPRG = $(MBNPATH)/norprg
MEM_BUILD= A$(BUILD)
export  MBNPATH

#-------------------------------------------------------------------------------
# Certificates directory
#-------------------------------------------------------------------------------
CERTDIR_DBL = $(MBNPATH_DBL)/cert
CERTDIR_OSBL = $(MBNPATH_OSBL)/cert
CERTDIR_AMSS_HASH = $(MBNPATH_AMSSHASH)/cert
CERTDIR_NORPRG = $(MBNPATH_NORPRG)/cert

#-------------------------------------------------------------------------------
# Create certificates directory
#-------------------------------------------------------------------------------
GEN_CERTDIR = mkdir -p $(CERTDIR)
GEN_CERTDIR_DBL = mkdir -p $(CERTDIR_DBL)
GEN_CERTDIR_OSBL = mkdir -p $(CERTDIR_OSBL)
GEN_CERTDIR_HASH = mkdir -p $(CERTDIR_AMSS_HASH)
GEN_CERTDIR_NORPRG = mkdir -p $(CERTDIR_NORPRG)

#-------------------------------------------------------------------------------
# Create MBN directory
#-------------------------------------------------------------------------------
GEN_MBN_PATHS = mkdir -p $(MBNPATH); mkdir -p $(MBNPATH)
GEN_MBN_TEMP_PATHS = mkdir -p $(MBNPATH_TEMP); mkdir -p $(MBNPATH_TEMP)
GEN_MBN_PATHS_FSBL = mkdir -p $(MBNPATH_FSBL); mkdir -p $(MBNPATH_FSBL)
GEN_MBN_PATHS_DBL = mkdir -p $(MBNPATH_DBL); mkdir -p $(MBNPATH_DBL)
GEN_MBN_PATHS_OSBL = mkdir -p $(MBNPATH_OSBL); mkdir -p $(MBNPATH_OSBL)
GEN_MBN_PATHS_HASH = mkdir -p $(MBNPATH_AMSSHASH); mkdir -p $(MBNPATH_AMSSHASH)
GEN_MBN_PATHS_INPUTIMAGESFORNOR = mkdir -p $(MBNPATH_INPUTIMAGESFORNOR); mkdir -p $(MBNPATH_INPUTIMAGESFORNOR)
GEN_MBN_PATHS_NORPRG = mkdir -p $(MBNPATH_NORPRG); mkdir -p $(MBNPATH_NORPRG)

#-------------------------------------------------------------------------------
# Certificate and header names for images
#-------------------------------------------------------------------------------

ifeq ($(USES_QSC1100_LOW_TIER), yes) 
ifeq ($(USES_QSC1100_800MHZ_ONLY), yes) 
	CERT_TITLE = QSC1100_SingleBand
else
	CERT_TITLE = QSC1100_TriBand
endif
else
        CERT_TITLE = QSC1110_TriBand
endif

# AMSS
AMSS_HASH_ATTESTATION_CERT_FILE_NAME := $(CERTDIR_AMSS_HASH)/$(CERT_TITLE)_AMSS_HASH_TABLE-attestation_cert.cer
AMSS_HASH_ATTESTATION_CA_CERT_FILE_NAME := $(CERTDIR_AMSS_HASH)/$(CERT_TITLE)_AMSS_HASH_TABLE-attestation_ca_cert.cer
AMSS_HASH_ROOT_CERT_FILE_NAME := $(CERTDIR_AMSS_HASH)/$(CERT_TITLE)_AMSS_HASH_TABLE-root_cert.cer
AMSS_HASH_SIGNATURE_FILE_NAME := $(CERTDIR_AMSS_HASH)/$(CERT_TITLE)_AMSS_HASH_TABLE-signature.bin
AMSS_HASH_SIGNED_IMAGE_FILE_NAME := $(MBNPATH_AMSSHASH)/amss_hashsec.mbn
AMSS_HASH_CERT_CHAIN_FILE_NAME := $(CERTDIR_AMSS_HASH)/amss_hash_cert_chain.mbn
AMSS_HASH_HD_FILE_NAME := $(MBNPATH_AMSSHASH)/amss_hashhd.mbn

#DBL
DBL_ATTESTATION_CERT_FILE_NAME := $(CERTDIR_DBL)/$(CERT_TITLE)_SBL-attestation_cert.cer
DBL_ATTESTATION_CA_CERT_FILE_NAME := $(CERTDIR_DBL)/$(CERT_TITLE)_SBL-attestation_ca_cert.cer
DBL_ROOT_CERT_FILE_NAME := $(CERTDIR_DBL)/$(CERT_TITLE)_SBL-root_cert.cer
DBL_SIGNATURE_FILE_NAME := $(CERTDIR_DBL)/$(CERT_TITLE)_SBL-signature.bin
DBL_CERT_CHAIN_FILE_NAME := $(CERTDIR_DBL)/dbl_cert_chain.mbn
DBL_SIGNED_IMAGE_FILE_NAME := $(MBNPATH_DBL)/dblsec.mbn
DBL_HD_FILE_NAME := $(MBNPATH_DBL)/dblhd.mbn

# OSBL
OSBL_ATTESTATION_CERT_FILE_NAME := $(CERTDIR_OSBL)/$(CERT_TITLE)_SBL-attestation_cert.cer
OSBL_ATTESTATION_CA_CERT_FILE_NAME := $(CERTDIR_OSBL)/$(CERT_TITLE)_SBL-attestation_ca_cert.cer
OSBL_ROOT_CERT_FILE_NAME := $(CERTDIR_OSBL)/$(CERT_TITLE)_SBL-root_cert.cer
OSBL_SIGNATURE_FILE_NAME := $(CERTDIR_OSBL)/$(CERT_TITLE)_SBL-signature.bin
OSBL_CERT_CHAIN_FILE_NAME := $(CERTDIR_OSBL)/osbl_cert_chain.mbn
OSBL_SIGNED_IMAGE_FILE_NAME := $(MBNPATH_OSBL)/osblsec.mbn
OSBL_HD_FILE_NAME := $(MBNPATH_OSBL)/osblhd.mbn

# NORPRG
NORPRG_ATTESTATION_CERT_FILE_NAME := $(CERTDIR_NORPRG)/$(CERT_TITLE)_Flash_PRG-attestation_cert.cer
NORPRG_ATTESTATION_CA_CERT_FILE_NAME := $(CERTDIR_NORPRG)/$(CERT_TITLE)_Flash_PRG-attestation_ca_cert.cer
NORPRG_ROOT_CERT_FILE_NAME := $(CERTDIR_NORPRG)/$(CERT_TITLE)_Flash_PRG-root_cert.cer
NORPRG_SIGNATURE_FILE_NAME := $(CERTDIR_NORPRG)/$(CERT_TITLE)_Flash_PRG-signature.bin
NORPRG_CERT_CHAIN_FILE_NAME := $(CERTDIR_NORPRG)/norprg_cert_chain.mbn
NORPRG_SIGNED_IMAGE_FILE_NAME := $(MBNPATH_NORPRG)/norprgsec.mbn
NORPRG_HD_FILE_NAME := $(MBNPATH_NORPRG)/norprghd.mbn

#-------------------------------------------------------------------------------
# Build related tool definitions
#-------------------------------------------------------------------------------
GEN_IMAGE_HEADER_TOOL = $(MAKE) -C $(HEADERGEN) -f image_header.mak CUSTNAME=$(TARGET) FLASH_TYPE=$(FLASH_TYPE) all
GEN_NORIMG_TOOL     = $(MAKE) -C $(HEADERGEN) -f norimgtool.mak all
GEN_NORPROGIMG_TOOL = $(MAKE) -C $(HEADERGEN) CUSTNAME=$(TARGET) -f norprogimgtool.mak all
GEN_ATTACH_CERT_TOOL  = $(MAKE) -C $(HEADERGEN) -f image_auth.mak all
GEN_HEADR_GEN_TOOLS  = $(MAKE) -C $(HEADERGEN) -f image_header.mak CUSTNAME=$(TARGET) all; $(MAKE) -C $(HEADERGEN) -f createsecelf.mak all
GEN_NORIMG_GEN_TOOLS  = $(MAKE) -C $(HEADERGEN) -f norimgtool.mak all;$(MAKE) -C $(HEADERGEN) -f norprogimgtool.mak all

#-------------------------------------------------------------------------------
# Tool to generate progressive boot ELF and hash table
#-------------------------------------------------------------------------------
GEN_ELF_TOOL = $(MAKE) -C $(HEADERGEN) -f pboot_utils.mak all
PBOOT_GEN_ELF = $(HEADERGEN)/pboot_gen_elf.exe
PBOOT_HASH2C = $(HEADERGEN)/pboot_hash2C.exe
PBOOT_ADD_HASH = $(HEADERGEN)/pboot_add_hash.exe

#-------------------------------------------------------------------------------
# Tool to generate source address of DBLOSBL/AMSS
#-------------------------------------------------------------------------------
SRC_ADDR_GEN_TOOL = perl src_addr_gen.pl

#----------------------------------------------------------------------------
# Tool generation targets
#----------------------------------------------------------------------------

#pragma RUNLOCAL
$(IMAGE_HEADER):
	@echo ---------------------------------------------------------------
	@echo Generating Image Header Generation Tool
	@echo
	@$(GEN_IMAGE_HEADER_TOOL)
	@echo ---------------------------------------------------------------
	
$(PBOOT_GEN_ELF) $(PBOOT_ADD_HASH) $(PBOOT_HASH2C) :
	@echo ---------------------------------------------------------------
	@echo Generating ELF Generation Tools
	@echo
	@$(GEN_ELF_TOOL)
	@echo ---------------------------------------------------------------

#pragma RUNLOCAL
$(NORPROGIMG_TOOL): .frc
	@echo ---------------------------------------------------------------
	@echo Generating NOR Image Generation Tool
	@echo
	@$(GEN_NORPROGIMG_TOOL)
	@echo ---------------------------------------------------------------
        
#pragma RUNLOCAL
$(ATTACH_CERT):
	@echo ---------------------------------------------------------------
	@echo Generating Image Signing Tool
	@echo
	@$(GEN_ATTACH_CERT_TOOL)
	@echo ---------------------------------------------------------------

#-------------------------------------------------------------------------------
# AMSS generation related rules and definitions
#-------------------------------------------------------------------------------
GEN_AMSS_MBN  = $(PBOOT_GEN_ELF) $(BUILD).elf $(SCLFILE) $(MBNPATH_TEMP)/amss_temp.mbn $(MBNPATH_AMSSHASH)/amss_hash.mbn
GEN_HASHTABLE =

ifeq ($(USES_AUTHENTICATE_IMAGE), yes)
	GEN_SIGNED_AMSS_MBN = $(PBOOT_ADD_HASH) $(MBNPATH_TEMP)/amss_temp.mbn $(MBNPATH_AMSSHASH)/amss_hashhd.mbn $(MBNPATH_AMSSHASH)/amss_hashsec.mbn $(MBNPATH)/amss.mbn
else
	GEN_SIGNED_AMSS_MBN = $(PBOOT_ADD_HASH) -d $(MBNPATH_TEMP)/amss_temp.mbn $(MBNPATH_AMSSHASH)/amss_hashhd.mbn $(MBNPATH_AMSSHASH)/amss_hash.mbn $(MBNPATH)/amss.mbn
endif

GEN_AMSS_HEADER = $(HEADERGEN)/image_header $(FLASH_TYPE) amss $(MBNPATH)/amss.mbn $(MBNPATH)/amsshd.mbn

DEL_AMSS_TEMP = if test -f $(MBNPATH_TEMP)/amss_temp.mbn; then rm -f $(MBNPATH_TEMP)/amss_temp.mbn ; fi

GEN_PARTITION_MBN = 	$(MAKE) -C $(PARTITION) -f partition.mak CUSTNAME=$(TARGET) FLASH_TYPE=$(FLASH_TYPE) all; \
			$(COPY)  $(call slashes,$(PARTITION)/partition_$(FLASH_TYPE).mbn $(MBNPATH)/partition.mbn); \
			echo Copied $(PARTITION)/partition_$(FLASH_TYPE).mbn to $(MBNPATH)

#-------------------------------------------------------------------------------
# FSBL generation related definitions
#-------------------------------------------------------------------------------
CPY_FSBL_IMG = $(COPY) $(call slashes,$(FSBL)/fsbl_$(BUILD).mbn $(MBNPATH_FSBL)/fsbl.mbn)

GEN_FSBL_MBN = $(MAKE) -C $(FSBL_TARGET) -f fsbl.mak FLASH_TYPE=$(FLASH_TYPE) CUSTNAME=$(TARGET) all
GEN_FSBL_HASH       = $(PBOOT_GEN_ELF) -d $(FSBL)/fsbl_$(BUILD).elf $(DBL)/fsbl_hash_$(BUILD).txt
CONVERT_FSBL_HASH   = $(PBOOT_HASH2C) $(DBL)/fsbl_hash_$(BUILD).txt $(DBL)/fsbl_hash_$(BUILD).c; rm -f $(DBL)/fsbl_hash_$(BUILD).txt
ifeq ($(USES_AUTHENTICATE_IMAGE), yes)
GEN_FSBL_SRC_ADDR = $(SRC_ADDR_GEN_TOOL) -fsbl $(BUILD) -sign
else
GEN_FSBL_SRC_ADDR = $(SRC_ADDR_GEN_TOOL) -fsbl $(BUILD) 
endif

#-------------------------------------------------------------------------------
# DBL generation related definitions
#-------------------------------------------------------------------------------
ifeq ($(USES_AUTHENTICATE_IMAGE), yes)
GEN_DBL_SRC_ADDR = $(SRC_ADDR_GEN_TOOL) -dbl $(BUILD) -sign
else
GEN_DBL_SRC_ADDR = $(SRC_ADDR_GEN_TOOL) -dbl $(BUILD) 
endif
CPY_DBL_IMG = $(COPY) $(call slashes,$(DBL)/dbl_$(BUILD).mbn $(MBNPATH_DBL)/dbl.mbn)
GEN_DBL_MBN = $(MAKE) -C $(DBL_TARGET) -f dbl.mak CUSTNAME=$(TARGET) FLASH_TYPE=$(FLASH_TYPE) all 

#-------------------------------------------------------------------------------
# OSBL generation related definitions
#-------------------------------------------------------------------------------
ifeq ($(USES_AUTHENTICATE_IMAGE), yes)
GEN_OSBL_SRC_ADDR = $(SRC_ADDR_GEN_TOOL) -osbl $(BUILD) -sign
else
GEN_OSBL_SRC_ADDR = $(SRC_ADDR_GEN_TOOL) -osbl $(BUILD) 
endif

CPY_OSBL_IMG = $(COPY) $(call slashes,$(OSBL)/osbl_$(BUILD).mbn $(MBNPATH_OSBL)/osbl.mbn)
GEN_OSBL_MBN = $(MAKE) -C $(OSBL_TARGET) -f osbl.mak FLASH_TYPE=$(FLASH_TYPE) CUSTNAME=$(TARGET) all

#-------------------------------------------------------------------------------
# NORPRG generation related definitions
#-------------------------------------------------------------------------------

# This command creates a c file then compiles that file to output values for 
#  HOSTDL creation. It prints the SCL_HOSTDL_BASE,SCL_HOSTDL_BASE and 
#  an offset of 0x28 bytes after so the header can be inserted before the 
#  image. These values are used in HOSTDL_ADDR which is passed to 
#  ap_config.min, to set when nandprg is build. HOSTDL_ADDR_HDR is used to 
#  place the signed image and header into an elf file that is then converted 
#  to a hex file for QPST. 
GET_HOSTDL_ADDRS:= \
  $(shell gawk 'BEGIN {printf("%cinclude \"cust$(BUILD).h\"\n",35)}' \
  | tr "[:upper:]" "[:lower:]" > get_hostdl_addr.c) \
  $(shell echo "int main() { printf(\"%x %x\", \
  SCL_HOSTDL_BASE,SCL_HOSTDL_BASE+40); return 0; }" >> \
  get_hostdl_addr.c) \
  $(shell gcc -I../cust/ -o get_hostdl_addr.exe get_hostdl_addr.c) \
  $(shell ./get_hostdl_addr.exe) \
  $(shell rm -f get_hostdl_addr.c; rm -f get_hostdl_addr.exe)

HOSTDL_ADDR_HDR = 0x$(word 1,$(GET_HOSTDL_ADDRS))

# Offset the start of the HOSTDL code
export HOSTDL_ADDR = 0x$(word 2,$(GET_HOSTDL_ADDRS))


# This command generates a binary of norprg that can be signed.
ifeq ($(findstring RVCT,$(ARMTOOLS)),RVCT)
GEN_NORPRG_MBN = $(HEXTOOL) -bin -o $(MBNPATH_NORPRG)/norprg.mbn ../../tools/hostdl_rvct/norprg.elf
else
GEN_NORPRG_MBN = $(HEXTOOL) -bin -o $(MBNPATH_NORPRG)/norprg.mbn ../../tools/hostdl/norprg.elf
endif


#Check to make sure that the build supports creating NORPRG_HDR
ifeq ($(USES_NORPRG_HDR), yes)
       	# Generate nprgxxxx.hex
        ifeq ($(USES_QSC1100_TARGET), yes)
        	ifeq ($(USES_AUTHENTICATE_IMAGE), yes)
        		GEN_NORPRG_HEX  = cat $(MBNPATH_NORPRG)/norprghd.mbn > $(MBNPATH_NORPRG)/norprgcombined.mbn; \
                                   cat $(MBNPATH_NORPRG)/norprgsec.mbn >> $(MBNPATH_NORPRG)/norprgcombined.mbn; \
                                   objcopy -O ihex -I binary $(MBNPATH_NORPRG)/norprgcombined.mbn $(MBNPATH)/APRG1100.hex --change-addresses $(HOSTDL_ADDR_HDR)
        	else
        		GEN_NORPRG_HEX  = cat $(MBNPATH_NORPRG)/norprghd.mbn > $(MBNPATH_NORPRG)/norprgcombined.mbn; \
                                   cat $(MBNPATH_NORPRG)/norprg.mbn >> $(MBNPATH_NORPRG)/norprgcombined.mbn; \
                                   objcopy -O ihex -I binary $(MBNPATH_NORPRG)/norprgcombined.mbn $(MBNPATH)/APRG1100.hex --change-addresses $(HOSTDL_ADDR_HDR)
        	endif
        else
        	ifeq ($(USES_AUTHENTICATE_IMAGE), yes)
        		GEN_NORPRG_HEX  = cat $(MBNPATH_NORPRG)/norprghd.mbn > $(MBNPATH_NORPRG)/norprgcombined.mbn; \
                                   cat $(MBNPATH_NORPRG)/norprgsec.mbn >> $(MBNPATH_NORPRG)/norprgcombined.mbn; \
                                   objcopy -O ihex -I binary $(MBNPATH_NORPRG)/norprgcombined.mbn $(MBNPATH)/APRG1110.hex --change-addresses $(HOSTDL_ADDR_HDR)
        	else
        		GEN_NORPRG_HEX  = cat $(MBNPATH_NORPRG)/norprghd.mbn > $(MBNPATH_NORPRG)/norprgcombined.mbn; \
                                   cat $(MBNPATH_NORPRG)/norprg.mbn >> $(MBNPATH_NORPRG)/norprgcombined.mbn; \
                                   objcopy -O ihex -I binary $(MBNPATH_NORPRG)/norprgcombined.mbn $(MBNPATH)/APRG1110.hex --change-addresses $(HOSTDL_ADDR_HDR)
        	endif
        endif
else
        ifeq ($(USES_QSC1100_TARGET), yes)
        	GEN_NORPRG_HEX  = objcopy -O ihex -I binary $(MBNPATH_NORPRG)/norprg.mbn $(MBNPATH)/APRG1100.hex --change-addresses $(HOSTDL_ADDR_HDR)
        else
        	GEN_NORPRG_HEX  = objcopy -O ihex -I binary $(MBNPATH_NORPRG)/norprg.mbn $(MBNPATH)/APRG1110.hex --change-addresses $(HOSTDL_ADDR_HDR)
        endif
endif

#-------------------------------------------------------------------------------
# Build Utilities...
#-------------------------------------------------------------------------------
GEN_CMM_SCRIPTS_TOOL = $(MAKE) -C $(HEADERGEN) -f pboot_utils.mak gen_cmm_scripts
DEBUG_CONSTANT_COMPILE_CMM = $(MS)/cmm/debug_constant_compile.cmm
OSBL_START_LOCATIONS_CMM = $(MS)/cmm/osbl_start_location.cmm
ifeq "$(strip $(FLASH_TYPE))" "nand"
GEN_CMM_SCRIPTS = $(HEADERGEN)/gen_cmm_scripts -flashtype $(FLASH_TYPE) -ramstartaddr $(RAM_START_ADDR) \
			-osbldestaddr $(OSBL_ADDR) -elffile $(MBNPATH_TEMP)/amss_temp.mbn \
			-osblscriptname $(OSBL_START_LOCATIONS_CMM) -amssentrypointscriptname $(DEBUG_CONSTANT_COMPILE_CMM)
else
GEN_CMM_SCRIPTS = $(HEADERGEN)/gen_cmm_scripts -flashtype $(FLASH_TYPE) -ramstartaddr $(RAM_START_ADDR) \
			-osbldestaddr $(OSBL_ADDR) -elffile $(MBNPATH_TEMP)/amss_temp.mbn -syspartition $(MBNPATH_OUTPUTIMAGESFORNOR)/sys_partition.mbn \
			-osblscriptname $(OSBL_START_LOCATIONS_CMM) -amssentrypointscriptname $(DEBUG_CONSTANT_COMPILE_CMM)
endif

#-------------------------------------------------------------------------------
# Back up all the images for NOR Builds.....
#-------------------------------------------------------------------------------
BCKUP_AMSSIMG_FORNOR = if test -f $(MBNPATH)/amss.mbn; then mv $(MBNPATH)/amss.mbn $(MBNPATH_INPUTIMAGESFORNOR)/amss.mbn ; fi
BCKUP_AMSSHDIMG_FORNOR = if test -f $(MBNPATH)/amsshd.mbn; then mv $(MBNPATH)/amsshd.mbn $(MBNPATH_INPUTIMAGESFORNOR)/amsshd.mbn ; fi
BCKUP_FSBLIMG_FORNOR = if test -f $(MBNPATH)/fsbl.mbn; then mv $(MBNPATH)/fsbl.mbn $(MBNPATH_INPUTIMAGESFORNOR)/fsbl.mbn ; fi
BCKUP_FSBLHDIMG_FORNOR = if test -f $(MBNPATH)/fsblhd.mbn; then mv $(MBNPATH)/fsblhd.mbn $(MBNPATH_INPUTIMAGESFORNOR)/fsblhd.mbn ; fi
BCKUP_DBLIMG_FORNOR = if test -f $(MBNPATH)/dbl.mbn; then mv $(MBNPATH)/dbl.mbn $(MBNPATH_INPUTIMAGESFORNOR)/dbl.mbn ; fi
BCKUP_DBLHDIMG_FORNOR = if test -f $(MBNPATH)/dblhd.mbn; then mv $(MBNPATH)/dblhd.mbn $(MBNPATH_INPUTIMAGESFORNOR)/dblhd.mbn ; fi
BCKUP_OSBLIMG_FORNOR = if test -f $(MBNPATH)/osbl.mbn; then mv $(MBNPATH)/osbl.mbn $(MBNPATH_INPUTIMAGESFORNOR)/osbl.mbn ; fi
BCKUP_OSBLCFGDATAIMG_FORNOR = if test -f $(MBNPATH)/osblhd_cfgdata.mbn; then mv $(MBNPATH)/osblhd_cfgdata.mbn $(MBNPATH_INPUTIMAGESFORNOR)/osblhd_cfgdata.mbn ; fi
BCKUP_USRPARTITION_FORNOR = if test -f $(MBNPATH)/usr_partition.mbn; then mv $(MBNPATH)/usr_partition.mbn $(MBNPATH_INPUTIMAGESFORNOR)/usr_partition.mbn; fi
CPY_AMSSIMG_FORNOR      = $(COPY) $(call slashes,$(MBNPATH)/amss.mbn $(MBNPATH)/tempfromamss.mbn)
DEL_AMSSIMG_FORNOR      = if test -f $(MBNPATH)/amss.mbn; then rm -f $(MBNPATH)/amss.mbn ; fi
DEL_AMSSIMG_TEMP_FORNOR = if test -f $(MBNPATH)/tempfromamss.mbn; then rm -f $(MBNPATH)/tempfromamss.mbn ; fi

#-------------------------------------------------------------------------------
# Attach certificate and generate header rules for all images
#-------------------------------------------------------------------------------
ATTACH_HASH_CERT = $(ATTACH_CERT) $(MBNPATH_AMSSHASH)/amss_hash.mbn $(AMSS_HASH_SIGNATURE_FILE_NAME) $(AMSS_HASH_ATTESTATION_CERT_FILE_NAME) $(AMSS_HASH_ATTESTATION_CA_CERT_FILE_NAME) $(AMSS_HASH_CERT_CHAIN_FILE_NAME) $(AMSS_HASH_SIGNED_IMAGE_FILE_NAME)
ATTACH_DBL_CERT = $(ATTACH_CERT) $(MBNPATH_DBL)/dbl.mbn $(DBL_SIGNATURE_FILE_NAME) $(DBL_ATTESTATION_CERT_FILE_NAME) $(DBL_ATTESTATION_CA_CERT_FILE_NAME) $(DBL_CERT_CHAIN_FILE_NAME) $(DBL_SIGNED_IMAGE_FILE_NAME)
ATTACH_OSBL_CERT = $(ATTACH_CERT) $(MBNPATH_OSBL)/osbl.mbn $(OSBL_SIGNATURE_FILE_NAME) $(OSBL_ATTESTATION_CERT_FILE_NAME) $(OSBL_ATTESTATION_CA_CERT_FILE_NAME) $(OSBL_CERT_CHAIN_FILE_NAME) $(OSBL_SIGNED_IMAGE_FILE_NAME)
ATTACH_NANDPRG_CERT = $(ATTACH_CERT) $(MBNPATH_NANDPRG)/nandprg.mbn $(NANDPRG_SIGNATURE_FILE_NAME) $(NANDPRG_ATTESTATION_CERT_FILE_NAME) $(NANDPRG_ATTESTATION_CA_CERT_FILE_NAME) $(NANDPRG_CERT_CHAIN_FILE_NAME) $(NANDPRG_SIGNED_IMAGE_FILE_NAME)
ATTACH_NORPRG_CERT = $(ATTACH_CERT) $(MBNPATH_NORPRG)/norprg.mbn $(NORPRG_SIGNATURE_FILE_NAME) $(NORPRG_ATTESTATION_CERT_FILE_NAME) $(NORPRG_ATTESTATION_CA_CERT_FILE_NAME) $(NORPRG_CERT_CHAIN_FILE_NAME) $(NORPRG_SIGNED_IMAGE_FILE_NAME)


#TODO
ifeq ($(USES_AUTHENTICATE_IMAGE), yes)
	GEN_HASH_HEADER = $(IMAGE_HEADER) $(FLASH_TYPE) hash $(MBNPATH_AMSSHASH)/amss_hash.mbn $(AMSS_HASH_HD_FILE_NAME) $(AMSS_HASH_SIGNATURE_FILE_NAME)  $(AMSS_HASH_CERT_CHAIN_FILE_NAME) $(AMSS_HASH_SIGNED_IMAGE_FILE_NAME)	
	GEN_FSBL_HEADER = $(IMAGE_HEADER) $(FLASH_TYPE) fsbl $(MBNPATH_FSBL)/fsbl.mbn $(FSBL_HD_FILE_NAME) $(FSBL_SIGNATURE_FILE_NAME)  $(FSBL_CERT_CHAIN_FILE_NAME) $(FSBL_SIGNED_IMAGE_FILE_NAME)
	GEN_DBL_HEADER = $(IMAGE_HEADER) $(FLASH_TYPE) dbl_preamble $(MBNPATH_DBL)/dbl.mbn $(MBNPATH_FSBL)/fsbl.mbn $(DBL_HD_FILE_NAME) $(DBL_SIGNATURE_FILE_NAME)  $(DBL_CERT_CHAIN_FILE_NAME) $(DBL_SIGNED_IMAGE_FILE_NAME)
	GEN_OSBL_HEADER = $(IMAGE_HEADER) $(FLASH_TYPE) osbl $(MBNPATH_OSBL)/osbl.mbn $(OSBL_HD_FILE_NAME) $(OSBL_ADDR) $(OSBL_SIGNATURE_FILE_NAME)  $(OSBL_CERT_CHAIN_FILE_NAME) $(OSBL_SIGNED_IMAGE_FILE_NAME)
	GEN_NANDPRG_HEADER = $(IMAGE_HEADER) $(FLASH_TYPE) nandprg $(MBNPATH_NANDPRG)/nandprg.mbn $(NANDPRG_HD_FILE_NAME) $(HOSTDL_ADDR) $(NANDPRG_SIGNATURE_FILE_NAME) $(NANDPRG_CERT_CHAIN_FILE_NAME) $(NANDPRG_SIGNED_IMAGE_FILE_NAME)
	GEN_NORPRG_HEADER = $(IMAGE_HEADER) $(FLASH_TYPE) norprg $(MBNPATH_NORPRG)/norprg.mbn $(NORPRG_HD_FILE_NAME) $(HOSTDL_ADDR) $(NORPRG_SIGNATURE_FILE_NAME) $(NORPRG_CERT_CHAIN_FILE_NAME) $(NORPRG_SIGNED_IMAGE_FILE_NAME)

else
	GEN_HASH_HEADER = $(IMAGE_HEADER) $(FLASH_TYPE) hash $(MBNPATH_AMSSHASH)/amss_hash.mbn $(AMSS_HASH_HD_FILE_NAME)
	GEN_FSBL_HEADER = $(IMAGE_HEADER) $(FLASH_TYPE) fsbl $(MBNPATH_FSBL)/fsbl.mbn $(FSBL_HD_FILE_NAME)
	GEN_DBL_HEADER = $(IMAGE_HEADER) $(FLASH_TYPE) dbl_preamble $(MBNPATH_DBL)/dbl.mbn $(MBNPATH_FSBL)/fsbl.mbn $(DBL_HD_FILE_NAME)
	GEN_OSBL_HEADER = $(IMAGE_HEADER) $(FLASH_TYPE) osbl $(MBNPATH_OSBL)/osbl.mbn $(OSBL_HD_FILE_NAME) $(OSBL_ADDR)
	GEN_NANDPRG_HEADER = $(IMAGE_HEADER) $(FLASH_TYPE) nandprg $(MBNPATH_NANDPRG)/nandprg.mbn $(NANDPRG_HD_FILE_NAME) $(HOSTDL_ADDR)
	GEN_NORPRG_HEADER = $(IMAGE_HEADER) $(FLASH_TYPE) norprg $(MBNPATH_NORPRG)/norprg.mbn $(NORPRG_HD_FILE_NAME) $(HOSTDL_ADDR)
endif


#-------------------------------------------------------------------------------
# Bin file delete rule definitions
#-------------------------------------------------------------------------------
DELETE_FSBL_MBNS = -if test -d $(MBNPATH); then rm -f $(MBNPATH)/fsbl.mbn $(MBNPATH_FSBL); rm -f -r $(MBNPATH_FSBL); fi
DELETE_MBNPATH_FSBL_MBNS = -if test -d $(MBNPATH_FSBL); then rm -f $(MBNPATH_FSBL)/fsbl.mbn $(MBNPATH_FSBL)/fsblhd.mbn $(FSBL_SIGNED_IMAGE_FILE_NAME); fi

DELETE_DBL_MBNS = -if test -d $(MBNPATH); then rm -f $(MBNPATH)/dbl.mbn; rm -f -r $(MBNPATH_DBL);  fi
DELETE_MBNPATH_DBL_MBNS = -if test -d $(MBNPATH_DBL); then rm -f $(MBNPATH_DBL)/dbl.mbn $(MBNPATH_DBL)/dblhd.mbn $(DBL_SIGNED_IMAGE_FILE_NAME) ; fi

DELETE_OSBL_MBNS = -if test -d $(MBNPATH); then rm -f $(MBNPATH)/osbl.mbn; rm -f -r $(MBNPATH_OSBL);  fi
DELETE_MBNPATH_OSBL_MBNS = -if test -d $(MBNPATH_OSBL); then rm -f $(MBNPATH_OSBL)/osbl.mbn $(MBNPATH_OSBL)/osblhd.mbn $(OSBL_SIGNED_IMAGE_FILE_NAME) ; fi

DELETE_MBNPATH_AMSSHASH_MBNS = -if test -d $(MBNPATH_AMSSHASH); then rm -f $(MBNPATH_AMSSHASH)/amss_hash.mbn $(MBNPATH_OSBL)/amss_hashhd.mbn $(AMSS_HASH_SIGNED_IMAGE_FILE_NAME) ; rm -r -f $(MBNPATH_AMSSHASH); fi

ifeq "$(strip $(FLASH_TYPE))" "nand"
	DELETE_AMSS_PART_MBNS = -if test -d $(MBNPATH); then rm -f $(MBNPATH)/amss.mbn $(MBNPATH)/partition.mbn; fi
else # NOR
	DELETE_AMSS_PART_MBNS = -if test -d $(MBNPATH); then rm -r $(MBNPATH)/amss.mbn; fi 
      DELETE_AMSS_INPUTIMAGES_MBNS = -if test -d $(MBNPATH_INPUTIMAGESFORNOR); then rm -r -f $(MBNPATH_INPUTIMAGESFORNOR) ; fi 
      DELETE_AMSS_TEMP_MBNS = -if test -d $(MBNPATH_TEMP); then rm -r -f $(MBNPATH_TEMP);fi 
      DELETE_ALL_MBN =  -if test -f $(MBNPATH)/all.mbn; then rm -r $(MBNPATH)/all.mbn; fi
endif

ifeq "$(strip $(FLASH_TYPE))" "nor"
        DELETE_MBNPATH_ARMPRG_MBNS = -if test -d $(MBNPATH_NORPRG); then rm -rf $(MBNPATH_NORPRG); fi
endif
DELETE_ARMPRG_HEX = -if test -d $(MBNPATH); then rm -f $(MBNPATH)/APRG11x0.hex; rm -f -r $(MBNPATH_DBL);  fi

#-------------------------------------------------------------------------------
# Build related tool delete definitions
#-------------------------------------------------------------------------------
DELETE_IMAGE_HEADER_TOOL = $(MAKE) -C $(HEADERGEN) -f image_header.mak CUSTNAME=$(TARGET) FLASH_TYPE=$(FLASH_TYPE) clean
DELETE_NORIMG_TOOL     = $(MAKE) -C $(HEADERGEN) -f norimgtool.mak clean
DELETE_NORPROGIMG_TOOL = $(MAKE) -C $(HEADERGEN) CUSTNAME=$(TARGET) -f norprogimgtool.mak clean
DELETE_ATTACH_CERT_TOOL  = $(MAKE) -C $(HEADERGEN) -f image_auth.mak clean
DELETE_HEADR_GEN_TOOLS  = $(MAKE) -C $(HEADERGEN) -f image_header.mak CUSTNAME=$(TARGET) clean; $(MAKE) -C $(HEADERGEN) -f createsecelf.mak clean
DELETE_NORIMG_GEN_TOOLS  = $(MAKE) -C $(HEADERGEN) -f norimgtool.mak clean;$(MAKE) -C $(HEADERGEN) -f norprogimgtool.mak clean

#-------------------------------------------------------------------------------
# Phony Build product specification rule
#-------------------------------------------------------------------------------

.PHONY: $(SRCROOT)/BuildProducts.txt

bldprod: $(SRCROOT)/BuildProducts.txt

ifeq "$(strip $(FLASH_TYPE))" "nor"

# Use the image tool to combine images
DEL_ALL_MBN = @rm -f $(MBNPATH)/all.mbn

ifeq ($(USES_AUTHENTICATE_IMAGE), yes)
WRAPUP_IMAGE = 	$(HEADERGEN)/norprogimgtool \
                $(MBNPATH_INPUTIMAGESFORNOR)/amss.mbn \
                $(DBL_HD_FILE_NAME) \
                $(DBL_SIGNED_IMAGE_FILE_NAME) \
                $(MBNPATH_FSBL)/fsbl.mbn \
                $(OSBL_HD_FILE_NAME) \
                $(OSBL_SIGNED_IMAGE_FILE_NAME) \
                $(MBNPATH)/all.mbn
else
                WRAPUP_IMAGE = 	$(HEADERGEN)/norprogimgtool \
                $(MBNPATH_INPUTIMAGESFORNOR)/amss.mbn \
                $(DBL_HD_FILE_NAME) \
                $(MBNPATH_DBL)/dbl.mbn \
                $(MBNPATH_FSBL)/fsbl.mbn \
                $(OSBL_HD_FILE_NAME) \
                $(MBNPATH_OSBL)/osbl.mbn \
                $(MBNPATH)/all.mbn
endif                
                
                                       


$(SRCROOT)/BuildProducts.txt:
	@echo Creating build-product specification file $@
	@if test -f $@; then chmod +rwx $@; fi
	@rm -f $@
	@touch $@
	@echo $(patsubst ../../%,./%,$(MBNPATH))/all.mbn > $@

else

$(SRCROOT)/BuildProducts.txt:
	@echo Creating build-product specification file $@
	@if test -f $@; then chmod +rwx $@; fi
	@rm -f $@
	@touch $@
	@echo $(patsubst ../../%,./%,$(MBNPATH))/amss.mbn >> $@
	@echo $(patsubst ../../%,./%,$(MBNPATH))/amsshd.mbn >> $@
	@echo $(patsubst ../../%,./%,$(MBNPATH))/fsbl.mbn >> $@
	@echo $(patsubst ../../%,./%,$(MBNPATH))/dbl.mbn >> $@
	@echo $(patsubst ../../%,./%,$(MBNPATH))/partition.mbn >> $@
	@echo $(patsubst ../../%,./%,$(MBNPATH))/osbl.mbn >> $@

endif


#-------------------------------------------------------------------------------
# Main target rule
#-------------------------------------------------------------------------------


#pragma RUNLOCAL
#ifeq ($(USES_AUTHENTICATE_IMAGE), yes)
#$(TARGET).bin:  genhash genfsbl gendbl genosbl gennandprg gennorprg echo_check_cert checkCertLoop signamss genamsshd signfsbl signdbl signosbl \
#                signnandprg signnorprg wrapup wrapup_nor
#else
#$(TARGET).bin:  genhash genfsbl gendbl genosbl gennandprg gennorprg signamss genamsshd signfsbl signdbl signosbl signnandprg signnorprg wrapup wrapup_nor
#endif

#temporarily taking out nandprg, norprg until they are ported to LCU
#pragma RUNLOCAL
ifeq ($(USES_AUTHENTICATE_IMAGE), yes)
$(TARGET).bin:  genhash genfsbl gendbl genosbl gennorprg gentools echo_need_second_build bldprod
else
$(TARGET).bin:  genhash genfsbl gendbl genosbl gennorprg gentools signamss genamsshd signdbl signosbl signnorprg wrapup_nor bldprod
endif


#-------------------------------------------------------------------------------
# Image generation rules
#-------------------------------------------------------------------------------

#pragma RUNLOCAL
gentools: $(IMAGE_HEADER) $(ATTACH_CERT)

#pragma RUNLOCAL
genhash:
	@echo Generating AMSS + Header Generation Tools + Authentication Tools
	@echo
	@$(DELETE_AMSS_PART_MBNS)
	@$(GEN_MBN_PATHS)
	@$(GEN_MBN_TEMP_PATHS)
	@$(GEN_MBN_PATHS_HASH)
ifeq ($(USES_AUTHENTICATE_IMAGE), yes)
	@$(GEN_CERTDIR_HASH)
endif
	@$(SRC_ADDR_GEN_TOOL) -amss $(BUILD)
	@$(GEN_ELF_TOOL)
	@$(GEN_AMSS_MBN)
	@echo ---------------------------------------------------------------
	@echo Generate AMSS Hash Table
	@$(GEN_HASHTABLE)
	@echo ---------------------------------------------------------------

#pragma RUNLOCAL
genorprogtool:
	@echo Generating NOR Programming tool.
	@$(GEN_NORPROGIMG_TOOL)
	@echo ---------------------------------------------------------------

#pragma RUNLOCAL
genfsbl: $(PBOOT_GEN_ELF) $(PBOOT_HASH2C)
	@echo Generating FSBL
	@echo
	@echo Building FSBL:
	@$(DELETE_MBNPATH_FSBL_MBNS)
	@$(DELETE_FSBL_MBNS)
	@echo GEN_MBN_PATHS:
	@$(GEN_MBN_PATHS)
	@echo GEN_MBN_PATHS_FSBL:
	@$(GEN_MBN_PATHS_FSBL)
	@echo GEN_FSBL_MBN: "$(GEN_FSBL_MBN)"
	@$(GEN_FSBL_MBN)
	@echo hashing FSBL: "$(GEN_FSBL_HASH)"
	@$(GEN_FSBL_HASH)
	@echo converting FSBL hash: "$(CONVERT_FSBL_HASH)"
	@$(CONVERT_FSBL_HASH)
	@$(CPY_FSBL_IMG)
	@echo ---------------------------------------------------------------

#pragma RUNLOCAL
gendbl:
	@echo Generating DBL
	@echo
	@echo Building DBL: "$(GEN_DBL_MBN)"
	@$(DELETE_MBNPATH_DBL_MBNS)
	@$(DELETE_DBL_MBNS)
	@$(GEN_MBN_PATHS)
	@$(GEN_MBN_PATHS_DBL)
ifeq ($(USES_AUTHENTICATE_IMAGE), yes)
	@$(GEN_CERTDIR_DBL)
endif
	@$(GEN_DBL_MBN)
	@$(GEN_FSBL_SRC_ADDR)
	@$(CPY_DBL_IMG)
	@echo ---------------------------------------------------------------

#pragma RUNLOCAL
genosbl:
	@echo Generating OSBL
	@echo
	@echo Building OSBL: "$(GEN_OSBL_MBN)"
	@$(DELETE_MBNPATH_OSBL_MBNS)
	@$(DELETE_OSBL_MBNS)
	@$(GEN_MBN_PATHS)
	@$(GEN_MBN_PATHS_OSBL)
ifeq ($(USES_AUTHENTICATE_IMAGE), yes)
	@$(GEN_CERTDIR_OSBL)
endif
	@$(GEN_OSBL_SRC_ADDR)
	@$(GEN_OSBL_MBN)
	@$(CPY_OSBL_IMG)
	@echo ---------------------------------------------------------------


#pragma RUNLOCAL
gennorprg:
ifeq "$(strip $(FLASH_TYPE))" "nor"
	@echo Generating NORPRG binary to be signed
	@echo
	@echo Building NORPRG: "$(GEN_NORPRG_MBN)"
	@$(DELETE_MBNPATH_NORPRG_MBNS)
	@$(GEN_MBN_PATHS)
	@$(GEN_MBN_PATHS_NORPRG)
	@$(GEN_CERTDIR_NORPRG)
	@$(GEN_NORPRG_MBN)
	@echo ---------------------------------------------------------------
endif

#pragma RUNLOCAL
gencmmscripts:
	@$(GEN_CMM_SCRIPTS_TOOL)
	@$(GEN_CMM_SCRIPTS)

#-------------------------------------------------------------------------------
# Image signing rules
#-------------------------------------------------------------------------------

#pragma RUNLOCAL
signamss: $(IMAGE_HEADER)
	@echo Initiating HASH Signing Process
	@echo
ifeq ($(USES_AUTHENTICATE_IMAGE), yes)
	@echo Appending the HASH with certificates and signature: "$(ATTACH_HASH_CERT)"
	@$(ATTACH_HASH_CERT)
endif
	@echo Generating the HASH Header: "$(GEN_HASH_HEADER)"
	@$(GEN_HASH_HEADER)
	@echo Generating Signed AMSS binary: "$(GEN_SIGNED_AMSS_MBN)"
	@$(GEN_SIGNED_AMSS_MBN)
	@chmod 777 $(MBNPATH)/*.mbn
	@echo ---------------------------------------------------------------


# Sign the Images here

#pragma RUNLOCAL
signdbl: $(IMAGE_HEADER)
	@echo Initiating DBL Signing Process
	@echo
ifeq ($(USES_AUTHENTICATE_IMAGE), yes)
	@echo Appending the Image with certificates and signature: "$(ATTACH_DBL_CERT)"
	@$(ATTACH_DBL_CERT)
endif
	@echo Generating the Image Header: "$(GEN_DBL_HEADER)"
	@$(GEN_DBL_HEADER)
	@echo ---------------------------------------------------------------


#pragma RUNLOCAL
signosbl: $(IMAGE_HEADER)
	@echo Initiating OSBL Signing Process
	@echo
ifeq ($(USES_AUTHENTICATE_IMAGE), yes)
	@echo Appending the OSBL Image with certificates and signature: "$(ATTACH_OSBL_CERT)"
	@$(ATTACH_OSBL_CERT)
endif
	@echo Generating the Image Header: "$(GEN_OSBL_HEADER)"
	@$(GEN_OSBL_HEADER)
	@echo ---------------------------------------------------------------


#pragma RUNLOCAL
signnorprg: $(IMAGE_HEADER)
ifeq "$(strip $(FLASH_TYPE))" "nor"
	@$(GEN_IMAGE_HEADER_TOOL)
	@echo Initiating NORPRG Signing Process
	@echo
ifeq ($(USES_NORPRG_HDR), yes)
ifeq ($(USES_AUTHENTICATE_IMAGE), yes)
	@echo Appending the Image with certificates and signature: "$(ATTACH_NORPRG_CERT)"
	@$(ATTACH_NORPRG_CERT)
endif
	@echo Generating the Image Header: "$(GEN_NORPRG_HEADER)"
	@$(GEN_NORPRG_HEADER)
endif
	@$(GEN_NORPRG_HEX)
	@chmod 777 $(MBNPATH)/*.hex
	@echo ---------------------------------------------------------------
endif

#-------------------------------------------------------------------------------
# Header generation rules
#-------------------------------------------------------------------------------

#pragma RUNLOCAL
genamsshd: $(IMAGE_HEADER)
	@echo Initiating AMSS Header generation Process
	@echo
	@echo Generating the Image Header: "$(GEN_AMSS_HEADER)"
	@$(GEN_AMSS_HEADER)
	@echo ---------------------------------------------------------------


#-------------------------------------------------------------------------------
# Check certificate echo (only)
#-------------------------------------------------------------------------------

#pragma RUNLOCAL
echo_check_cert:
	@echo  Waiting for Certificates
	@echo  Please generate the certificates and place them in the corresponding Cert folder	
#pragma RUNLOCAL
echo_need_second_build:
	@echo  ================================================================================
	@echo  Please generate the certificates and place them in the corresponding Cert folder, and rerun the build with the signbuild option, ie. "build <buildID> -l signbuild"
	@echo  ================================================================================
#pragma RUNLOCAL
echo_check_hash_cert:
	@echo  Waiting for HASH Certificates
	@echo  Please generate the certificates and place them in the corresponding Cert folder

#pragma RUNLOCAL
echo_check_fsbl_cert:
	@echo  Waiting for FSBL Certificates
	@echo  Please generate the certificates and place them in the corresponding Cert folder

#pragma RUNLOCAL
echo_check_dbl_cert:
	@echo  Waiting for DBL Certificates
	@echo  Please generate the certificates and place them in the corresponding Cert folder

#pragma RUNLOCAL
echo_check_osbl_cert:
	@echo  Waiting for OSBL Certificates
	@echo  Please generate the certificates and place them in the corresponding Cert folder

#pragma RUNLOCAL
echo_check_nandprg_cert:
	@echo  Waiting for NANDPRG Certificates
	@echo  Please generate the certificates and place them in the corresponding Cert folder

#pragma RUNLOCAL
echo_check_norprg_cert:
	@echo  Waiting for NORPRG Certificates
	@echo  Please generate the certificates and place them in the corresponding Cert folder

#-------------------------------------------------------------------------------
# Check certificate loops
#-------------------------------------------------------------------------------

#pragma RUNLOCAL
checkCertLoop:
ifeq ($(USES_NO_STRIP_NO_ODM), yes)
	@$(CHECK_4_CERTIFICATES) 10 $(AMSS_HASH_ATTESTATION_CERT_FILE_NAME) $(AMSS_HASH_ATTESTATION_CA_CERT_FILE_NAME) $(AMSS_HASH_ROOT_CERT_FILE_NAME) $(AMSS_HASH_SIGNATURE_FILE_NAME) $(DBL_ATTESTATION_CERT_FILE_NAME) $(DBL_ATTESTATION_CA_CERT_FILE_NAME) $(DBL_ROOT_CERT_FILE_NAME) $(DBL_SIGNATURE_FILE_NAME) $(OSBL_ATTESTATION_CERT_FILE_NAME) $(OSBL_ATTESTATION_CA_CERT_FILE_NAME) $(OSBL_ROOT_CERT_FILE_NAME) $(OSBL_SIGNATURE_FILE_NAME) $(NORPRG_ATTESTATION_CERT_FILE_NAME) $(NORPRG_ATTESTATION_CA_CERT_FILE_NAME) $(NORPRG_ROOT_CERT_FILE_NAME) $(NORPRG_SIGNATURE_FILE_NAME) 
else
	@$(CHECK_4_CERTIFICATES) 10 $(AMSS_HASH_ATTESTATION_CERT_FILE_NAME) $(AMSS_HASH_ATTESTATION_CA_CERT_FILE_NAME) $(AMSS_HASH_ROOT_CERT_FILE_NAME) $(AMSS_HASH_SIGNATURE_FILE_NAME) $(NORPRG_ATTESTATION_CERT_FILE_NAME) $(NORPRG_ATTESTATION_CA_CERT_FILE_NAME) $(NORPRG_ROOT_CERT_FILE_NAME) $(NORPRG_SIGNATURE_FILE_NAME)
endif

#pragma RUNLOCAL
checkCertLoopHash:
	@$(CHECK_4_CERTIFICATES) 10 $(AMSS_HASH_ATTESTATION_CERT_FILE_NAME) $(AMSS_HASH_ATTESTATION_CA_CERT_FILE_NAME) $(AMSS_HASH_ROOT_CERT_FILE_NAME) $(AMSS_HASH_SIGNATURE_FILE_NAME)

#pragma RUNLOCAL
checkCertLoopDbl:
	@$(CHECK_4_CERTIFICATES) 10 $(DBL_ATTESTATION_CERT_FILE_NAME) $(DBL_ATTESTATION_CA_CERT_FILE_NAME) $(DBL_ROOT_CERT_FILE_NAME) $(DBL_SIGNATURE_FILE_NAME)

#pragma RUNLOCAL
checkCertLoopOsbl:
ifeq ($(USES_NO_STRIP_NO_ODM), yes)
	@$(CHECK_4_CERTIFICATES) 10 $(OSBL_ATTESTATION_CERT_FILE_NAME) $(OSBL_ATTESTATION_CA_CERT_FILE_NAME) $(OSBL_ROOT_CERT_FILE_NAME) $(OSBL_SIGNATURE_FILE_NAME)
endif

#pragma RUNLOCAL
checkCertLoopNorprg:
	@$(CHECK_4_CERTIFICATES) 10 $(NORPRG_ATTESTATION_CERT_FILE_NAME) $(NORPRG_ATTESTATION_CA_CERT_FILE_NAME) $(NORPRG_ROOT_CERT_FILE_NAME) $(NORPRG_SIGNATURE_FILE_NAME)


#-------------------------------------------------------------------------------
# Build Wrapup rules
#-------------------------------------------------------------------------------

#pragma RUNLOCAL
wrapup:
ifeq ($(USES_AUTHENTICATE_IMAGE), yes)
	@echo Wrapping up AMSS image signing Process
	@$(COPY) $(call slashes,$(MBNPATH_FSBL)/fsbl.mbn $(MBNPATH)/fsbl.mbn)
	@$(COPY) $(call slashes,$(DBL_SIGNED_IMAGE_FILE_NAME) $(MBNPATH)/dbl.mbn)
	@$(COPY) $(call slashes,$(OSBL_SIGNED_IMAGE_FILE_NAME) $(MBNPATH)/osbl.mbn)
	@echo done
endif

#pragma RUNLOCAL
wrapup_nor:
ifeq "$(strip $(FLASH_TYPE))" "nor"
	@echo Backing up all images for NOR Process....
	@$(GEN_MBN_PATHS_INPUTIMAGESFORNOR)
	@$(BCKUP_AMSSIMG_FORNOR)
	@$(BCKUP_AMSSHDIMG_FORNOR)
	@$(BCKUP_OSBLIMG_FORNOR)
	@$(BCKUP_OSBLCFGDATAIMG_FORNOR)
	@$(BCKUP_FSBLIMG_FORNOR)
	@$(BCKUP_FSBLHDIMG_FORNOR)
	#@$(BCKUP_USRPARTITION_FORNOR)
	#@$(CPY_AMSSIMG_FORNOR)
	#@$(DEL_AMSSIMG_FORNOR)
	@echo ---------------------------------------------------------------	
	$(DEL_ALL_MBN)
	$(GEN_NORPROGIMG_TOOL)
	$(WRAPUP_IMAGE)
	@$(GEN_MEMORY_REPORT)
endif

#pragma RUNLOCAL
wrapupfsbl:
ifeq ($(USES_AUTHENTICATE_IMAGE), yes)
	@echo Wrapping up AMSS image signing Process
	@$(COPY) $(call slashes,$(MBNPATH_FSBL)/fsbl.mbn $(MBNPATH)/fsbl.mbn)
	@echo done
endif

#pragma RUNLOCAL
wrapupdbl:
ifeq ($(USES_AUTHENTICATE_IMAGE), yes)
	@echo Wrapping up AMSS image signing Process
	@$(COPY) $(call slashes,$(DBL_SIGNED_IMAGE_FILE_NAME) $(MBNPATH)/dbl.mbn)
	@echo done
endif

#pragma RUNLOCAL
wrapuposbl:
ifeq ($(USES_AUTHENTICATE_IMAGE), yes)
	@echo Wrapping up OSBL image signing Process
	@$(COPY) $(call slashes,$(OSBL_SIGNED_IMAGE_FILE_NAME) $(MBNPATH)/osbl.mbn)
	@echo done
endif

# Generate the Memory Usage report
define GEN_MEMORY_REPORT
	@echo MEMORY REPORT $(ASIC)$(BUILD)$(VERSION).objects.mem.html
	@-$(MEMUSAGE_PER_DIR) -b $(ASIC)$(BUILD)$(VERSION) -targetdir $(TARGETDIR) -printlevel 2 -mf $(BUILD).map -image ../doc/prodshot_ms$(ASIC).gif -elf $(MBNPATH)/amss_temp.mbn > ../doc/$(ASIC)$(MEM_BUILD)$(VERSION).mem2.html
	@echo MEMORY REPORT 1 done
	@echo MEMORY REPORT $(ASIC)$(BUILD)$(VERSION).mem.html
	@-$(MEMUSAGE_PER_DIR) -b $(ASIC)$(BUILD)$(VERSION) -targetdir $(TARGETDIR) -mf $(BUILD).map -image ../doc/prodshot_ms$(ASIC).gif -elf $(MBNPATH)/amss.mbn > ../doc/$(ASIC)$(MEM_BUILD)$(VERSION).mem.html
	@echo MEMORY REPORT done
	@echo MEMORY REPORT $(ASIC)$(BUILD)$(VERSION).objects.mem.html
	@-$(MEMUSAGE_PER_DIR) -b $(ASIC)$(BUILD)$(VERSION) -targetdir $(TARGETDIR) -v -mf $(BUILD).map -image ../doc/prodshot_ms$(ASIC).gif -elf $(MBNPATH)/amss_temp.mbn > ../doc/$(ASIC)$(MEM_BUILD)$(VERSION).objects.mem.html
	@echo MEMORY REPORT for OBJECTS done
	@echo ALL MEMORY REPORTS Done
endef

#-------------------------------------------------------------------------------
# Build clean rules
#-------------------------------------------------------------------------------

# The SBL object subdirectory, target image file, and target bin/hex files are deleted.
# These cleans are only for nonsecured boot, we will do the secured boot later.

cleanfsbl:
	@echo ------------------------------------------------------------------------
	@echo CLEAN FSBL for target build $(TARGET)
	@$(MAKE) -C $(FSBL_TARGET) -f fsbl.mak FLASH_TYPE=$(FLASH_TYPE) CUSTNAME=$(TARGET) clean
	@rm -f $(DBL)/fsbl_hash_$(BUILD).c
	@$(DELETE_MBNPATH_FSBL_MBNS)
	@$(DELETE_FSBL_MBNS)
	@echo ------------------------------------------------------------------------

cleandbl:
	@echo ------------------------------------------------------------------------
	@echo CLEAN DBL for target build $(TARGET)
	@$(MAKE) -C $(DBL_TARGET) -f dbl.mak CUSTNAME=$(TARGET) clean
	@$(DELETE_MBNPATH_DBL_MBNS)
	@$(DELETE_DBL_MBNS)
	@echo ------------------------------------------------------------------------

cleanosbl:
	@echo ------------------------------------------------------------------------
	@echo CLEAN OSBL for target build $(TARGET)
ifeq ($(USES_NO_STRIP_NO_ODM), yes)
	@$(MAKE) -C $(OSBL_TARGET) -f osbl.mak clean
endif
	@$(DELETE_MBNPATH_OSBL_MBNS)
	@$(DELETE_OSBL_MBNS)
	@echo ------------------------------------------------------------------------

cleanamsshash:
	@echo ------------------------------------------------------------------------
	@echo CLEAN AMSSHASH for target build $(TARGET)
	@$(DELETE_MBNPATH_AMSSHASH_MBNS)
	@echo ------------------------------------------------------------------------
        
cleanamssmbns:
	@echo ------------------------------------------------------------------------
	@echo CLEAN AMSSMBNS for target build $(TARGET)
	@$(DELETE_AMSS_PART_MBNS)
	@$(DELETE_AMSS_INPUTIMAGES_MBNS)
	@$(DELETE_AMSS_TEMP_MBNS)
	@echo ------------------------------------------------------------------------
        
cleanallmbn:
	@echo ------------------------------------------------------------------------
	@echo CLEAN ALL.MBN for target build $(TARGET)
	@$(DELETE_ALL_MBN)
	@echo ------------------------------------------------------------------------
        
cleanheadergen:
	@echo ------------------------------------------------------------------------
	@echo CLEAN HEADERGEN TOOLS for target build $(TARGET)
	@$(DELETE_IMAGE_HEADER_TOOL)
	@$(DELETE_NORPROGIMG_TOOL)
	@$(DELETE_ATTACH_CERT_TOOL)
	@echo ------------------------------------------------------------------------
        
cleanarmprg:
	@echo ------------------------------------------------------------------------
	@echo CLEAN ARMPRG for target build $(TARGET)
	@$(DELETE_MBNPATH_ARMPRG_MBNS)
	@$(DELETE_ARMPRG_HEX)
	@echo ------------------------------------------------------------------------



#pragma RUNLOCAL
clean: cleanflashtools cleanamss cleanfsbl cleandbl cleanosbl cleanamsshash cleanamssmbns  cleanallmbn cleanheadergen cleanarmprg

#-------------------------------------------------------------------------------
# Some Additional rules to make life simpler
#-------------------------------------------------------------------------------

#--------------------------------
# SBL copy rules
#--------------------------------

#pragma RUNLOCAL
copyfsbl:
	@$(CPY_FSBL_IMG)

#pragma RUNLOCAL
copydbl:
	@$(CPY_DBL_IMG)

#pragma RUNLOCAL
copyosbl:
	@$(CPY_OSBL_IMG)


#--------------------------------
# Generation and signing rules
#--------------------------------

#pragma RUNLOCAL
ifeq ($(USES_AUTHENTICATE_IMAGE), yes)
doamss: cleanhash genhash echo_check_hash_cert checkCertLoopHash signamss genamsshd wrapup_nor
else
doamss: cleanhash genhash signamss genamsshd wrapup_nor
endif

#pragma RUNLOCAL
ifeq ($(USES_AUTHENTICATE_IMAGE), yes)
dofsbl: cleanfsbl genfsbl echo_check_fsbl_cert checkCertLoopOemsbl wrapupfsbl wrapup_nor
else
dofsbl: cleanfsbl genfsbl wrapupfsbl wrapup_nor
endif

#pragma RUNLOCAL
ifeq ($(USES_AUTHENTICATE_IMAGE), yes)
dodbl: cleandbl gendbl echo_check_dbl_cert checkCertLoopOemsbl signdbl wrapupdbl wrapup_nor
else
dodbl: cleandbl gendbl signdbl wrapupdbl wrapup_nor
endif

#pragma RUNLOCAL
ifeq ($(USES_AUTHENTICATE_IMAGE), yes)
doosbl: cleanosbl genosbl echo_check_osbl_cert checkCertLoopOsbl signosbl wrapuposbl wrapup_nor
else
doosbl: cleanosbl genosbl signosbl wrapuposbl wrapup_nor
endif

#pragma RUNLOCAL
ifeq ($(USES_AUTHENTICATE_IMAGE), yes)
donandprg: gennandprg echo_check_nandprg_cert checkCertLoopNandprg signnandprg
else
donandprg: gennandprg signnandprg
endif

#pragma RUNLOCAL
ifeq ($(USES_AUTHENTICATE_IMAGE), yes)
donorprg: gennorprg echo_check_norprg_cert checkCertLoopNorprg signnorprg
else
donorprg: gennorprg signnorprg
endif

#--------------------------------
# Signing only rules
#--------------------------------

#pragma RUNLOCAL
ifeq ($(USES_AUTHENTICATE_IMAGE), yes)
signonlyamss: echo_check_hash_cert checkCertLoopHash signamss genamsshd wrapup_nor
else
signonlyamss: signamss genamsshd wrapup_nor
endif

#pragma RUNLOCAL
ifeq ($(USES_AUTHENTICATE_IMAGE), yes)
signonlyfsbl: copyfsbl echo_check_fsbl_cert checkCertLoopOemsbl wrapupfsbl wrapup_nor
else
signonlyfsbl: copyfsbl wrapupfsbl wrapup_nor
endif

#pragma RUNLOCAL
ifeq ($(USES_AUTHENTICATE_IMAGE), yes)
signonlydbl: copydbl echo_check_dbl_cert checkCertLoopOemsbl signdbl wrapupdbl wrapup_nor
else
signonlydbl: copydbl signdbl wrapupdbl wrapup_nor
endif

#pragma RUNLOCAL
ifeq ($(USES_AUTHENTICATE_IMAGE), yes)
signonlyosbl: copyosbl echo_check_osbl_cert checkCertLoopOsbl signosbl wrapuposbl wrapup_nor
else
signonlyosbl: copyosbl signosbl wrapuposbl wrapup_nor
endif

#pragma RUNLOCAL
ifeq ($(USES_AUTHENTICATE_IMAGE), yes)
signonlynandprg:  echo_check_nandprg_cert checkCertLoopNandprg signnandprg
else
signonlynandprg:  signnandprg
endif

#pragma RUNLOCAL
ifeq ($(USES_AUTHENTICATE_IMAGE), yes)
signonlynorprg:  echo_check_norprg_cert checkCertLoopNorprg signnorprg
else
signonlynorprg:  signnorprg
endif

#pragma RUNLOCAL
ifeq ($(USES_AUTHENTICATE_IMAGE), yes)
signall: copyfsbl copydbl copyosbl echo_check_cert checkCertLoop signamss genamsshd signdbl signosbl \
         signnandprg signnorprg wrapup wrapup_nor
else
signall: copyfsbl copydbl copyosbl signamss genamsshd signdbl signosbl signnandprg signnorprg wrapup wrapup_nor
endif

#pragma RUNLOCAL
ifeq ($(USES_AUTHENTICATE_IMAGE), yes)
signbuild: echo_check_cert checkCertLoop signamss genamsshd signdbl signosbl \
         signnorprg wrapup wrapup_nor bldprod
else
signbuild: signamss signfsbl signdbl signosbl  wrapup wrapup_nor
endif

#--------------------------------
# Boot related rules
#--------------------------------

#pragma RUNLOCAL
cleanboot: cleanfsbl cleandbl cleanosbl cleanamsshash cleanamssmbns cleanallmbn cleanheadergen cleanarmprg

#pragma RUNLOCAL
genboot: genfsbl gendbl genosbl signdbl signosbl

#pragma RUNLOCAL
signboot: signdbl signosbl wrapup wrapup_nor
