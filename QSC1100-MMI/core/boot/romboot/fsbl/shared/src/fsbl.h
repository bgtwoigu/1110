#ifndef FSBL_H
#define FSBL_H

/*===========================================================================

                  F A I L  S A F E  B o o t  L o a d e r
                           H e a d e r  F i l e

DESCRIPTION
 Contains common defintion used by FSBL internal module.

INITIALIZATION AND SEQUENCING REQUIREMENTS
  None
  
Copyright (c) 2007 by QUALCOMM, Incorporated.  All Rights Reserved.
============================================================================*/

/*===========================================================================

                           EDIT HISTORY FOR FILE

This section contains comments describing changes made to this file.
Notice that changes are listed in reverse chronological order.

$Header: //depot/asic/msmshared/secboot2/sbl/fsbl/1_0/fsbl.h#3 $

when       who     what, where, why
--------   ---     ----------------------------------------------------------
07/30/07   ANB     Initial version.
===========================================================================*/

/*===========================================================================
 
                           INCLUDE FILES

===========================================================================*/

#ifndef _ARM_ASM_
#include "boot_comdef.h"
#endif /* _ARM_ASM_ */

/*===========================================================================

                      PUBLIC DATA DECLARATIONS

===========================================================================*/

/*---------------------------------------------------------------------------
  Symbols generated by linker with "$" instead of "_".  Symbols are renamed
  in an assembler file to have "_" to make them valid "C" identifiers and
  the symbols are located in the boot ROM.  These symbols define the
  Read/Write data area in boot ROM and RAM, and the Zero Init data area in
  RAM.  Base addresses and length in bytes are given.
---------------------------------------------------------------------------*/
extern uint32  *Load__FSBL_RAM_RW__Base;
extern uint32   Image__FSBL_RAM_RW__Base;
extern uint32   Image__FSBL_RAM_RW__Length;
extern uint32   Image__FSBL_RAM_ZI__Base;
extern uint32   Image__FSBL_RAM_ZI__Length;

/*===========================================================================

                      PUBLIC FUNCTION DECLARATIONS

===========================================================================*/
/*===========================================================================

MACRO  FSBL_KICK_WATCHDOG

DESCRIPTION
   Watchdog timer circuit reset macro.

DEPENDENCIES
  The watchdog needs to be kicked at least once every TBDms.
  
RETURN VALUE
  None

SIDE EFFECTS
  None

===========================================================================*/
#ifndef BOOT_WATCHDOG_DISABLED
#define FSBL_KICK_WATCHDOG() \
          HWIO_OUT( WDOG_RESET, HWIO_FMSK( WDOG_RESET, WATCH_DOG ) )
#else
#define FSBL_KICK_WATCHDOG()
#endif /* BOOT_WATCHDOG_DISABLED */

#define SBL_KICK_WATCHDOG  FSBL_KICK_WATCHDOG

/*===========================================================================

FUNCTION  FSBL_LOOP_HERE

DESCRIPTION
 This function is called by qcsbl_error_hanlder only. We perform
 Clean up the registers and loop until JTAG is connected.


DEPENDENCIES
  None
  
RETURN VALUE
  None

SIDE EFFECTS
  None

===========================================================================*/
void fsbl_loop_here( void );

#define SBL_VERIFY FSBL_VERIFY

#endif /* FSBL_H*/
