


ARM Macro Assembler    Page 1 


    1 00000000         ;*====*====*====*====*====*====*====*====*====*====*====
                       *====*====*====*====*
    2 00000000         ;
    3 00000000         ;                  D E V I C E    B O O T    L O A D E R
                               
    4 00000000         ;
    5 00000000         ; GENERAL DESCRIPTION
    6 00000000         ;   This file contains the Device Boot Loader ( 1 ) whic
                       h 
    7 00000000         ;   performs the following functions:
    8 00000000         ;        
    9 00000000         ;      - Load FSBL image
   10 00000000         ;      - Load OSBL image
   11 00000000         ;
   12 00000000         ;   The  1  is written to perform the above functions wi
                       th optimal speed.   
   13 00000000         ;   It also attempts to minimize the execution time and 
                       reduce boot time.
   14 00000000         ;
   15 00000000         ; EXTERNALIZED SYMBOLS
   16 00000000         ;   
   17 00000000         ;   
   18 00000000         ; INITIALIZATION AND SEQUENCING REQUIREMENTS
   19 00000000         ;   
   20 00000000         ;
   21 00000000         ; Copyright (c) 2007 by QUALCOMM, Incorporated.All Right
                       s Reserved.
   22 00000000         ;*====*====*====*====*====*====*====*====*====*====*====
                       *====*====*====*====*
   23 00000000         ;*====*====*====*====*====*====*====*====*====*====*====
                       *====*====*====*====*
   24 00000000         ;
   25 00000000         ;                           EDIT HISTORY FOR FILE
   26 00000000         ;
   27 00000000         ; This section contains comments describing changes made
                        to the module.
   28 00000000         ; Notice that changes are listed in reverse chronologica
                       l order.
   29 00000000         ;
   30 00000000         ;  $Header: 
   31 00000000         ;
   32 00000000         ; when       who     what, where, why
   33 00000000         ; --------   ---     -----------------------------------
                       ---------------------
   34 00000000         ; 07/30/07   ANB     Initial version.
   35 00000000         ;*====*====*====*====*====*====*====*====*====*====*====
                       *====*====*====*====*
   36 00000000         ;=======================================================
                       =====================
   37 00000000         ;
   38 00000000         ;                            MODULE INCLUDES
   39 00000000         ;
   40 00000000         ;=======================================================
                       =====================
   41 00000000         ;=======================================================
                       =====================
   42 00000000         ;
   43 00000000         ;                             MODULE DEFINES
   44 00000000         ;



ARM Macro Assembler    Page 2 


   45 00000000         ;=======================================================
                       =====================
   46 00000000 00000013 
                       Mode_SVC
                               EQU     0x13
   47 00000000 00000017 
                       Mode_ABT
                               EQU     0x17
   48 00000000 0000001B 
                       Mode_UND
                               EQU     0x1b
   49 00000000 00000010 
                       Mode_USR
                               EQU     0x10
   50 00000000 00000011 
                       Mode_FIQ
                               EQU     0x11
   51 00000000 00000012 
                       Mode_IRQ
                               EQU     0x12
   52 00000000 00000080 
                       I_Bit   EQU     0x80
   53 00000000 00000040 
                       F_Bit   EQU     0x40
   54 00000000         ;=======================================================
                       =====================
   55 00000000         ;
   56 00000000         ;                             MODULE IMPORTS
   57 00000000         ;
   58 00000000         ;=======================================================
                       =====================
   59 00000000         ; Import the external symbols that are referenced in thi
                       s module.
   60 00000000                 IMPORT  dbl_undefined_instruction_c_handler
   61 00000000                 IMPORT  dbl_swi_c_handler
   62 00000000                 IMPORT  dbl_prefetch_abort_c_handler
   63 00000000                 IMPORT  dbl_data_abort_c_handler
   64 00000000                 IMPORT  dbl_reserved_c_handler
   65 00000000                 IMPORT  dbl_irq_c_handler
   66 00000000                 IMPORT  dbl_fiq_c_handler
   67 00000000                 IMPORT  dbl_nested_exception_c_handler
   68 00000000                 IMPORT  dbl_main_ctl
   69 00000000                 IMPORT  dbl_stack_base
   70 00000000         ;=======================================================
                       =====================
   71 00000000         ;
   72 00000000         ;                             MODULE EXPORTS
   73 00000000         ;
   74 00000000         ;=======================================================
                       =====================
   75 00000000         ; Export the external symbols that are referenced in thi
                       s module.
   76 00000000                 EXPORT  dbl_loop_here
   77 00000000                 EXPORT  dbl_enable_arm9_instruction_cache
   78 00000000         ; Export the symbols __main and _main to prevent the lin
                       ker from
   79 00000000         ; including the standard runtime library and startup rou
                       tine.
   80 00000000                 EXPORT  __main



ARM Macro Assembler    Page 3 


   81 00000000                 EXPORT  _main
   82 00000000         ;=======================================================
                       =====================
   83 00000000         ;
   84 00000000         ;                             MODULE DATA AREA
   85 00000000         ;
   86 00000000         ;=======================================================
                       =====================
   87 00000000         ;-------------------------------------------------------
                       -------------------
   88 00000000         ; Data area is in IRAM and location must be defined in s
                       catter load
   89 00000000         ; file.  Data area starts at the top of IRAM.
   90 00000000         ;-------------------------------------------------------
                       -------------------
   91 00000000                 PRESERVE8
   92 00000000                 AREA    DBL_VECTOR_TABLE, DATA, READONLY
   93 00000000         ;-------------------------------------------------------
                       -------------------
   94 00000000         ; Exception vectors table located at the top of IRAM.  T
                       his is initialized
   95 00000000         ; to the  1  exception handlers.  This region will be co
                       pied into IRAM 
   96 00000000         ; to replace the vectors which were used by the PBL.
   97 00000000         ;-------------------------------------------------------
                       -------------------
   98 00000000         unused_reset_vector
   99 00000000 00000000        DCD     0x00000000
  100 00000004         undefined_instruction_vector
  101 00000004 00000000        DCD     dbl_undefined_instruction_nested_handler
  102 00000008         swi_vector
  103 00000008 00000000        DCD     dbl_swi_c_handler
  104 0000000C         prefetch_abort_vector
  105 0000000C 00000000        DCD     dbl_prefetch_abort_nested_handler
  106 00000010         data_abort_vector
  107 00000010 00000000        DCD     dbl_data_abort_nested_handler
  108 00000014         reserved_vector
  109 00000014 00000000        DCD     dbl_reserved_c_handler
  110 00000018         irq_vector
  111 00000018 00000000        DCD     dbl_irq_c_handler
  112 0000001C         fiq_vector
  113 0000001C 00000000        DCD     dbl_fiq_c_handler
  114 00000020         ;=======================================================
                       ================
  115 00000020         ;                       BOOT BLOCK DATA LOCATIONS
  116 00000020         ;
  117 00000020         ;  Locations and sizes of data areas in ROM and RAM are 
                       imported from th
  118 00000020         ;  linker and stored as data items that are used at runt
                       ime by the boot
  119 00000020         ;  kernel routines.
  120 00000020         ;=======================================================
                       ================
  121 00000020         ;=======================================================
                       ===============
  122 00000020         ;  1  code.
  123 00000020         ;=======================================================
                       ===============
  124 00000020                 AREA    DBL_CODE, CODE, READONLY



ARM Macro Assembler    Page 4 


  125 00000000                 CODE32
  126 00000000                 ENTRY
  127 00000000         __main
  128 00000000         _main
  129 00000000         ;=======================================================
                       =====================
  130 00000000         ;   We contiue to disable interrupt and watch dog until 
                       we jump to OSBL 
  131 00000000         ;=======================================================
                       =====================
  132 00000000         dbl_reset_handler
  133 00000000         ; ------------------------------------------------------
                       ------------
  134 00000000         ; Disable IRQ and FIQ interrupts.
  135 00000000         ; ------------------------------------------------------
                       ------------
  136 00000000 E321F0D3        msr     CPSR_c,#Mode_SVC:OR:I_Bit:OR:F_Bit
  137 00000004         ; ------------------------------------------------------
                       ------------
  138 00000004         ; Save the passing parameter from PBL
  139 00000004         ; ------------------------------------------------------
                       ------------    
  140 00000004 E1A07000        mov     r7, r0
  141 00000008         ; ------------------------------------------------------
                       ------------
  142 00000008         ; Save Stack base from PBL which  1  will use for all th
                       e modes.
  143 00000008         ; ------------------------------------------------------
                       ------------
  144 00000008 E59F60B4        ldr     r6, =dbl_stack_base
  145 0000000C E586D000        str     r13,[r6]
  146 00000010 E1A0000D        mov     r0, r13
  147 00000014         ; ------------------------------------------------------
                       -----------------
  148 00000014         ; Set up a boot stack pointer in Supervisor,Undefined,Ab
                       ort mode.
  149 00000014         ;  1  uses the same stack address since there is no     
                                     
  150 00000014         ; return after jumping to error_handler. We disable IRQ 
                       and FIQ
  151 00000014         ; interrupts. We also initialize dummy stack point for u
                       nused IRQ, FIQ, 
  152 00000014         ; User and System mode. 
  153 00000014         ; ------------------------------------------------------
                       -----------------
  154 00000014         ; switch to Undefine mode
  155 00000014 E321F0DB        msr     CPSR_c,#Mode_UND:OR:I_Bit:OR:F_Bit
  156 00000018         ; in Undefined mode
  157 00000018 E1A0D000        mov     r13, r0     ; set Undefined SP
  158 0000001C         ; switch to Abort mode
  159 0000001C E321F0D7        msr     CPSR_c,#Mode_ABT:OR:I_Bit:OR:F_Bit
  160 00000020         ; in Abort mode
  161 00000020 E1A0D000        mov     r13, r0     ; set Abort SP
  162 00000024         ; switch back to Supervisor mode
  163 00000024 E321F0D3        msr     CPSR_c,#Mode_SVC:OR:I_Bit:OR:F_Bit
  164 00000028         ; ------------------------------------------------------
                       ------------
  165 00000028         ; Call functions external to perform  1  functions.    
  166 00000028         ; It should never return. r0 has the pointer location



ARM Macro Assembler    Page 5 


  167 00000028         ; sent from PBL.
  168 00000028         ; ------------------------------------------------------
                       ------------
  169 00000028         ; Restore the passing parameter
  170 00000028 E1A00007        mov     r0, r7
  171 0000002C E59F5094        ldr     r5, =dbl_main_ctl
  172 00000030 E12FFF35        blx     r5
  173 00000034         ;=======================================================
                       ===============
  174 00000034         ; Called by dbl_error_hanlder only. We perform
  175 00000034         ; Clean up the registers and loop here until JTAG is con
                       nected.
  176 00000034         ;=======================================================
                       ===============
  177 00000034         dbl_loop_here
  178 00000034 E3A00000        mov     r0,#0
  179 00000038 E3A01000        mov     r1,#0
  180 0000003C E3A02000        mov     r2,#0
  181 00000040 E3A03000        mov     r3,#0
  182 00000044 E3A04000        mov     r4,#0
  183 00000048 E3A05000        mov     r5,#0
  184 0000004C E3A06000        mov     r6,#0
  185 00000050 E3A07000        mov     r7,#0
  186 00000054 E3A08000        mov     r8,#0
  187 00000058 E3A09000        mov     r9,#0
  188 0000005C E3A0A000        mov     r10,#0
  189 00000060 E3A0B000        mov     r11,#0
  190 00000064 E3A0C000        mov     r12,#0
  191 00000068         loophere
  192 00000068 E59F005C        ldr     r0, = 0x8003400c
  193 0000006C E3A01001        mov     r1, #0x1
  194 00000070 E5801000        str     r1, [r0]
  195 00000074 EAFFFFFE        b       loophere
  196 00000078         ;=======================================================
                       ===============
  197 00000078         ; Called by dbl_main_ctl to enable instruction cache
  198 00000078         ;=======================================================
                       ===============
  199 00000078         dbl_enable_arm9_instruction_cache
  200 00000078 EE110F10        mrc     p15, 0, r0, c1, c0, 0 ; Read from CP15 C
                                                   ontrol Register
  201 0000007C E3800D40        orr     r0, r0, # (1 << 12 ) ; Enable Level one 
                                                   Instruction Cache
  202 00000080 EE010F10        mcr     p15, 0, r0, c1, c0, 0 ; Write back to CP
                                                   15 Control Register
  203 00000084 E3A00000        mov     r0, #0      ; Return success
  204 00000088 E12FFF1E        bx      lr
  205 0000008C         ;=======================================================
                       ===============
  206 0000008C         ;  1  exception handlers that can have nested calls to t
                       hem.  These
  207 0000008C         ; handlers check for nesting and if it is the first exce
                       ption they
  208 0000008C         ; call a "C" exception handler that calls the  1  error 
                       handler.
  209 0000008C         ; If it is a nested exception, the "C" exception handler
                        is not
  210 0000008C         ; re-entered and the JTAG interface is enabled immediate
                       ly. Nesting



ARM Macro Assembler    Page 6 


  211 0000008C         ; is only a concern for undefined instruction and abort 
                       exceptions.     
  212 0000008C         ; Note, a separate exception handler is used for each ex
                       ception to 
  213 0000008C         ; provide additional debug information (see dbl_error_ha
                       ndler.c for 
  214 0000008C         ; more information).
  215 0000008C         ;=======================================================
                       ===============
  216 0000008C         dbl_undefined_instruction_nested_handler
  217 0000008C E59F503C        ldr     r5,=dbl_undefined_instruction_c_handler
  218 00000090 EAFFFFFE        b       check_for_nesting
  219 00000094         dbl_prefetch_abort_nested_handler
  220 00000094 E59F5038        ldr     r5,=dbl_prefetch_abort_c_handler
  221 00000098 EAFFFFFE        b       check_for_nesting
  222 0000009C         dbl_data_abort_nested_handler
  223 0000009C E59F5034        ldr     r5,=dbl_data_abort_c_handler
  224 000000A0 EAFFFFFE        b       check_for_nesting
  225 000000A4         ;=======================================================
                       ===============
  226 000000A4         ; Checks for nested exceptions and then calls the "C" ex
                       ception 
  227 000000A4         ; handler pointed to by R5 if this is the first time thi
                       s exception
  228 000000A4         ; has occurred, otherwise it calls the "C" nested except
                       ion handler
  229 000000A4         ; that just enables JTAG debug access.  The mode stack p
                       ointer is used  
  230 000000A4         ; to determine if a nested exception or a second abort e
                       xception has
  231 000000A4         ; occurred.  This is accomplished by comparing the mode 
                       stack pointer  
  232 000000A4         ; to the top of the stack that was initially assigned to
                        the stack,
  233 000000A4         ; then decrementing the stack pointer.  If they are equa
                       l, it is a 
  234 000000A4         ; first time exception.  
  235 000000A4         ;=======================================================
                       ===============
  236 000000A4         check_for_nesting
  237 000000A4 E59F8018        ldr     r8,=dbl_stack_base 
                                                   ; Initial mode stack ptr
  238 000000A8 E5986000        ldr     r6,[r8]     ; Initial mode stack ptr
  239 000000AC E1A0700D        mov     r7, r13     ; Save current stack ptr 
  240 000000B0 E24DD004        sub     r13,r13,#4  ; Decrement stack ptr 
  241 000000B4 E1560007        cmp     r6, r7      ; Compare initial and actual
                                                   
  242 000000B8 012FFF35        blxeq   r5          ; First time exception 
  243 000000BC E59F5018        ldr     r5,=dbl_nested_exception_c_handler 
                                                   ; This is a nested exception
                                                   
  244 000000C0 E12FFF35        blx     r5
  245 000000C4                 END
              00000000 
              00000000 
              8003400C 
              00000000 
              00000000 
              00000000 



ARM Macro Assembler    Page 7 


              00000000 
Command Line: [C:\ARM\ADSv1_2\bin\armasm.exe -list ../../../dblobj_SBNAALZ/dbl.
lst -g -apcs /interwork -cpu ARM926EJ-S]
