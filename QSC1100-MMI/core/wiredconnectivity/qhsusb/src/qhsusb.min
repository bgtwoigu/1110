#-------------------------------------------------------------------------------
# Target specific configuration
#-------------------------------------------------------------------------------

#ifeq ($(MSM_ID), 7200A)
#  QHSUSB_PLATFORM = 7200A
#endif
#
#ifeq ($(findstring 7600, $(ASIC)), 7600)
#  QHSUSB_PLATFORM = 7200A
#endif

# ULC
ifeq ($(ASIC), q1100)
  QHSUSB_PLATFORM = q1100
endif

# HAWK
ifeq ($(ASIC), M6290)
  QHSUSB_PLATFORM = m6290
endif

# How fast enum is implemented? For details see below
USES_QHSUSB_FAST_ENUM_SEPARATE = yes

#-------------------------------------------------------------------------------
# USB files
#-------------------------------------------------------------------------------
QHSUSB_SRC = $(QHSUSB)/src

QHSUSB_DCI_SOURCES       = qhsusb_dci.c \
                           qhsusb_dci_$(QHSUSB_PLATFORM).c

QHSUSB_DCD_SOURCES       = qhsusb_dcd_ch9.c

QHSUSB_FD_BTLDR_SOURCES  = qhsusb_fd_hdlc.c

QHSUSB_FD_CHG_SOURCES    = qhsusb_fd_chg.c
QHSUSB_FD_FAST_ENUM_SOURCES    = qhsusb_fd_fast_enum.c

QHSUSB_AL_ARMPRG_SOURCES = qhsusb_al_hostdl.c
QHSUSB_AL_DLOAD_SOURCES  = qhsusb_al_dload.c
QHSUSB_AL_CHG_SOURCES    = qhsusb_al_chg.c
QHSUSB_AL_FAST_ENUM_SOURCES    = qhsusb_al_fast_enum.c

QHSUSB_COMMON_SOURCES = $(QHSUSB_DCD_SOURCES)       \
                        $(QHSUSB_DCI_SOURCES)

QHSUSB_ARMPRG_SOURCES = $(QHSUSB_AL_ARMPRG_SOURCES) \
                        $(QHSUSB_FD_BTLDR_SOURCES)  \
                        $(QHSUSB_COMMON_SOURCES)

QHSUSB_DLOAD_SOURCES  = $(QHSUSB_AL_DLOAD_SOURCES)  \
                        $(QHSUSB_FD_BTLDR_SOURCES)  

QHSUSB_CHG_SOURCES    = $(QHSUSB_AL_CHG_SOURCES)    \
                        $(QHSUSB_FD_CHG_SOURCES)    

# no FD here - added later
QHSUSB_FAST_ENUM_SOURCES    = $(QHSUSB_AL_FAST_ENUM_SOURCES)    

# Select functional driver for Fast Enumeration
#
# Options and reasons:
#
#  - HDLC
#  - Charger
#  - Separate, or dedicated to fast enum
#
# One may choose to base on HDLC or Charger FD, provided these FD's
# already compiled in the same image. In this case, it saves code size.
#
# Also, having less code improves its maintainability, thus it may be
# worth to reuse HDLC or Charger.
# For code size, Charger and Separate FD's have almost identical footprint.
# HDLC is about 400..500 bytes larger.
#
# Reason to choose Separate FD is flexibility. In this case, any requirements
# for USB device may be satisfied
# without potential conflict with other functions.
#
# For additional information regarding "separate" functional driver,
# see func/qhsusb_fd_fast_enum.c
#
# Add relevant sources based on selected FD for "fast enum"
# default is "separate"

ifeq ($(USES_QHSUSB_FAST_ENUM_SEPARATE), yes)
QHSUSB_FAST_ENUM_SOURCES += $(QHSUSB_FD_FAST_ENUM_SOURCES)
endif
ifeq ($(USES_QHSUSB_FAST_ENUM_HDLC), yes)
QHSUSB_FAST_ENUM_SOURCES += $(QHSUSB_FD_BTLDR_SOURCES)
endif
ifeq ($(USES_QHSUSB_FAST_ENUM_CHG), yes)
QHSUSB_FAST_ENUM_SOURCES += $(QHSUSB_FD_CHG_SOURCES)
endif

vpath %.c $(QHSUSB_SRC)/al $(QHSUSB_SRC)/func $(QHSUSB_SRC)/dcd $(QHSUSB_SRC)/dci
vpath %.s $(QHSUSB_SRC)

QHSUSB_COMMON_OBJS :=  $(addprefix $(TARGETDIR)/, $(QHSUSB_COMMON_SOURCES:%.c=%.o) )

QHSUSB_ARMPRG_OBJS :=  $(addprefix $(TARGETDIR)/, $(QHSUSB_ARMPRG_SOURCES:%.c=%.o) )

QHSUSB_DLOAD_OBJS :=  $(addprefix $(TARGETDIR)/, $(QHSUSB_DLOAD_SOURCES:%.c=%.o) )

QHSUSB_CHG_OBJS :=  $(addprefix $(TARGETDIR)/, $(QHSUSB_CHG_SOURCES:%.c=%.o) )

QHSUSB_FAST_ENUM_OBJS :=  $(addprefix $(TARGETDIR)/, $(QHSUSB_FAST_ENUM_SOURCES:%.c=%.o) )
ifeq ($(USES_QHSUSB_FAST_ENUM_SEPARATE), yes)
$(QHSUSB_FAST_ENUM_OBJS) : CFLAGS += -DFEATURE_QHSUSB_FAST_ENUM_SEPARATE
endif
ifeq ($(USES_QHSUSB_FAST_ENUM_HDLC), yes)
$(QHSUSB_FAST_ENUM_OBJS) : CFLAGS += -DFEATURE_QHSUSB_FAST_ENUM_HDLC
endif
ifeq ($(USES_QHSUSB_FAST_ENUM_CHG), yes)
$(QHSUSB_FAST_ENUM_OBJS) : CFLAGS += -DFEATURE_QHSUSB_FAST_ENUM_CHG
endif

# also include the external usb path
$(QHSUSB_ARMPRG_OBJS) $(QHSUSB_DLOAD_OBJS) $(QHSUSB_CHG_OBJS) $(QHSUSB_FAST_ENUM_OBJS) : \
   CFLAGS += -I$(QHSUSB)/inc -I$(QHSUSB_SRC)/al -I$(QHSUSB_SRC)/func \
             -I$(QHSUSB_SRC)/dcd -I$(QHSUSB_SRC)/dci -I$(HOSTDL)

# make dependency build happy
CORE_PATHS += $(QHSUSB_SRC)/al \
              $(QHSUSB_SRC)/func \
              $(QHSUSB_SRC)/dcd \
              $(QHSUSB_SRC)/dci \
              $(QHSUSB)/inc

### Start Lint block ###
ifdef DO_LINT


  # Declare the lint objects for USB subsystem
#  USB_LINT_OBJS := $(addprefix $(LINTDIR)/, $(USB_COMBINED_SOURCES:%.c=%.lint))

  # Include usb specific lint rules
#  $(USB_LINT_OBJS) : LINT_FLAGS := $(LINT_FLAGS) usb.lnt -I$(USB)/ext

  # Specify group target for linting USB subsystem
#  $(LINTDIR)/usb_lint : $(USB_LINT_OBJS)

  # Declare the lint objects for USB host lib subsystem
#  USBHOSTLIB_LINT_OBJS := $(addprefix $(LINTDIR)/, $(USBHOST_LIB_SOURCES:%.c=%.lint))

  # Specify group target for linting USB lib subsystem
#  $(LINTDIR)/usbhostlib_lint : $(USBHOSTLIB_LINT_OBJS)
  

endif

