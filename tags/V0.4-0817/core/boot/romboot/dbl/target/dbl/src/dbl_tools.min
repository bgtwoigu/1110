#============================================================================
#  Name:
#    DBL_TOOLS.MIN
#
#  Description:
#    An includable component of the makefile to build the BOOT software for 
#    the SURF (Subscriber Unit Reference Design) using the MSM7XXX (ARM) ASIC.
#
#    This file specifies the items necessary to build the DMSS using the 
#    RVCT 2.1 Arm Development Suite
#
#
# Assumptions:
#   1. The ARM ADS tools are in your path before any other versions of the 
#      ARM tools
#   2. Perl is available either locally or via the environment path.
#
# Copyright (c) 2007 by QUALCOMM, Incorporated.  All Rights Reserved.
#----------------------------------------------------------------------------
#============================================================================
#
#                        EDIT HISTORY FOR MODULE
#
# $Header: //depot/asic/qsc1100/romboot/sbl/dbl/dbl_tools.min#2 $
#
# when       who     what, where, why
# -------    ---     --------------------------------------------------------
# 07/30/07   ANB     Initial version.
#============================================================================


#-------------------------------------------------------------------------------
# Build process output type
#-------------------------------------------------------------------------------

EXETYPE    = elf#               # Target image file format

#===============================================================================
#                             TOOL DEFINITIONS
#===============================================================================
# The following environment variables must be defined prior to using this make
# file: ARMBIN, ARMLIB, and ARMINC. In addition the PATH must be updated for
# the ARM tools.

#-------------------------------------------------------------------------------
# Tool path definitions (may be tool set dependent - ADS vs RVCT)
#-------------------------------------------------------------------------------

ifndef ARMTOOLS
    $(error ARMTOOLS undefined - need to run batch file to select compiler?)
endif

ifndef ARMBIN
ARMBIN     = $(ARMHOME)/bin
endif
ARMBIN := $(subst \,/,$(ARMBIN))

ifndef ARMLIB
ARMLIB     = $(ARMHOME)/lib
endif
ARMLIB := $(subst \,/,$(ARMLIB))

QCTOOLS    = ../../../tools/build

#-------------------------------------------------------------------------------
# Software tool and environment definitions
#-------------------------------------------------------------------------------

CC         = @$(ARMBIN)/tcc#          # ARM SDT Thumb 16-bit inst. set ANSI C compiler
ARMCC      = @$(ARMBIN)/armcc#        # ARM SDT ARM 32-bit inst. set ANSI C compiler
ARMCPP     = @$(ARMBIN)/armcpp#       # ARM SDT ARM 32-bit inst. set ANSI C++ compiler
TCPP       = @$(ARMBIN)/tcpp#         # ARM SDT Thumb 16-bit inst. set ANSI C++ compiler
ASM        = @$(ARMBIN)/armasm#       # ARM SDT assembler
ARMAR      = @$(ARMBIN)/armar#        # ARM SDT library archiver
LD         = @$(ARMBIN)/armlink#      # ARM SDT linker
HEXTOOL    = @$(ARMBIN)/fromelf#      # ARM SDT utility to create hex file from image
BINTOOL    = @$(ARMBIN)/fromelf#      # ARM SDT utility to create binary file from image

OBJ_CMD    = -o#                      # Command line option to specify output filename
ifeq ($(BUILD_UNIX), yes)
    PPASM      = perl $(QCTOOLS)/ppasm.pl
else
    PPASM      = $(QCTOOLS)/ppasm         # Perl script to include .h files in assembly
endif

GETDEP_SCRIPT  = ../../../../common/shared/tools/src/getdep.pl
MDEPEND_SCRIPT = ../../../../common/shared/tools/src/mdepend.pl
ASM_SCRIPT = ../../../../common/shared/tools/src/asm.pl#                        # Perl script to include .h files in assembly
CAT_SCRIPT = ../../../../common/shared/tools/src/cat.pl#                        # Perl script to print output for assembly files
REDIRECT_SCRIPT = ../../../../common/shared/tools/src/redirect.pl#              # Perl script to 
FORMAT_C_DATA_SCRIPT = ../../../../common/shared/tools/src/format_c_data.pl#    # Perl script to 
SEARCH_REPLACE_SCRIPT = ../../../../common/shared/tools/src/searchreplace.pl#   # Perl script to  search for a string and replace

#-------------------------------------------------------------------------------
# Processor architecture options
#-------------------------------------------------------------------------------

ifeq ($(findstring RVCT,$(ARMTOOLS)),RVCT)
  CPU = --cpu ARM926EJ-S#            # ARM926EJ-S target processor
else
  CPU = -cpu ARM926EJ-S#             # ARM926EJ-S target processor
endif

#-------------------------------------------------------------------------------
# ARM Procedure Call Standard (APCS) options
#-------------------------------------------------------------------------------

PCSZ     = 32bit#               # Program counter (PC) size
STACKCHK = noswst/interwork#    # No software stack checking support
FRAMEPTR = nofp#                # No frame pointer
FLOATPNT = softfp#              # Use software floating point library
INTRWORK = interwork#           # ARM/Thumb interworking support
NARROW   = narrow#              # Use caller parameter narrowing
REENTRNT = nonreentrant#        # No support for re-entrancy

ifeq ($(findstring RVCT,$(ARMTOOLS)),RVCT)
  APCS = --apcs /$(STACKCHK)
else
  APCS = -apcs /$(STACKCHK)
endif

# NOTE:
# If software stack checking support is enabled, FEATURE_STACK_CHECK must be
# #defined in the cust*.h file to enable the required common services support.
#
# The following APCS options are obsolete in the ARM SDT 2.50 tools:
#   PCSZ
#   FRAMEPTR
#   REENTRNT

#-------------------------------------------------------------------------------
# Compiler output options
#-------------------------------------------------------------------------------

OUT = -c#                       # Object file output only

ifeq ($(findstring RVCT,$(ARMTOOLS)),RVCT)
  LIST = --list
  INTL = --interleave
else
  LIST = -list
  INTL = -fs
endif

#-------------------------------------------------------------------------------
# Compiler/assembler debug options
#-------------------------------------------------------------------------------

ifeq ($(findstring RVCT,$(ARMTOOLS)),RVCT)
  DBG = -g --dwarf2#               # Enable DWARF2 format debug tables
else
  DBG = -g -dwarf2#                # Enable DWARF2 format debug tables
endif

ifeq ($(USES_NO_DEBUG), yes)
  DBG = 
endif

#-------------------------------------------------------------------------------
# Compiler optimization options
#-------------------------------------------------------------------------------

OPT = -Ospace -O2#              # Full compiler optimization for space
#OPT =  -O0#              # Full compiler optimization for space

#-------------------------------------------------------------------------------
# Compiler code generation options
#-------------------------------------------------------------------------------

ifeq ($(findstring RVCT,$(ARMTOOLS)),RVCT)
  END = --littleend#              # Compile for little endian memory architecture
else
  END = -littleend#               # Compile for little endian memory architecture
endif

ZA  = -za1#                     # LDR may only access 32-bit aligned addresses
ZAS = -zas4#                    # Min byte alignment for structures
ZAP = -zap0#                    # Struct ptrs NOT assumed to be aligned per -zas
ZAT = -zat1#                    # Min byte alignment for top-level static objects
ZZT = -zzt0#                    # Force uninitialized variables to ZI data area

CODE = $(END)

# NOTE:
# The -zap0 option is required due to a known ARM 2.50 compiler bug with
# pointers to struct sub-fields within __packed structs

#-------------------------------------------------------------------------------
# Include file search path options
#-------------------------------------------------------------------------------

INC = -I. #-I"$(ARMINC)"#          # Search local dir, then ARM SDT \include dir

# NOTE:
# The -I. option allows memory.h to be found in the current directory when
# included using #include <memory.h>

#-------------------------------------------------------------------------------
# Compiler pragma emulation options
#-------------------------------------------------------------------------------

#PRAGMA = -zpcontinue_after_hash_error

# NOTE:
# The -zpcontinue_after_hash_error allows the compiler to continue when a
# #error statement is encountered.  This option also allows the compiler to
# continue when any other Error condition is encountered at compile time.
#        ** This option should be removed as soon as possible **

#-------------------------------------------------------------------------------
# Compiler error and warning message control options
#-------------------------------------------------------------------------------

ifeq ($(findstring RVCT,$(ARMTOOLS)),RVCT)
  MSG =                           # deprecated for rvct22
else
  MSG = -Wb#                      # No warnings for bit fields
endif
NO_MSG = -W#                      # No warnings

#-------------------------------------------------------------------------------
# Additional compile time error checking options
#-------------------------------------------------------------------------------

ifeq ($(findstring RVCT,$(ARMTOOLS)),RVCT)
  CHK =                           #flow analysis is automatic in RVCT22
else
# CHK = -fa#                      # Check for data flow anomolies
endif

#-------------------------------------------------------------------------------
# Compiler dependency generation flag
#-------------------------------------------------------------------------------

ifeq ($(findstring RVCT,$(ARMTOOLS)),RVCT)
  DEPEND = --depend#
else
  DEPEND = -depend#
endif

#-------------------------------------------------------------------------------
# Linker options
#-------------------------------------------------------------------------------

ifeq ($(findstring RVCT,$(ARMTOOLS)),RVCT)
  MAP  = --map#                           # Memory map of all object file areas
  ifeq ($(findstring RVCT22,$(ARMTOOLS)),RVCT22)
    # Info on object size, veneers, unused sections, branch inlining and 
    # tail calling section reordering
    INFO = --info sizes,totals,veneers,unused,inline,tailreorder#
  else
    # Info on object size, veneers and unused sections
    INFO = --info sizes,totals,veneers,unused#
  endif
  XREF = --xref#                          # List cross-references between files
  VERB = --verbose#                       # Print verbose output messages
  LIST = --list#                          # Direct map and info output to file
  SYM  = --symbols --symdefs#             # Direct symbol table to file
  LINK = --scatter#                       # Use scatter load description file
  SP_S = --split_sections#
  VIA  = --via#
  KEEP = --keep#
else
  MAP  = -map#                            # Memory map of all object file areas
  INFO = -info sizes,totals,veneers,unused# Info on object size and veneers
  XREF = -xref#                           # List cross-references between files
  VERB = -verbose#                        # Print verbose output messages
  LIST = -list#                           # Direct map and info output to file
  SYM  = -symbols -symdefs#               # Direct symbol table to file
  LINK = -scatter#                        # Use scatter load description file
  SP_S = -zo#
  VIA  = -via#
  KEEP = -keep#
endif

#-------------------------------------------------------------------------------
# Linker library options
#-------------------------------------------------------------------------------

CLIB  = "$(ARMLIB)"/armlib/c_t__un.l#          # ARM embedded ANSI C library
MLIB  = "$(ARMLIB)"/armlib/m_t_pu.l#           # ARM embedded ANSI C library

LIBS = $(CLIB) $(MLIB)

#-------------------------------------------------------------------------------
# Compiler flag definitions
#-------------------------------------------------------------------------------

CFLAGS0 = $(OUT) $(INC) $(CPU) $(APCS) $(CODE) $(PRAGMA) $(CHK) $(DBG) $(MSG)
CFLAGS  = $(CFLAGS0) $(OPT)

#-------------------------------------------------------------------------------
# Assembler flag definitions
#-------------------------------------------------------------------------------

AFLAGS = $(CPU) $(APCS) $(DBG)

#-------------------------------------------------------------------------------
# Linker flag definitions
#-------------------------------------------------------------------------------

ifeq ($(findstring RVCT,$(ARMTOOLS)),RVCT)
  NRMV = --noremove#
  RMV  = --remove#
  DB   = --debug#
  BIN  = --bin#
  ifeq ($(findstring RVCT22,$(ARMTOOLS)),RVCT22)
    INL = --inline#
    TR  = --tailreorder#
  else
    INL =#
    TR  =#
  endif
else
  NRMV = -noremove#
  RMV  = -remove#
  DB   = -debug#
  BIN  = -bin# 
  INL  =#
  TR   =#
endif

LFLAGS = $(XREF) $(MAP) $(INFO) $(LIST) $(TARGET).map $(SYM) $(TARGET).sym \
         $(LINK) $(SCLFILE) $(DB) $(NRMV) $(INL) $(TR)

#-------------------------------------------------------------------------------
# Binary file flag definitions
#-------------------------------------------------------------------------------
BINCMD = $(BINTOOL) $(BIN) -o $(LINKOBJS_PATH)/$(TARGET).mbn $(LINKOBJS_PATH)/$(TARGET).$(EXETYPE)
GEN_HDR_TOOLS = $(MAKE) -s -C $(HEADERGEN) -f image_header.mak clean all
GEN_DBL_HDR = $(HEADERGEN)/image_header.exe $(FLASH_TYPE) dbl $(TARGET).mbn $(TARGET)hd.mbn 

#-------------------------------------------------------------------------------
# Tools target definitions (used to echo tool information)
#-------------------------------------------------------------------------------

ARM_VERSION_BANNER = ARM TOOL VERSIONS
ifeq ($(findstring RVCT,$(ARMTOOLS)),RVCT)
  VER_FLAG = --vsn#
else
  VER_FLAG = -vsn#
endif
