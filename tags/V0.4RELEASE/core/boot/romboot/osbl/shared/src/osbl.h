#ifndef OSBL_H
#define OSBL_H

/*===========================================================================

               O S  S e c o n d a r y   B o o t   L o a d e r
                           H e a d e r  F i l e

DESCRIPTION
 Contains common defintion used by OSBL module.

INITIALIZATION AND SEQUENCING REQUIREMENTS
  None
  
Copyright (c) 2005 by QUALCOMM, Incorporated.  All Rights Reserved.
============================================================================*/

/*===========================================================================

                           EDIT HISTORY FOR FILE

This section contains comments describing changes made to this file.
Notice that changes are listed in reverse chronological order.

$Header: //depot/asic/msmshared/secboot2/osbl/1_0/osbl.h#2 $

when       who     what, where, why
--------   ---     ----------------------------------------------------------
10/09/07   ly      Create
============================================================================*/

/*===========================================================================
 
                           INCLUDE FILES

===========================================================================*/
#ifndef _ARM_ASM_
#include "boot_comdef.h"
#endif /* _ARM_ASM_ */

#include "osbl_msm.h"

/*===========================================================================

                      PUBLIC DATA DECLARATIONS

===========================================================================*/

/*---------------------------------------------------------------------------
  Define the MIN macro if it has not been defined. This is necessary when
  the datamover is not used.
---------------------------------------------------------------------------*/
#ifndef MIN
   #define  MIN( x, y ) ( ((x) < (y)) ? (x) : (y) )
#endif


#ifndef _ARM_ASM_
/* Forward declarations so that we don't have to include the full
 * header file for each module here */
struct boot_clk_speed_type;
struct boot_dbl_if_shared_info_type;
struct osbl_flash_shared_data_type;
struct boot_elf_loader_sec_if_type;
struct bl_shared_data_target_type;

/* Function pointer type that will transfer control to AMSS. */
typedef void (*amss_entry_ptr_type)(void);


/*---------------------------------------------------------------------------
  OSBL SHARED DATA STRUCTURE
  
  NOTE: Only data that needs to be shared between modules should go
        in this structure
---------------------------------------------------------------------------*/
typedef struct bl_shared_data_type
{
  /* CLK Bus Speed                                           */
  struct boot_clk_speed_type           *clk_speed;

  /* Data shared from the DBL and FSBL (deep copied)         */
  struct boot_dbl_if_shared_info_type  *dbl_shared_data;
  
  /* Data shared by boot devices (flash modules)             */
  struct osbl_flash_shared_data_type   *boot_dev_shared_data;

  /* Pointer to the AMSS elf loader private data             */
  struct boot_sec_elf_loader_if_type   *amss_elf_if;

  /* Entry pointer for AMSS (will branch here when exiting)  */
  amss_entry_ptr_type                   amss_entry_ptr;

  /* Target-specific shared data structure, if any */
  struct bl_shared_data_target_type    *target;

} bl_shared_data_type;


/*---------------------------------------------------------------------------
  Symbols generated by linker with "$" instead of "_".  Symbols are renamed
  in an assembler file to have "_" to make them valid "C" identifiers and
  the symbols are located in the boot ROM.  These symbols define the
  Read/Write data area in boot ROM and RAM, and the Zero Init data area in
  RAM.  Base addresses and length in bytes are given.
---------------------------------------------------------------------------*/
extern uint32  *Load__OSBL_VEC_TBL__Base;
extern uint32  *Image__OSBL_VEC_TBL__Base;
extern uint32  Image__OSBL_VEC_TBL__Length;
extern uint32  *Load__OSBL_RAM_RW__Base;
extern uint32  *Image__OSBL_RAM_RW__Base;
extern uint32  Image__OSBL_RAM_RW__Length;
extern uint32  *Image__OSBL_RAM_ZI__Base;
extern uint32  Image__OSBL_RAM_ZI__Length;
#endif /* _ARM_ASM_ */


/*===========================================================================

                      PUBLIC FUNCTION DECLARATIONS

===========================================================================*/

#ifndef _ARM_ASM_
/*===========================================================================

MACRO  OSBL_KICK_WATCHDOG

DESCRIPTION
   Watchdog timer circuit reset macro.

DEPENDENCIES
  The watchdog needs to be kicked at least once every TBDms.
  
RETURN VALUE
  None

SIDE EFFECTS
  None

===========================================================================*/
#if !defined(BOOT_WATCHDOG_DISABLED)
#define OSBL_KICK_WATCHDOG() \
          HWIO_OUT( WDOG_RESET, HWIO_FMSK( WDOG_RESET, WATCH_DOG ) )
#else
#define OSBL_KICK_WATCHDOG()
#endif /* BOOT_WATCHDOG_DISABLED */

#define SBL_KICK_WATCHDOG OSBL_KICK_WATCHDOG

/*===========================================================================

FUNCTION  OSBL_LOOP_HERE

DESCRIPTION
 This function is called by osbl_error_handler only. We perform
 clean up of the registers and loop until JTAG is connected.


DEPENDENCIES
  None
  
RETURN VALUE
  None

SIDE EFFECTS
  None

===========================================================================*/
void osbl_loop_here( void );

/*===========================================================================

FUNCTION  OSBL_SET_STACK_PTR

DESCRIPTION
 This function sets the stack ptr.

DEPENDENCIES
  None

RETURN VALUE
  None

SIDE EFFECTS
  None

===========================================================================*/
void osbl_set_stack_ptr(uint32, uint32);

#endif /* _ARM_ASM_ */

#endif /* OSBL_H */
