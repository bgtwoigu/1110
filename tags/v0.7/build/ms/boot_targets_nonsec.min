#============================================================================
#
#  Description:
#    An includable component of the makefile to build the DMSS software for
#    the SURF (Subscriber Unit Reference Design).
#
#    This file specifies the make file rules that are common across all
#    targets and makefiles
#
# Copyright (c) 2004           by QUALCOMM, Incorporated. All Rights Reserved.
#----------------------------------------------------------------------------
#============================================================================
#
#			EDIT HISTORY FOR MODULE
#
# $Header: //depot/asic/qsc1100/build/ms/boot_targets_nonsec.min#1 $ $DateTime: 2007/10/25 15:24:48 $ $Author: milanp $
#
# when       who     what, where, why
# --------   ---     --------------------------------------------------------
# 07/28/05   wd      L4 Merge
# 05/01/05   tk      Created.
#============================================================================


MBNPATH = $(BINPATH)/$(TARGET)
GEN_MBN_PATHS = -$(MKDIR) $(call slashes,$(MBNPATH))
export MBNPATH

# Generate the Memory Usage report
define GEN_MEMORY_REPORT
	@echo MEMORY REPORT $(ASIC)$(BUILD)$(VERSION).mem.html
	@-$(MEMUSAGE_PER_DIR) -b $(ASIC)$(BUILD)$(VERSION) -targetdir $(TARGETDIR) -mf $(BUILD).map -image ../doc/prodshot_ms$(ASIC).gif -warn 67108864 25165824 -elf $(MBNPATH)/amss.mbn > ../doc/$(ASIC)$(BUILD)$(VERSION).mem.html
	@echo MEMORY REPORT done
endef

BUILD_NAME = `cd $(SRCROOT); pwd | sed 's/^.*\///';`

#-------------------------------------------------------------------------------
# Bin file flag definitions
#-------------------------------------------------------------------------------

DELETE_PBL_MBNS = -if test -d $(MBNPATH); then rm -f $(MBNPATH)/pbl.mbn; fi
DELETE_QCSBL_CFG_MBNS = -if test -d $(MBNPATH); then rm -f $(MBNPATH)/qcsbl.mbn $(MBNPATH)/qcsblhd.mbn $(MBNPATH)/qcsbl_cfgdata.mbn ; fi
DELETE_OEMSBL_CFG_MBNS = -if test -d $(MBNPATH); then rm -f $(MBNPATH)/oemsbl.mbn $(MBNPATH)/oemsblhd.mbn ; fi

ifeq "$(strip $(FLASH_TYPE))" "nand"
  DELETE_AMSS_PART_MBNS = -if test -d $(MBNPATH); then rm -f $(MBNPATH)/amss.mbn $(MBNPATH)/amsshd.mbn $(MBNPATH)/partition.mbn; fi
else
  DELETE_AMSS_PART_MBNS = -if test -d $(MBNPATH); then rm -f $(MBNPATH)/amss.mbn $(MBNPATH)/amsshd.mbn; fi
endif


GEN_IMAGE_HEADER_TOOL = $(MAKE) -C $(HEADERGEN) -f image_header.mak all
GEN_NORIMG_TOOL = $(MAKE) -C $(HEADERGEN) -f norimgtool.mak all
GEN_NORPROGIMG_TOOL = $(MAKE) -C $(HEADERGEN) -f norprogimgtool.mak all


# Using new tool to generate progressive boot ELF and hash table
#
GEN_ELF_TOOL = make -C $(HEADERGEN) -f pboot_utils.mak all

ifeq ($(USES_L4), yes)
GEN_AMSS_MBN  = $(COPY) $(call slashes,$(L4BINPATH)/bootimg.pbn $(MBNPATH)/amss.mbn); $(PBOOT_GEN_ELF) $(MBNPATH)/amss.mbn dummy_file dummy_file $(MBNPATH)/hash.mbn -hash
else
GEN_AMSS_MBN  = $(PBOOT_GEN_ELF) $(BUILD).elf $(SCLFILE) $(MBNPATH)/amss.mbn $(MBNPATH)/hash.mbn -melf_hash
endif


GEN_HASH_HDR = $(IMAGE_HEADER) $(FLASH_TYPE) hash $(MBNPATH)/hash.mbn $(MBNPATH)/hashhd.mbn
ADD_HASH_AMSS = $(PBOOT_ADD_HASH) $(MBNPATH)/amss.mbn $(MBNPATH)/hashhd.mbn $(MBNPATH)/hash.mbn

GEN_PARTITION_MBN = $(MAKE) -C $(PARTITION) -f partition.mak all; $(COPY)  $(call slashes,../../cfg_data/$(DEFAULT_CFG_DATA_DIR)/partition.mbn $(MBNPATH)/partition.mbn); echo Copied $(DEFAULT_CFG_DATA_DIR)/partition.mbn to $(MBNPATH)

GEN_AMSS_HEADER = $(IMAGE_HEADER) $(FLASH_TYPE) amss $(MBNPATH)/amss.mbn $(MBNPATH)/amsshd.mbn
GEN_OEMSBL_MBN = $(MAKE) -C $(OEMSBL) -f oemsbl.mak FLASH_TYPE=$(FLASH_TYPE) CUSTNAME=$(TARGET) all 
GEN_OEMSBL_HEADER = $(IMAGE_HEADER) $(FLASH_TYPE) oemsbl $(MBNPATH)/oemsbl.mbn $(MBNPATH)/oemsblhd.mbn
GEN_CFG_HEADER = $(MAKE) -C $(CFG_DATA) -f cfg_data.mak CFG_FLASH_TYPE=$(FLASH_TYPE) CFG_BOARD_TYPE=$(TARGCONFIG) all;
GEN_QCSBL_HEADER = $(IMAGE_HEADER) $(FLASH_TYPE) qcsbl $(MBNPATH)/qcsbl.mbn $(MBNPATH)/qcsblhd.mbn
DEL_QCSBL_HEADER = if test -f $(MBNPATH)/qcsblhd.mbn; then rm -f $(MBNPATH)/qcsblhd.mbn ; fi

  ifeq ($(USES_STRIP_NO_ODM),yes)
    GEN_PBL_MBN = 
    GEN_QCSBL_MBN = $(COPY) $(call slashes,$(QCSBL)/$(FLASH_TYPE)/qcsbl.mbn $(QCSBL)/qcsbl.mbn)
  else
    GEN_PBL_MBN = $(MAKE) -C $(PBL) -f pbl.mak CUSTNAME=$(TARGET) all;
    GEN_QCSBL_MBN = $(MAKE) -C $(QCSBL) -f qcsbl.mak FLASH_TYPE=$(FLASH_TYPE) CUSTNAME=$(TARGET) all;
  endif


CPY_PBLIMG = $(COPY) $(call slashes,$(PBL)/pbl.mbn $(MBNPATH)/pbl.mbn)
CPY_QCIMG = $(COPY) $(call slashes,$(QCSBL)/qcsbl.mbn $(MBNPATH)/qcsbl.mbn)
CPY_OEMIMG = $(COPY) $(call slashes,$(OEMSBL)/oemsbl.mbn $(MBNPATH)/oemsbl.mbn)
CPY_CFG_HEADER = $(COPY) $(call slashes,$(BOOT_CFG_DIR_PREFIX)/qcsblhd_cfgdata.mbn $(MBNPATH)/qcsblhd_cfgdata.mbn)


.PHONY: $(SRCROOT)/BuildProducts.txt

bldprod: $(TARGET).$(EXETYPE) $(SRCROOT)/BuildProducts.txt

ifeq "$(strip $(BOOT_TYPE))" "single"

# Use the image tool to combine images
WRAPUP_IMAGE = $(HEADERGEN)/norprogimgtool $(MBNPATH)/amss.mbn $(MBNPATH)/qcsblhd_cfgdata.mbn $(MBNPATH)/qcsbl.mbn $(MBNPATH)/oemsbl.mbn $(MBNPATH)/oemsblhd.mbn $(MBNPATH)/all.mbn

$(SRCROOT)/BuildProducts.txt:
	@echo Creating build-product specification file
	@if test -f $@; then chmod +rwx $@; fi
	@rm -f $@
	@touch $@
	@echo $(patsubst ../../%,./%,$(MBNPATH))/all.mbn > $@


#pragma RUNLOCAL 
genamss: bldprod
	@echo Generating binary images for multi-image boot
	@echo
	@$(DELETE_AMSS_PART_MBNS)
	@$(GEN_MBN_PATHS)
	@$(GEN_IMAGE_HEADER_TOOL)
	@$(GEN_ELF_TOOL)
	@$(GEN_NORPROGIMG_TOOL)
	@$(GEN_AMSS_MBN)
	@$(GEN_HASH_HDR)
	@$(ADD_HASH_AMSS)
	@$(GEN_MEMORY_REPORT)
	@$(GEN_AMSS_HEADER)
	@echo ---------------------------------------------------------------

else

# No wrapping up needed - images should be left as-is
WRAPUP_IMAGE =

$(SRCROOT)/BuildProducts.txt:
	@echo Creating build-product specification file $@
	@if test -f $@; then chmod +rwx $@; fi
	@rm -f $@
	@touch $@
	@echo $(patsubst ../../%,./%,$(MBNPATH))/amss.mbn > $@
	@echo $(patsubst ../../%,./%,$(MBNPATH))/amsshd.mbn >> $@
	@echo $(patsubst ../../%,./%,$(MBNPATH))/oemsbl.mbn >> $@
	@echo $(patsubst ../../%,./%,$(MBNPATH))/oemsblhd.mbn >> $@
	@echo $(patsubst ../../%,./%,$(MBNPATH))/partition.mbn >> $@
	@echo $(patsubst ../../%,./%,$(MBNPATH))/pbl.mbn >> $@
	@echo $(patsubst ../../%,./%,$(MBNPATH))/qcsbl.mbn >> $@
	@echo $(patsubst ../../%,./%,$(MBNPATH))/qcsblhd_cfgdata.mbn >> $@

#pragma RUNLOCAL  
genamss: bldprod
	@echo Generating binary images for multi-image boot
	@echo
	@echo TARGETDIR "$(MBNPATH)"
	@echo
	@$(DELETE_AMSS_PART_MBNS)
	@$(GEN_MBN_PATHS)
	@$(GEN_IMAGE_HEADER_TOOL) 
	@$(GEN_ELF_TOOL)
	@$(GEN_AMSS_MBN)  # generates amss.mbn 
	@$(GEN_HASH_HDR)
	@$(ADD_HASH_AMSS)
	@$(GEN_MEMORY_REPORT) 
	@$(GEN_PARTITION_MBN)
	@$(GEN_AMSS_HEADER)
	@echo ---------------------------------------------------------------


#pragma RUNLOCAL	
genpbl: 
	@echo Generating PBL
	@echo
	@echo Building PBL: $(GEN_PBL_MBN)
	@echo
	@$(DELETE_PBL_MBNS)
	@$(GEN_MBN_PATHS)
	@$(GEN_PBL_MBN)
	@$(CPY_PBLIMG)
	@echo ++Version:PBL++$(IMAGE_PBL_VERSION)++$(BUILD_NAME)++$(TARGET)++
	@echo ++Version:PBL++$(IMAGE_PBL_VERSION)++$(BUILD_NAME)++$(TARGET)++ >> $(MBNPATH)/pbl.mbn
	@echo ---------------------------------------------------------------
	
endif

#pragma RUNLOCAL
genqcsbl: 
	@echo Generating QCSBL
	@echo
	@echo Building QCSBL: $(GEN_QCSBL_MBN)
	@$(DELETE_QCSBL_CFG_MBNS)
	@$(GEN_MBN_PATHS)
	@$(GEN_QCSBL_MBN)
	@$(CPY_QCIMG)
	@echo ++Version:QCSBL++$(IMAGE_QCSBL_VERSION)++$(BUILD_NAME)++$(TARGET)++
	@echo ++Version:QCSBL++$(IMAGE_QCSBL_VERSION)++$(BUILD_NAME)++$(TARGET)++ >> $(MBNPATH)/qcsbl.mbn
	@$(GEN_QCSBL_HEADER)
	@echo Generating the Configuration data: $(GEN_CFG_HEADER)
	@$(GEN_CFG_HEADER)
	@echo ---------------------------------------------------------------

#pragma RUNLOCAL	
genoemsbl: 
	@echo Generating OEMSBL
	@echo
	@echo Building OEMSBL: $(GEN_OEMSBL_MBN)
	@$(DELETE_OEMSBL_CFG_MBNS)
	@$(GEN_MBN_PATHS)
	@$(GEN_OEMSBL_MBN)
	@$(CPY_OEMIMG)
	@echo ++Version:OEMSBL++$(IMAGE_OEMSBL_VERSION)++$(BUILD_NAME)++$(TARGET)++
	@echo ++Version:OEMSBL++$(IMAGE_OEMSBL_VERSION)++$(BUILD_NAME)++$(TARGET)++ >> $(MBNPATH)/oemsbl.mbn
	@$(GEN_OEMSBL_HEADER)
	@echo ---------------------------------------------------------------


#pragma RUNLOCAL 
ifeq "$(strip $(FLASH_TYPE))" "nand"
$(TARGET).bin: genamss genpbl genqcsbl genoemsbl
else
$(TARGET).bin: genamss genqcsbl genoemsbl
	$(WRAPUP_IMAGE)
endif


# The SBL object subdirectory, target image file, and target bin/hex files are deleted.
# These cleans are only for nonsecured boot, we will do the secured boot later.
cleanpbl:
	@echo ------------------------------------------------------------------------
	@echo CLEAN PBL for target build $(TARGET)
	@if test -f $(MBNPATH)/pbl.mbn; then rm -f $(MBNPATH)/pbl.mbn; fi
	@$(MAKE) -C $(PBL) -f pbl.mak clean
	@echo ------------------------------------------------------------------------

cleanqcsbl:
	@echo ------------------------------------------------------------------------
	@echo CLEAN QCSBL for target build $(TARGET)
	@$(MAKE) -C $(QCSBL) -f qcsbl.mak clean
	@if test -f $(MBNPATH)/qcsbl.mbn; then rm -f $(MBNPATH)/qcsbl.mbn; fi
	@if test -f $(MBNPATH)/qcsblhd.mbn; then rm -f $(MBNPATH)/qcsblhd.mbn; fi
	@echo CLEAN CFG DATA for target build $(TARGET)
	@if test -f $(MBNPATH)/qcsblhd_cfgdata.mbn; then rm -f $(MBNPATH)/qcsblhd_cfgdata.mbn; fi
	$(MAKE) -C $(CFG_DATA) -f cfg_data.mak BOOTMEMCFG=$(SEC_MODE)_$(FLASH_TYPE) BOOTTARGET=$(TARGCONFIG) clean;
	@echo ------------------------------------------------------------------------

cleanoemsbl:
	@echo ------------------------------------------------------------------------
	@echo CLEAN OEMSBL for target build $(TARGET)
	@$(MAKE) -C $(OEMSBL) -f oemsbl.mak clean
	@if test -f $(MBNPATH)/oemsbl.mbn; then rm -f $(MBNPATH)/oemsbl.mbn; fi
	@if test -f $(MBNPATH)/oemsblhd.mbn; then rm -f $(MBNPATH)/oemsblhd.mbn; fi
	@echo ------------------------------------------------------------------------

#pragma RUNLOCAL 	
ifeq ($(USES_NOR_PSRAM),yes)
clean: cleanamss cleanpbl cleanqcsbl cleanoemsbl 
else
clean: cleanflashtools cleanamss cleanpbl cleanqcsbl cleanoemsbl 
endif



