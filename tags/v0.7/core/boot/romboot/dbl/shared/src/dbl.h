#ifndef DBL_H
#define DBL_H

/*===========================================================================

                     D E V I C E    B O O T    L O A D E R 
                           H e a d e r  F i l e

DESCRIPTION
 Contains common defintion used by DBL internal module.

INITIALIZATION AND SEQUENCING REQUIREMENTS
  None
  
Copyright (c) 2007 by QUALCOMM, Incorporated.  All Rights Reserved.
============================================================================*/

/*===========================================================================

                           EDIT HISTORY FOR FILE

This section contains comments describing changes made to this file.
Notice that changes are listed in reverse chronological order.

$Header: //depot/asic/msmshared/secboot2/sbl/dbl/1_0/dbl.h#2 $

when       who     what, where, why
--------   ---     ----------------------------------------------------------
07/30/07   ANB     Initial version.
===========================================================================*/

/*===========================================================================
 
                           INCLUDE FILES

===========================================================================*/

#ifndef _ARM_ASM_
#include "boot_comdef.h"
#include "dbl_target.h"
#endif /* _ARM_ASM_ */

/*===========================================================================

                      PUBLIC DATA DECLARATIONS

===========================================================================*/

#ifndef _ARM_ASM_
/*---------------------------------------------------------------------------
  Symbols generated by linker with "$" instead of "_".  Symbols are renamed
  in an assembler file to have "_" to make them valid "C" identifiers and
  the symbols are located in the boot ROM.  These symbols define the
  Read/Write data area in boot ROM and RAM, and the Zero Init data area in
  RAM.  Base addresses and length in bytes are given.
---------------------------------------------------------------------------*/
extern uint32  *Load__DBL_IRAM_VEC_TBL__Base;
extern uint32  *Image__DBL_IRAM_VEC_TBL__Base;
extern uint32   Image__DBL_IRAM_VEC_TBL__Length;
extern uint32  *Load__DBL_RAM_RW__Base;
extern uint32   Image__DBL_RAM_RW__Base;
extern uint32   Image__DBL_RAM_RW__Length;
extern uint32   Image__DBL_RAM_ZI__Base;
extern uint32   Image__DBL_RAM_ZI__Length;
extern uint32   Image__DBL_RAM_NZI__Base;
extern uint32   Image__DBL_RAM_NZI__Length;

typedef struct dbl_shared_data_type   dbl_shared_data_type;

/*===========================================================================

                      PUBLIC FUNCTION DECLARATIONS

===========================================================================*/
/*===========================================================================

MACRO  DBL_KICK_WATCHDOG

DESCRIPTION
   Watchdog timer circuit reset macro.

DEPENDENCIES
  The watchdog needs to be kicked at least once every TBDms.
  
RETURN VALUE
  None

SIDE EFFECTS
  None

===========================================================================*/
#ifndef BOOT_WATCHDOG_DISABLED
#define DBL_KICK_WATCHDOG() \
          HWIO_OUT( WDOG_RESET, HWIO_FMSK( WDOG_RESET, WATCH_DOG ) )
#else
#define DBL_KICK_WATCHDOG()
#endif /* BOOT_WATCHDOG_DISABLED */

/*===========================================================================

MACRO  DBL_VALID_ADDR 

DESCRIPTION
  This macro validates the address passed in to insure that it is within
  the address space that SDRAM, PSRAM, or NOR can exist on the MSM.

DEPENDENCIES
  None
  
RETURN VALUE
  None

SIDE EFFECTS
  Calls the DBL error handler if the address falls outside the valid range.

===========================================================================*/
#define DBL_VALID_ADDR( addr, error_type ) \
          DBL_VERIFY( ((uint32)(addr) <= RANGE_END_ADDR) , error_type)

/*===========================================================================

FUNCTION  DBL_LOOP_HERE

DESCRIPTION
 This function is called by qcsbl_error_hanlder only. We perform
 Clean up the registers and loop until JTAG is connected.


DEPENDENCIES
  None
  
RETURN VALUE
  None

SIDE EFFECTS
  None

===========================================================================*/
void dbl_loop_here( void );

/*===========================================================================

FUNCTION  DBL_ENABLE_ARM9_INSTRUCTION_CACHE

DESCRIPTION
  This funcion will enable ARM9 instruction cache.
      
DEPENDENCIES
  None
  
RETURN VALUE
  None

SIDE EFFECTS
  None

===========================================================================*/
void dbl_enable_arm9_instruction_cache(void);
#endif /* _ARM_ASM_ */
#endif /* DBL_H*/
