#ifndef BOOTMEM_H
#define BOOTMEM_H
/*====*====*====*====*====*====*====*====*====*====*====*====*====*====*====*

                  B O O T  M E M O R Y  I N I T I A L I Z A T I O N

GENERAL DESCRIPTION
  This header file exports the stack arrays.

Copyright (c) 2004-2007 by QUALCOMM Incorporated. All Rights Reserved.
*====*====*====*====*====*====*====*====*====*====*====*====*====*====*====*/


/*===========================================================================
                        EDIT HISTORY FOR MODULE

$Header: //depot/asic/qsc1100/drivers/boot/bootmem.h#3 $

when       who     what, where, why
--------   ---     ----------------------------------------------------------
04/24/07   amw     Cleanup lint errors.
12/01/04   chs     Modified to make it compatible for NOR/NAND boot.
10/19/04   tkuo    Ported for MSM6250.
===========================================================================*/


/*===========================================================================

                     INCLUDE FILES FOR MODULE

===========================================================================*/

#include "customer.h"
#include "comdef.h"

/*===========================================================================

                      PUBLIC DATA DECLARATIONS

===========================================================================*/

/* Various stacks to be accessed */
extern byte svc_stack[] ;
extern byte abort_stack[] ;
extern byte sys_stack[] ;
extern byte undef_stack[] ; 
extern byte irq_stack[] ;   
extern byte fiq_stack[] ;

/*
 * Pointers to the base and length of BB_RAM segments
 *
 * These symbols are generated by the linker with $'s instead of _'s.  We
 * re-name the symbol to use _'s to make valid C identifiers.  We embed
 * those symbols in bootsys.s so that we have them in the flash.
 */
extern byte *Image__MODEM_DATA_1__Base;
extern byte *Image__MODEM_DATA_1__Length;
extern byte *Load__MODEM_DATA_1__Base;

extern byte *Image__MODEM_DATA_2__Base;
extern byte *Image__MODEM_DATA_2__Length;
extern byte *Load__MODEM_DATA_2__Base;

extern byte *Image__MAIN_APP_DATA_1__Base;
extern byte *Image__MAIN_APP_DATA_1__Length;
extern byte *Load__MAIN_APP_DATA_1__Base;


extern byte *Image__BB_RAM__Base;
extern byte *Image__BB_RAM__Length;
extern byte *Load__BB_RAM__Base;
extern byte *Image__UNINIT_RAM__Base;
extern byte *Image__UNINIT_RAM__Length;
extern byte *Image__UNINIT_RAM__ZI__Base;
extern byte *Image__UNINIT_RAM__ZI__Length;
extern byte *Image__ZI_REGION__ZI__Base;
extern byte *Image__ZI_REGION__ZI__Length;
extern byte *Image__ZI_REGION__ZI__Length;
extern byte *Image__INTERNAL_BOOT_RAM_1__Base;
extern byte *Image__INTERNAL_BOOT_RAM_1__Length;
extern byte *Image__INTERNAL_BOOT_RAM_2__Base;
extern byte *Image__INTERNAL_BOOT_RAM_2__Length;
extern byte *Load__INTERNAL_BOOT_RAM_2__Base;
extern byte *Load__INTERNAL_BOOT_RAM_1__Base;

extern uint32  *Load__AMSS_IMEM_VEC_TBL__Base;
extern uint32  *Image__AMSS_IMEM_VEC_TBL__Base;
extern uint32   Image__AMSS_IMEM_VEC_TBL__Length;

/*
 * Pointers to the base and length of APP_RAM segments
 *
 * These symbols are generated by the linker with $'s instead of _'s.  We
 * re-name the symbol to use _'s to make valid C identifiers.  We embed
 * those symbols in bootsys.s so that we have them in the flash.
 */
extern byte *Image__APP_RAM__Base;
extern byte *Image__APP_RAM__Length;
extern byte *Load__APP_RAM__Base;

/* Used for debugging, specifies code space regions*/
#if defined( FEATURE_PROGRESSIVE_BOOT) && !defined (OSBL)
  extern byte *Image__MODEM_DATA_PAD__Base;
  extern byte *Image__MODEM_DATA_PAD__Length;      
  extern byte *Image__MAIN_APP_CODE_PAD__Base;
  extern byte *Image__MAIN_APP_CODE_PAD__Length;  
  extern byte *Image__MAIN_APP_DATA_PAD__Base;
  extern byte *Image__MAIN_APP_DATA_PAD__Length;   
  extern byte *Image__MAIN_APP_DATA_1__Base;
  extern byte *Image__MAIN_APP_DATA_1__Length;                        
#else
  extern byte *Image__BOOT__Base;
  extern byte *Image__BOOT__Length;
#endif
extern byte *Image__MAIN_APP_1__Base;
extern byte *Image__MAIN_APP_1__Length;
extern byte *Image__MAIN_APP_2__Base;
extern byte *Image__MAIN_APP_2__Length;
extern byte *Image__MAIN_APP_3__Base;
extern byte *Image__MAIN_APP_3__Length;
extern byte *Image__MAIN_APP_4__Base;
extern byte *Image__MAIN_APP_4__Length;

#ifdef FEATURE_SHARED_SEGMENT
extern byte *Image__SHARED_RAM__Base;
extern byte *Image__SHARED_RAM__Length;
#endif

extern void boot_ram_init(void);
extern void boot_create_vector_table( void );


#endif /* BOOTMEM_H */

