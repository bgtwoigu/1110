/**============================================================================
   @FILE:         AEEIBTAGEx.h

   Interface for Bluetooth Audio Gateway extension.

===============================================================================
        Copyright (c)  2009 QUALCOMM Incorporated.
               All Rights Reserved.
            QUALCOMM Proprietary and Confidential 
=============================================================================
*/
// Copyright (c) 2006, 2007 QUALCOMM Incorporated.

/* Auto generated code by the Component Services IDL compiler.
 * Warning: DO NOT EDIT THIS FILE. CHANGES MAY BE LOST.
 */

#ifndef AEEIBTAGEX_H
#define AEEIBTAGEX_H

#include "AEEStdDef.h"

#include "AEEInterface.h"

#if !defined(AEEINTERFACE_CPLUSPLUS)

#include "AEEISignal.h"
#include "AEEBTDef.h"
#define AEEIID_IBTAGEx 0x1090dc7

#define INHERIT_IBTAGEx(iname) \
   INHERIT_IQI(iname); \
   AEEResult (*OnATCommand)(iname* _pif, /*in*/ ISignal* piSig); \
   AEEResult (*GetATCommand)(iname* _pif, /*rout*/ char* atCmd, /*in*/ int atCmdLen, /*rout*/ int* atCmdLenReq); \
   AEEResult (*SendResponse)(iname* _pif, /*in*/ const char* pszResponse); \
   AEEResult (*GetRemoteMicrophoneLevel)(iname* _pif, /*in*/ const BDAddress* pBDAddr, /*rout*/ uint8* pLevel); \
   AEEResult (*SetRemoteMicrophoneLevel)(iname* _pif, /*in*/ const BDAddress* pBDAddr, /*in*/ uint8 level); \
   AEEResult (*SetMOSUsage)(iname* _pif, /*in*/ boolean bUse)

AEEINTERFACE_DEFINE(IBTAGEx);

static __inline unsigned int IBTAGEx_AddRef(IBTAGEx* _pif)
{
   return AEEGETPVTBL(_pif,IBTAGEx)->AddRef(_pif);
}

static __inline unsigned int IBTAGEx_Release(IBTAGEx* _pif)
{
   return AEEGETPVTBL(_pif,IBTAGEx)->Release(_pif);
}

static __inline int IBTAGEx_QueryInterface(IBTAGEx* _pif, AEEIID iid, void** ppo)
{
   return AEEGETPVTBL(_pif,IBTAGEx)->QueryInterface(_pif, iid, ppo);
}

static __inline AEEResult IBTAGEx_OnATCommand(IBTAGEx* _pif, /*in*/ ISignal* piSig)
{
   return AEEGETPVTBL(_pif,IBTAGEx)->OnATCommand(_pif, piSig);
}

static __inline AEEResult IBTAGEx_GetATCommand(IBTAGEx* _pif, /*rout*/ char* atCmd, /*in*/ int atCmdLen, /*rout*/ int* atCmdLenReq)
{
   return AEEGETPVTBL(_pif,IBTAGEx)->GetATCommand(_pif, atCmd, atCmdLen, atCmdLenReq);
}

static __inline AEEResult IBTAGEx_SendResponse(IBTAGEx* _pif, /*in*/ const char* pszResponse)
{
   return AEEGETPVTBL(_pif,IBTAGEx)->SendResponse(_pif, pszResponse);
}

static __inline AEEResult IBTAGEx_GetRemoteMicrophoneLevel(IBTAGEx* _pif, /*in*/ const BDAddress* pBDAddr, /*rout*/ uint8* pLevel)
{
   return AEEGETPVTBL(_pif,IBTAGEx)->GetRemoteMicrophoneLevel(_pif, pBDAddr, pLevel);
}

static __inline AEEResult IBTAGEx_SetRemoteMicrophoneLevel(IBTAGEx* _pif, /*in*/ const BDAddress* pBDAddr, /*in*/ uint8 level)
{
   return AEEGETPVTBL(_pif,IBTAGEx)->SetRemoteMicrophoneLevel(_pif, pBDAddr, level);
}

static __inline AEEResult IBTAGEx_SetMOSUsage(IBTAGEx* _pif, /*in*/ boolean bUse)
{
   return AEEGETPVTBL(_pif,IBTAGEx)->SetMOSUsage(_pif, bUse);
}

#else /* C++ */

#include "AEEISignal.h"
#include "AEEBTDef.h"
const AEEIID AEEIID_IBTAGEx = 0x1090dc7;

class IBTAGEx : public IQI
{
public:
   virtual ::AEEResult CDECL OnATCommand (/*in*/ ::ISignal* piSig) = 0;
   virtual ::AEEResult CDECL GetATCommand (/*rout*/ char* atCmd, /*in*/ int atCmdLen, /*rout*/ int* atCmdLenReq) = 0;
   virtual ::AEEResult CDECL SendResponse (/*in*/ const char* pszResponse) = 0;
   virtual ::AEEResult CDECL GetRemoteMicrophoneLevel (/*in*/ const ::BDAddress* pBDAddr, /*rout*/ ::uint8* pLevel) = 0;
   virtual ::AEEResult CDECL SetRemoteMicrophoneLevel (/*in*/ const ::BDAddress* pBDAddr, /*in*/ ::uint8 level) = 0;
   virtual ::AEEResult CDECL SetMOSUsage (/*in*/ boolean bUse) = 0;
};

#endif /* !defined(AEEINTERFACE_CPLUSPLUS) */

/**============================================================================
    INTERFACES DOCUMENTATION
===============================================================================

IBTAGEx Interface
Description:

   This private interface defines APIs that complement IBTAudioGateway.
   
Interface ID:
   AEEIID_IBTAGEx

See Also:
   IBTAudioGateway

==============================================================================
==============================================================================
   METHOD DOCUMENTATION
==============================================================================

IBTAGEx_AddRef()

Description:
   Inherited from IQI_AddRef().

See Also:
   IBTAGEx_Release()

==============================================================================
IBTAGEx_Release()

Description:
   Inherited from IQI_Release().

See Also:
   IBTAGEx_AddRef()
   
==============================================================================
IBTAGEx_QueryInterface()

Description:
   Inherited from IQI_QueryInterface().

===============================================================================
IBTAGEx_OnATCommand

Description:
   Registers/unregisters a signal with the interface to be set when an 
   AT command sent by remote device is not handled by lower implementation.

   Once this signal is set, the AT command must be retrieved by calling 
   IBTAGEx_GetATCommand().

   To unregister, application should pass NULL in place of piSig.

Prototype:
   AEEResult IBTAGEx_OnATCommand(IBTAGEx* pMe, ISignal*  piSig);

Parameters:
   pMe [i]     : the object
   piSig [i]   : Signal to be set when an event occurs.

Return Values:
   AEE_SUCCESS : The signal handler was successfully registered.

See Also:
   IBTAGEx_GetATCommand

===============================================================================
IBTAGEx_GetATCommand

Description:
   Retrieves the next unprocessed AT command.

Prototype:
   AEEResult IBTAGEx_GetATCommand(
                IBTAGEx* pMe, 
                char*    pszATCmd, 
                int      nATCmdLen,
                int*     pnATCmdLenReq);

Parameters:
   pMe [i]           : the object
   pszATCmd [o]      : destination for AT command string
   nATCmdLen [i]     : number of characters destination buffer can hold
   pnATCmdLenReq [o] : number of characters destination buffer must be able to hold

Return Values:
   AEE_SUCCESS          : AT command is successfully retrieved
   AEE_EBADPARM         : invalid input parameters
   AEE_EBADSTATE        : no AT commands to retrieve
   AEE_EBUFFERTOOSMALL  : no partial data copied, 
                          available data size returned in atCmdLenReq

Comments:
   There may be more than one AT command available to be retrieved.
   All data must be retrieved at once.  If destination buffer is not large
   enough to hold all data, no partial data would be copied and
   AEE_EBUFFERTOOSMALL is returned.

See Also:
   IBTAGEx_OnATCommand

===============================================================================
IBTAGEx_SendResponse

Description:
   Responds to the last received AT command.

Prototype:
   AEEResult IBTAGEx_SendResponse(
                IBTAGEx*       pMe, 
                const char*      pszRsp);

Parameters:
   pMe [i]        : the object
   pszRsp [i]     : response to the received AT command

Return Values:
   AEE_SUCCESS    : the response is on its way to remote device
   AEE_EBADPARM   : invalid input parameters
   AEE_EBADSTATE  : no response is expected

See Also:
   IBTAGEx_OnATCommand
   IBTAGEx_GetATCommand

===============================================================================
IBTAGEx_GetRemoteMicrophoneLevel

Description:
   Retrieves the current microphone gain level from remote device.

Prototype:
   AEEResult IBTAGEx_GetRemoteMicrophoneLevel(
                IBTAGEx*         pMe, 
                const BDAddress* pBDAddr, 
                uint8*           pLevel);

Parameters:
   pMe [i]        : the object
   pBDAddr [i]    : remote device's address
   pLevel [o]     : destination for microphone gain level

Return Values:
   AEE_SUCCESS    : microphone gain level successfully retrieved
   AEE_EBADPARM   : invalid input parameters
   AEE_EBADSTATE  : not connected to remote device

See Also:
   IBTAGEx_SetRemoteMicrophoneLevel

===============================================================================
IBTAGEx_GetRemoteMicrophoneLevel

Description:
   Sets the microphone gain level in remote device.

Prototype:
   AEEResult IBTAGEx_SetRemoteMicrophoneLevel(
                IBTAGEx*         pMe, 
                const BDAddress* pBDAddr, 
                uint8            level);

Parameters:
   pMe [i]        : the object
   pBDAddr [i]    : remote device's address
   level [i]      : the new microphone gain level

Return Values:
   AEE_SUCCESS    : the new microphone gain level is on its way to remote device
   AEE_EBADPARM   : invalid input parameters
   AEE_EBADSTATE  : not connected to remote device

Comments:
   Per Bluetooth specifications, volume level ranges from 0 to 15.

See Also:
   IBTAGEx_SetRemoteMicrophoneLevel

===============================================================================
IBTAGEx_SetMOSUsage

Description:
   Enables/disables Media-over-SCO.

Prototype:
   AEEResult IBTAGEx_SetMOSUsage(IBTAGEx* pMe, boolean bUse);

Parameters:
   pMe [i]      : the object
   bUse [i]     : TRUE to enable MOS; FALSE to disable

Return Values:
   always AEE_SUCCESS

==============================================================================
*/
#endif /* #ifndef AEEIBTAGEX_H */
