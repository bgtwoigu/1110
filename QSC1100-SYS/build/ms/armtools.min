#============================================================================
#
#  Description:
#    An includable component of the makefile to build the AMSS software for
#    the SURF (Subscriber Unit Reference Design)
#
#    This file specifies the items necessary to build the AMSS using the
#    ARM Cross Compiler Tools.
#
# Assumptions:
#   1. The ARM Cross Compiler Tools are in your path. You are responsbile to
#      PATH the compiler you intend to use properly. The version information
#      is output during the build.
#   2. Perl is available either locally or via the environment path.
#
# Copyright (c) 2004          by QUALCOMM, Incorporated.  All Rights Reserved.
#----------------------------------------------------------------------------
#============================================================================
#
#                        EDIT HISTORY FOR MODULE
#
# $Header: //depot/asic/qsc1100/build/ms/armtools.min#11 $
#
# when       who     what, where, why
# --------   ---     --------------------------------------------------------
# 07/28/05   wd      L4 Merge
# 09/23/04   ktr     Added Progressive Boot support.
# 06/03/04   jct     Merged in supression of echo of command line
# 12/09/03   jct     Linux support.  Inhibit archive and linker support.
# 10/11/02   jct     Remove veneers from map file output.  Removed $(PRAGMA).
#                    Removed incorrect comments
# 03/14/02   ssw     Initial version created from ads12.min
#============================================================================

#-------------------------------------------------------------------------------
# Build process output types
#-------------------------------------------------------------------------------

EXETYPE    = elf#               # Target image file format
PBN        = pbn#               # Progressive Boot Binary file extension

#===============================================================================
#                             TOOL DEFINITIONS
#===============================================================================
# The following environment variables must be defined prior to using this make
# file: ARMBIN, ARMLIB, and ARMINC. In addition the PATH must be updated for
# the ARM tools.

# Declared in environment for RVCT2.x, Default definition for ADS1.2

ARMTOOLS ?= ADS12

# RVCT arguments are prepended with the switch flag '--', where ADS12 arguments
# are prepended with the single '-' switch flag.

SWITCH    = $(if $(findstring RVCT,$(ARMTOOLS)),--,-)

#-------------------------------------------------------------------------------
# Software tool and environment definitions
#-------------------------------------------------------------------------------

ASM           = @armasm#            # ARM assembler
ARMCC         = @armcc#             # ARM ARM Mode ANSI C compiler
ARMCPP        = @armcpp#            # ARM ARM Mode ANSI C++ compiler
TCC           = @tcc#               # ARM Thumb Mode ANSI C compiler
TCPP          = @tcpp#              # ARM Thumb Mode ANSI C++ compiler

AS            = $(ASM)#             # Default Assembler
CC            = $(TCC)#             # Default Compiler (C)
CXX           = $(TCPP)#			# Default Compielr (C++)

ifeq ($(USES_NO_AR_LINK),yes)
ARMAR		  = @echo .#			# No command
LD			  = @echo .#			# No command
else
ARMAR	      = armar#				# ARM library archiver
LD            = armlink#			# ARM linker
endif

FROMELF		  = fromelf#			# ARM linker
HEXTOOL       = fromelf#			# ARM utility to create hex file from image
SCRAMPTOOL	  = scramp#				# Image Scrap Tool

OBJ_CMD       = -o#                 # Command line option to specify output filename
									# (depricate use of this)

#-------------------------------------------------------------------------------
# Processor architecture options
#-------------------------------------------------------------------------------

CPU = $(SWITCH)cpu ARM926EJ-S#

#-------------------------------------------------------------------------------
# ARM Procedure Call Standard (APCS) options
#-------------------------------------------------------------------------------

INTRWORK = interwork#				# ARM/Thumb interworking support
ROPI = noropi#						# Position Independent Code
RWPI = norwpi#						# Position Independent Data

ifeq ($(USES_STACKCHK),yes)
STACKCHK = swst#                    # Software stack checking support
else
STACKCHK = noswst#					# No software stack checking support
endif

APCS = $(SWITCH)apcs /$(INTRWORK)/$(ROPI)/$(RWPI)/$(STACKCHK)

ifeq ($(findstring ADS12,$(ARMTOOLS)),ADS12)
APCS += $(SWITCH)fpu softvfp#		# ADS12 Floating Point Options
endif

ifeq ($(findstring RVCT,$(ARMTOOLS)),RVCT)
APCS += $(SWITCH)fpmode fast#		# RVCT Floating Point Options
endif

#-------------------------------------------------------------------------------
# NOTE:
# If software stack checking support is enabled, FEATURE_STACK_CHECK must be
# #defined in the cust*.h file to enable the required common services support.
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Compiler output options
#-------------------------------------------------------------------------------

OUT = -c#                           # Object file output only
									# (depricate use of this)

#-------------------------------------------------------------------------------
# Compiler/assembler debug options
#-------------------------------------------------------------------------------

ifeq ($(USES_NO_DEBUG),yes)
  DBG = # NULL					# Possible to eliminate at link time
else
  DBG = -g $(SWITCH)dwarf2#			# Enable DWARF2 format debug tables
endif

#-------------------------------------------------------------------------------
# Compiler optimization options
#-------------------------------------------------------------------------------

ifeq ($(findstring ADS12,$(ARMTOOLS)),ADS12)
#OPT = -O2 -Otime#					# Default Compiler optimization for time
OPT = -O2 -Ospace#					# Default Compiler optimization for space
endif

ifeq ($(findstring RVCT,$(ARMTOOLS)),RVCT)
#OPT = -O1 -Otime#					# Default Compiler optimization for time
OPT = -O1 -Ospace#					# Default Compilers optimization for space
endif

#-------------------------------------------------------------------------------
# Compiler code generation options
#-------------------------------------------------------------------------------

CODE = $(SWITCH)littleend#			# Compile for little endian memory architecture

ifeq ($(findstring ADS12,$(ARMTOOLS)),ADS12)
#CODE += $(SWITCH)Ono_inline#		# No inline of code
#CODE += $(SWITCH)Ono_autoinline#	# No inline of code
CODE += $(SWITCH)zo#				# Functions are discrete link units
CODE += $(SWITCH)Odata_reorder#		# Top level data reordering optimization
endif

ifeq ($(findstring RVCT,$(ARMTOOLS)),RVCT)
CODE += $(SWITCH)no_inline#			# No inline of code
CODE += $(SWITCH)no_autoinline#		# No inline of code
CODE += $(SWITCH)split_sections#	# Functions are discrete link units
CODE += $(SWITCH)data_reorder#		# Top level data reordering optimization
#CODE += $(SWITCH)lower_ropi#		# C/C++ Constructor Inits
#CODE += $(SWITCH)lower_rwpi#		# C/C++ Constructor Inits
endif

#-------------------------------------------------------------------------------
# Compiler error and warning message control options
#-------------------------------------------------------------------------------

NO_MSG = -W#						# No warnings

ifeq ($(findstring ADS12,$(ARMTOOLS)),ADS12)
MSG = $(SWITCH)Wb#					# No warnings for bit fields (Ignore ANSI C Warning)
endif

ifeq ($(findstring RVCT,$(ARMTOOLS)),RVCT)
MSG = # NULL						# Nothing
endif

#-------------------------------------------------------------------------------
# Additional compile time error checking options
#-------------------------------------------------------------------------------

ifeq ($(findstring ADS12,$(ARMTOOLS)),ADS12)
CHK = $(SWITCH)fa#                      # Check for data flow anomolies
endif

#-------------------------------------------------------------------------------
# Assembler flag definitions
#-------------------------------------------------------------------------------

AFLAGS = $(CPU) $(APCS) $(DBG)

#-------------------------------------------------------------------------------
# Compiler flag definitions
#-------------------------------------------------------------------------------

CFLAGS = $(AFLAGS) $(CODE) $(CHK) $(MSG) $(OPT) $(OUT)

#-------------------------------------------------------------------------------
# Linker Flags
#-------------------------------------------------------------------------------

LFLAGS  = $(SWITCH)map#                 # Memory map of all object file areas
LFLAGS += $(SWITCH)list $(TARGET).map#  # Direct map and info output to file
LFLAGS += $(SWITCH)symbols#			    # Symbols in list file
LFLAGS += $(SWITCH)symdefs $(TARGET).sym# # Direct symbol table to file
LFLAGS += $(SWITCH)scatter $(SCLFILE)#	# Use scatter load description file
#LFLAGS += $(SWITCH)verbose#            # Print verbose output messages
#LFLAGS += $(SWITCH)scanlib#            # Search Standard Libraries
#LFLAGS += $(SWITCH)libpath $(ARMLIB)#	# Compiler Provided Library Path

ifeq ($(findstring ADS12,$(ARMTOOLS)),ADS12)
LFLAGS += $(SWITCH)info sizes,totals,veneers,unused#
endif

ifeq ($(findstring RVCT,$(ARMTOOLS)),RVCT)
LFLAGS += $(SWITCH)info common,debug,inline,sizes,tailreorder,totals,veneers,unused,exceptions#
endif

ifeq ($(USES_NO_DEBUG),yes)
LFLAGS += $(SWITCH)nodebug#				# Include NO Symbolic Debug Information
endif

ifeq ($(USES_CLEAN_REMOVE),yes)
LFLAGS += $(SWITCH)remove#				# Remove Unreferenced Code and Data
else
LFLAGS += $(SWITCH)noremove#			# Unreferenced Code and Data Remains
endif

KEEP = $(SWITCH)keep#
KEEP_FLAGS = $(addprefix $(KEEP) , $(KEEP_OBJECTS))
LFLAGS += $(KEEP_FLAGS)

#LFLAGS += $(SWITCH)keep pattern1#		# Instruct linker to retain
#LFLAGS += $(SWITCH)keep pattern2#		# Instruct linker to retain

#-------------------------------------------------------------------------------
# Tools target definitions (used to echo tool information)
#-------------------------------------------------------------------------------

ARM_VERSION_BANNER = ARM TOOL VERSION
VER_FLAG = $(shell $(CC) $(SWITCH)vsn)
