#============================================================================
#  Name:
#    xmod_arm.min
#
#  Description:
#    Makefile to build the an xmod downloadable module.
#
# Assumptions:
#   1. Compiler-specific definitions are defined separately in an
#      xmod_$(TARGET).min file
#   2. The BREW sdk include files are installed in $(BREWDIR)/inc
#   3. BREWDIR is defined, and points to the installed location of the 
#      BREW SDK.  Optionally, you can install your app directories next 
#      to the inc directory of the BREW SDK.
#   4. The variable MODNAME below has be set to the proper base name of the
#      module being built
#
#        Copyright © 2000-2007 QUALCOMM Incorporated.
#               All Rights Reserved.
#            QUALCOMM Proprietary/GTDR
#
#----------------------------------------------------------------------------
#============================================================================

#----------------------------------------------------------------------------
# Target file name and type and path definitions
#----------------------------------------------------------------------------

ifndef MODDIR
  MODDIR=mod
endif

ifndef LIBDIR
  LIBDIR=lib
endif

# Our clean target is modname- and target-agnostic
ifneq ($(MAKECMDGOALS),clean)

ifndef MODNAME
$(error MODNAME is undefined!)
endif

ifndef TARGET
$(error TARGET is undefined!)
endif


#----------------------------------------------------------------------------
# Compiler-specific definitons.
#
# Sets the compiler tools depending on the TARGET option selected
#----------------------------------------------------------------------------
ifeq ($(TARGET),ADS12_ARM7)
  include $(XMODDIR)/defines_ads12.min
else
  ifeq ($(TARGET),RVCT21_ARM9)
    include $(XMODDIR)/defines_rvct21.min
  else
    $(error Invalid TARGET selected! The following are valid options:\
    ADS12_ARM7, RVCT21_ARM9)
  endif
endif

endif #ifneq clean


#----------------------------------------------------------------------------
#----------------------------------------------------------------------------
# Software tool and environment definitions
#----------------------------------------------------------------------------
#----------------------------------------------------------------------------

MKDIR=mkdir

#----------------------------------------------------------------------------
#  where objects go
#----------------------------------------------------------------------------
MODOBJ=$(MODDIR)/$(TARGET)/objs
LIBOBJ=$(LIBDIR)/$(TARGET)/objs

OBJDIR=$(MODOBJ)
ifdef STATIC
  OBJDIR=$(LIBOBJ)
  DEFINES += -DAEE_STATIC
endif

 
#----------------------------------------------------------------------------
#  define what goes into target
#----------------------------------------------------------------------------
OBJS = $(notdir $(MODOBJS) xmodstub.o xmodimpl.o)
OBJS := $(addprefix $(OBJDIR)/,$(OBJS))

LIBS = $(MODLIBS)

MODOUT=$(MODDIR)/$(TARGET)/$(MODNAME).mod
ELFOUT=$(MODDIR)/$(TARGET)/$(MODNAME).elf
AROUT =$(MODDIR)/$(TARGET)/$(MODNAME).a
LIBOUT=$(LIBDIR)/$(TARGET)/$(MODNAME)_arm.lib

#----------------------------------------------------------------------------
# Default target
#----------------------------------------------------------------------------

all : $(MODOUT) $(LIBOUT)

#----------------------------------------------------------------------------
# Clean target
#----------------------------------------------------------------------------

# The object subdirectory, target image file, and target hex file are deleted.

clean :
	@echo ---------------------------------------------------------------
	@echo CLEAN
	-rm -rf $(LIBDIR)
	-rm -rf $(MODDIR)
	$(XMOD_CLEAN_CMDS)
	@echo ---------------------------------------------------------------

#============================================================================
#                           DEFAULT SUFFIX RULES
#============================================================================

# The following are the default suffix rules used to compile all objects that
# are not specifically included in one of the module specific rules defined
# in the next section.

# The following macros are used to specify the output object file, MSG_FILE
# symbol definition and input source file on the compile line in the rules
# defined below.

.SUFFIXES :
.SUFFIXES : .o .c .cpp

VPATH = $(XMODDIR):$(MODVPATH)

#----------------------------------------------------------------------------
# C RULES
#----------------------------------------------------------------------------

$(OBJDIR)/%.o: %.c
	@echo ---------------------------------------------------------------
	@echo OBJECT $@
	@if [ ! -d $(OBJDIR) ] ; \
		then $(MKDIR) -p $(OBJDIR) ; \
	fi
	$(TCC) $(CFLAGS) -o $@ -c $(subst \,/,$<)
	$(XMOD_POSTCC_CMDS)
	@echo ---------------------------------------------------------------

$(OBJDIR)/%.o: %.cpp
	@echo ---------------------------------------------------------------
	@echo OBJECT $@
	@if [ ! -d $(OBJDIR) ] ; \
		then $(MKDIR) -p $(OBJDIR) ; \
	fi
	$(TCPP) $(CFLAGS) -o $@ -c $<
	$(XMOD_POSTCC_CMDS)
	@echo ---------------------------------------------------------------

# build xmodstub in ARM mode
$(OBJDIR)/xmodstub.o: xmodstub.c
	@echo ---------------------------------------------------------------
	@echo OBJECT $@
	@if [ ! -d $(OBJDIR) ] ; \
		then $(MKDIR) -p $(OBJDIR) ; \
	fi
	$(ARMCC) $(CFLAGS) -o $@ -c $(subst \,/,$<)
	@echo ---------------------------------------------------------------


#============================================================================
#                              MODULE RULES
#============================================================================

$(MODOUT): $(ELFOUT)
	@echo ---------------------------------------------------------------
	@echo ELF $@
	@mkdir -p $(@D)
	$(FROMELF) -bin -o $@ $<

$(ELFOUT): $(OBJS)
	@echo ---------------------------------------------------------------
	@echo BREW MODULE $@
	@mkdir -p $(@D)
	$(LD) -o $@ $(LFLAGS) $(OBJS)
	$(XMOD_POSTELF_CMDS)	

$(AROUT): $(OBJS)
	@echo ---------------------------------------------------------------
	@echo BREW ARCHIVE $@
	@mkdir -p $(@D)
	$(ARMAR) -r $@ $(OBJS)

ifndef BREWPK
$(LIBOUT):
	@echo ---------------------------------------------------------------
	@echo BREW LIB $@
	@echo Note: Library build skipped: BREWPK is not defined
else
$(LIBOUT): $(OBJS)
	@echo ---------------------------------------------------------------
	@echo BREW LIB $@
	@mkdir -p $(@D)
	$(ARMAR) -r $@ $(OBJS)
endif

