#============================================================================
#  Name:
#    DBL_RULES.MIN
#
#  Description:
#    An includable component of the makefile to build the DBL software.
#    This file specifies the make file rules that are common across all
#    targets and makefiles
#
# Copyright (c) 2007, 2008 by QUALCOMM, Incorporated.  All Rights Reserved.
#----------------------------------------------------------------------------
#============================================================================
#
#		      EDIT HISTORY FOR MODULE
#
# $Header: //depot/asic/msmshared/secboot2/sbl/dbl/1_0/dbl_rules.min#4 $
#
# when       who     what, where, why
# -------    ---     --------------------------------------------------------
# 04/10/08   PS      Added LINKOBJS_PATH to relocate compiler/linker output 
#                    files in different directory other than current directory
# 02/22/08   MJS     Add libraries as prerequisites for DBL.
# 07/30/07   ANB     Initial version.
#============================================================================


#============================================================================
# LINKOBJS_PATH should have been defined in DBL.mak file. If not defined, we
# default it here to current directory.
#============================================================================
ifndef LINKOBJS_PATH
  LINKOBJS_PATH = .
endif

#===============================================================================
#                        TARGET RULES
#===============================================================================

# The following are the target rules supported by this makefile.

#-------------------------------------------------------------------------------
# Default target
#-------------------------------------------------------------------------------

# The default target lists the tool versions, creates an object subdirectory
# if required, and builds the target image file and binary file.  The mobile
# object includes the compile date and time and is deleted after each build
# to ensure that it will always be rebuilt to include accurate build date and
# time information.

all : test tools linting libs $(TARGETDIR)/exist exe depend bin
#all : tools libs $(TARGETDIR)/exist exe bin

libs : $(LIBDIR)/exist $(DBL_LIBS)

#-------------------------------------------------------------------------------
# Object directory target
#-------------------------------------------------------------------------------

# The object subdirectoy is created if it does not already exist.

$(TARGETDIR)/exist :
	@if test ! -d $(TARGETDIR); then mkdir $(TARGETDIR); fi
	@echo Building $(TARGETDIR) > $(TARGETDIR)/exist

#-------------------------------------------------------------------------------
# Library directory target
#-------------------------------------------------------------------------------

# The library subdirectoy is created if it does not already exist.

$(LIBDIR)/exist : $(TARGETDIR)/exist
	@if test ! -d $(LIBDIR); then mkdir $(LIBDIR); fi
	@echo Building Common Libraries > $(LIBDIR)/exist

#-------------------------------------------------------------------------------
# Object directory for linting
#-------------------------------------------------------------------------------
linting : $(LINTDIR)/exist

$(LINTDIR)/exist :
ifeq ($(ENABLE_LINT),yes)
	@if test ! -d $(LINTDIR); then mkdir $(LINTDIR); fi
	@echo Building $(LINTDIR) > $(LINTDIR)/exist
endif

#-------------------------------------------------------------------------------
# Image file target
#-------------------------------------------------------------------------------

# The target image file is produced by the linker in the selected image format,
# and then a binary file is created from the target image file.

OBJECT_LISTFILE = $(LINKOBJS_PATH)/dbl_objects_$(BUILD).txt
EXE_FILENAME = $(LINKOBJS_PATH)/$(TARGET).$(EXETYPE)
BIN_FILENAME = $(LINKOBJS_PATH)/$(TARGET).mbn
   
# Image file
exe : $(EXE_FILENAME)
   
$(EXE_FILENAME) : $(TARGETDIR)/exist $(OBJECTS) $(DBL_LIBS)
	@echo ---------------------------------------------------------------
	@echo TARGET $(LD) $@
	-@if [ -f $(OBJECT_LISTFILE) ]; then rm -f $(OBJECT_LISTFILE); fi
	@perl $(REDIRECT_SCRIPT) $(OBJECT_LISTFILE) $(OBJECTS)
	@$(CC) -E $(CUSTH) $(SCL_FLAGS) $(ALL_INCLUDES) $(SCLFILE_IN) > $(SCLFILE)
	$(LD) $(LFLAGS) $(OBJ_CMD) $@ $(LIBS) $(DBL_LIBS) $(VIA) $(OBJECT_LISTFILE)
	@echo ---------------------------------------------------------------

# Binary file and header

bin : $(BIN_FILENAME)

$(BIN_FILENAME) : $(EXE_FILENAME)
	@echo ---------------------------------------------------------------
	@echo TARGET $(BIN_FILENAME)
	$(BINCMD)
	@echo ---------------------------------------------------------------

#-------------------------------------------------------------------------------
# Clean target
#-------------------------------------------------------------------------------

# The object subdirectory, target image file, and target binary file are deleted.

clean :
	@echo ---------------------------------------------------------------
	@echo CLEAN
	-if test -d $(TARGETDIR); then rm -f $(TARGETDIR)/*.*; fi
# Prevent the lib directory from being erased if the libraries 
# will not be regenerated.
ifdef LIBRARIES
	-if test -d $(LIBDIR); then rm -f $(LIBDIR)/*.*; fi
	-if test -d $(LIBDIR); then rm -rf $(LIBDIR); fi
endif
	-if test -d $(TARGETDIR); then rm -rf $(TARGETDIR); fi
	-if test -d $(LINTDIR); then rm -rf $(LINTDIR); fi
	-if test -f $(EXE_FILENAME); then rm -f $(EXE_FILENAME); fi
	-if test -f $(BIN_FILENAME); then rm -f $(BIN_FILENAME); fi
	-if test -f $(LINKOBJS_PATH)/$(TARGET).map; then rm -f $(LINKOBJS_PATH)/$(TARGET).map; fi
	-if test -f $(LINKOBJS_PATH)/$(TARGET).sym; then rm -f $(LINKOBJS_PATH)/$(TARGET).sym; fi
	-if test -f $(SCLFILE); then rm -f $(SCLFILE); fi
	-if test -f $(DEPFILE_NAME); then rm -f $(DEPFILE_NAME); fi
	-if test -f $(OBJECT_LISTFILE); then rm -f $(OBJECT_LISTFILE); fi
	@echo ---------------------------------------------------------------

#-------------------------------------------------------------------------------
# Test target
#-------------------------------------------------------------------------------

# The flags and symbol definitions for the compiler, assembler and linker are
# listed for makefile test purposes.

test :
	@echo ------------------------------------------------------------------
	@echo AFLAGS : $(AFLAGS)
	@echo ------------------------------------------------------------------
	@echo DMSS_AFLAGS : $(DMSS_AFLAGS)
	@echo ------------------------------------------------------------------
	@echo CFLAGS : $(CFLAGS)
	@echo ------------------------------------------------------------------
	@echo DMSS_CFLAGS : $(DMSS_CFLAGS)
	@echo ------------------------------------------------------------------
	@echo LFLAGS : $(LFLAGS)
	@echo ------------------------------------------------------------------
	@echo LIBS : $(LIBS)
	@echo ------------------------------------------------------------------
	@echo PATH $(ALL_INCLUDES)
	@echo ------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Tools target
#-------------------------------------------------------------------------------

# The tool versions are listed.

tools :
	@echo ------------------------------------------------------------------
	@echo $(ARM_VERSION_BANNER)
	@echo ------------------------------------------------------------------
	@$(ARMCC) $(VER_FLAG)
	@echo ------------------------------------------------------------------
	@$(CC)    $(VER_FLAG)
	@echo ------------------------------------------------------------------
	@$(LD)    $(VER_FLAG)
	@echo ------------------------------------------------------------------
	@$(ASM)  $(VER_FLAG)

#===============================================================================
#			 DEFAULT SUFFIX RULES
#===============================================================================

# The following are the default suffix rules used to compile all objects that
# are not specifically included in one of the module specific rules defined
# in the next section.

# The following macros are used to specify the output object file, MSG_FILE
# symbol definition and input source file on the compile line in the rules
# defined below.
SRC_FILE = $(@:%.o=%.c)#			Input source file specification
OBJ_FILE = $(OBJ_CMD) $(@)#	       Output obj file specification
SRC_CFILE= $(notdir $(SRC_FILE))#	     C File of src without directory
MSG_FILE = -DMSG_FILE=\"$(SRC_CFILE)\"#  MSG_FILE symbol definition
VPATH = .:$(TARGETDIR)#

#-------------------------------------------------------------------------------
# For single C code reference rules; We remove .o file after we test compilation.
#-------------------------------------------------------------------------------
%.o: %.c
	@echo ------------------------------------------------------------------------
	@echo OBJECT $@
	$(ARMCC) $(CFLAGS) $(DMSS_CFLAGS) $(ALL_INCLUDES) $(TG) $(MSG_FILE) $(OBJ_CMD) $@ $<
	@if test -f $(@); then rm -f $(@); fi
ifeq ($(ENABLE_LINT),yes)
	$(LINT_PATH) $(LINT_CONFIG_FILE) $(LINT_CFLAGS) $(ALL_INCLUDES) $(LINT_INLCUDE) $< > $(LINTDIR)/$*.lint
endif 
	@echo ------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# C code inference rules
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
# We use ARMCC for Boot Code. 
#-------------------------------------------------------------------------------
$(TARGETDIR)/%.o: %.c
	@echo ------------------------------------------------------------------------
	@echo OBJECT $@
	$(ARMCC) $(CFLAGS) $(DMSS_CFLAGS) $(ALL_INCLUDES) $(TG) $(MSG_FILE) $(OBJ_CMD) $@ $<
ifeq ($(ENABLE_LINT),yes)
	$(LINT_PATH) $(LINT_CONFIG_FILE) $(LINT_CFLAGS) $(ALL_INCLUDES) $(LINT_INLCUDE) $< > $(LINTDIR)/$*.lint
endif 
	@echo ------------------------------------------------------------------------
#-------------------------------------------------------------------------------
# We use ARMCC for Libraries Code. 
#-------------------------------------------------------------------------------
$(LIBDIR)/%.o: %.c
	@echo ------------------------------------------------------------------------
	@echo OBJECT $@
	$(ARMCC) $(CFLAGS) $(DMSS_CFLAGS) $(ALL_INCLUDES) $(TG) $(MSG_FILE) $(OBJ_CMD) $@ $<
ifeq ($(ENABLE_LINT),yes)
	$(LINT_PATH) $(LINT_CONFIG_FILE) $(LINT_CFLAGS) $(ALL_INCLUDES) $(LINT_INLCUDE) $< > $(LINTDIR)/$*.lint
endif 
	@echo ------------------------------------------------------------------------
#-------------------------------------------------------------------------------
# Assembly code inference rules
#-------------------------------------------------------------------------------

$(TARGETDIR)/%.o %.o: %.s
	@echo ------------------------------------------------------------------------
	@echo OBJECT $@
	$(ARMCC) -E $(DMSS_AFLAGS) $(TG) $(ALL_INCLUDES) < $< | perl $(ASM_SCRIPT) - > $(TARGETDIR)/$*.i
	$(ASM) $(AFLAGS) $(LIST) $(TARGETDIR)/$*.lst $(TARGETDIR)/$*.i $(OBJ_CMD) $@
# This command is for generating dependencies based on .asm files.
	$(ARMCC) $(CFLAGS) $(DMSS_AFLAGS) $(ALL_INCLUDES) -E < $< | perl $(GETDEP_SCRIPT) $(basename $@).o $< > $(TARGETDIR)/$*.dep
#ifeq ($(ENABLE_LINT),yes)
#	$(LINT_PATH) $(LINT_CONFIG_FILE) $(LINT_AFLAGS) $(ALL_INCLUDES) $(LINT_INLCUDE) $< > $(LINTDIR)/$*.lint
#endif 
	@echo ------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Mixed source/assembly inference rule
#-------------------------------------------------------------------------------

%.mix: %.c
	@echo ------------------------------------------------------------------------
	@echo OBJECT $@ CV
	$(ARMCC) -S $(INTL) $(CFLAGS) $(DMSS_CFLAGS) $(TG) -DMSG_FILE=\"$<\" $(OBJ_CMD) $@ $<
ifeq ($(ENABLE_LINT),yes)
	$(LINT_PATH) $(LINT_CONFIG_FILE) $(LINT_CFLAGS) $(ALL_INCLUDES) $(LINT_INLCUDE) $< > $(LINTDIR)/$*.lint
endif 
	@echo ------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Mixed source/assembly inference rule
#-------------------------------------------------------------------------------

%.mix: %.c
	@echo -----------------------------------------------------------------
	@echo OBJECT $@ CV
	$(ARMCC) -S $(INTL) $(CFLAGS) $(DMSS_CFLAGS) $(ALL_INCLUDES) $(TG) -DMSG_FILE=\"$<\" $(OBJ_CMD) $@ $<
ifeq ($(ENABLE_LINT),yes)
	$(LINT_PATH) $(LINT_CONFIG_FILE) $(LINT_CFLAGS) $(ALL_INCLUDES) $(LINT_INLCUDE) $< > $(LINTDIR)/$*.lint
endif 
	@echo -----------------------------------------------------------------

#===============================================================================
#                                 DEPENDENCIES
#===============================================================================

# The dependencies are included at the end of this makefile can be automatically
# updated by making the 'depend' target to invoke the following rules.

DEPFILE = $(TARGET)_depend
DEPFILE_NAME   = $(LINKOBJS_PATH)/$(DEPFILE).dep
DEPFILE_TMP    = $(LINKOBJS_PATH)/$(DEPFILE).tmp

.SUFFIXES: .s .o .c .dep

ifdef EXT
depend:
	@echo The depend target is not supported when and extension (EXT=$(EXT)) is specified
else
depend: $(TARGETDIR)/exist force.frc $(DEPFILE_NAME)
	@echo ---------------------------------------------------------------
	@echo Updating Dependency File
	@echo $(MDEPEND_SCRIPT) $(DEPFILE_NAME) $(TARGETDIR) $(LIBDIR) ">" $(DEPFILE_TMP)
	@perl $(MDEPEND_SCRIPT) $(DEPFILE_NAME) $(TARGETDIR) $(LIBDIR) > $(DEPFILE_TMP)
	@mv $(DEPFILE_TMP) $(DEPFILE_NAME)
	@rm -f $(DEPFILE_TMP)
	@echo ---------------------------------------------------------------
endif

$(DEPFILE_NAME):
	@echo " "
	@echo "Creating $@"
	@echo " "
	@echo "# ------------------------------" > $@
	@echo "# DO NOT EDIT BELOW THIS LINE" >> $@

force.frc:

sources:

-include $(DEPFILE_NAME)
