


ARM Macro Assembler    Page 1 


    1 00000000         ; 
    2 00000000         ; 
    3 00000000         ; 
    4 00000000         ; CPSR Control Masks 
    5 00000000 00000040 
                       PSR_Fiq_Mask
                               EQU     0x40
    6 00000000 00000080 
                       PSR_Irq_Mask
                               EQU     0x80
    7 00000000         ; Processor mode definitions 
    8 00000000 00000013 
                       PSR_Supervisor
                               EQU     0x13
    9 00000000         ; 
   10 00000000         ; Stack sizes
   11 00000000 00001000 
                       SVC_Stack_Size
                               EQU     0x1000
   12 00000000         ; 
   13 00000000                 IMPORT  main_c
   14 00000000                 IMPORT  svc_stack
   15 00000000                 IMPORT  memory_init
   16 00000000                 IMPORT  zero_init_needed
   17 00000000                 EXPORT  __main
   18 00000000                 PRESERVE8           ; This module preserves 8 by
                                                   te stack alignment
   19 00000000                 AREA    StartHere, CODE, READONLY
   20 00000000                 CODE32
   21 00000000         __main
   22 00000000                 ENTRY
   23 00000000         ;
   24 00000000         ;
   25 00000000         ;
   26 00000000         ;
   27 00000000         ;
   28 00000000         ;
   29 00000000         ;
   30 00000000         ;
   31 00000000         ;
   32 00000000         ;
   33 00000000         ;
   34 00000000         ;
   35 00000000         ;
   36 00000000         ;
   37 00000000         ;
   38 00000000         ;
   39 00000000         ;                                        
   40 00000000                 MACRO
   41 00000000                 blatox  $destreg
   42 00000000                 ROUT
   43 00000000                 tst     $destreg, #0x01 ;
   44 00000000                 ldrne   lr, =%1
   45 00000000                 ldreq   lr, =%2
   46 00000000                 bx      $destreg
   47 00000000         1
   48 00000000                 CODE16
   49 00000000                 bx      pc
   50 00000000                 ALIGN



ARM Macro Assembler    Page 2 


   51 00000000                 CODE32
   52 00000000         2
   53 00000000                 MEND
   54 00000000         ;=======================================================
                       ================
   55 00000000         ; MACRO mmu_set_default_cfg
   56 00000000         ; ARGS
   57 00000000         ;   NONE
   58 00000000         ; DESCRIPTION
   59 00000000         ;   Sets a default value into the mmu control register
   60 00000000         ;   we do not really need to do this, but we do it to
   61 00000000         ;   know exactly the state of the processor
   62 00000000         ;=======================================================
                       ================
   63 00000000                 MACRO
   64 00000000                 mmu_set_default_cfg
   65 00000000                 ldr     r0, = 0x00050078
   66 00000000                 MCR     p15, 0, r0, c1, c0, 0
   67 00000000                 MEND
   68 00000000         ;=======================================================
                       ================
   69 00000000         ;=======================================================
                       ================
   70 00000000         ; MACRO mmu_enable_i_cache
   71 00000000         ; ARGS
   72 00000000         ;  NONE
   73 00000000         ; DESCRIPTION
   74 00000000         ;  Enables the I Cache
   75 00000000         ;  Does a read modify write, so no other bits in the con
                       trol register a
   76 00000000         ;  affected
   77 00000000         ;=======================================================
                       ================
   78 00000000                 MACRO
   79 00000000                 mmu_enable_i_cache
   80 00000000                 mrc     p15, 0 , r0, c1, c0, 0
   81 00000000                 orr     r0, r0, # (1 << 12 )
   82 00000000                 mcr     p15, 0 , r0, c1, c0, 0
   83 00000000                 MEND
   84 00000000         ;=======================================================
                       ================
   85 00000000         ; 
   86 00000000         ; Supervisor Mode
   87 00000000         ; Set up the Supervisor stack pointer.
   88 00000000 E321F0D3        msr     CPSR_c, #PSR_Supervisor:OR:PSR_Irq_Mask:
OR:PSR_Fiq_Mask
   89 00000004 E59FD0A0        ldr     r13, =svc_stack+SVC_Stack_Size
   90 00000008         ; ======================================================
                       ================
   91 00000008         ; Enable the instruction cache
   92 00000008         ; ======================================================
                       ================
   93 00000008                 mmu_set_default_cfg
   65 00000008 E59F00A0        ldr     r0, = 0x00050078
   66 0000000C EE010F10        MCR     p15, 0, r0, c1, c0, 0
   94 00000010                 mmu_enable_i_cache
   80 00000010 EE110F10        mrc     p15, 0 , r0, c1, c0, 0
   81 00000014 E3800D40        orr     r0, r0, # (1 << 12 )
   82 00000018 EE010F10        mcr     p15, 0 , r0, c1, c0, 0



ARM Macro Assembler    Page 3 


   95 0000001C         ; ======================================================
                       ================
   96 0000001C         ; Initialize memory for C only once
   97 0000001C         ;   The test/set of the global variable must be done her
                       e in assembly
   98 0000001C         ;   because if we access a global variable in the C func
                       tion, the
   99 0000001C         ;   compiler will construct a PUSH/POP of registers and 
                       since we will
  100 0000001C         ;   have just zeroed the stack, we will pop zero into R1
                       4 and then
  101 0000001C         ;   branch to zero.  With no use of globals in the C fun
                       ction,
  102 0000001C         ;   the compiler will generate a bx r14 for the return a
                       nd all will
  103 0000001C         ;   work correctly.
  104 0000001C         ; ======================================================
                       ================
  105 0000001C E59F2090        ldr     r2, =zero_init_needed
  106 00000020 E5921000        ldr     r1, [r2]
  107 00000024 E3510000        cmp     r1, #0x0
  108 00000028 0AFFFFFE        beq     skipmem
  109 0000002C E59F0084        ldr     a1, =memory_init
  110 00000030                 blatox  a1
   42 00000030                 ROUT
   43 00000030 E3100001        tst     a1, #0x01   ;
   44 00000034 159FE080        ldrne   lr, =%1
   45 00000038 059FE080        ldreq   lr, =%2
   46 0000003C E12FFF10        bx      a1
   47 00000040         1
   48 00000040                 CODE16
   49 00000040 00004778        bx      pc
   50 00000042 00 00           ALIGN
   51 00000044                 CODE32
   52 00000044         2
  111 00000044         ; indicate zero init completed
  112 00000044 E59F2068        ldr     r2, =zero_init_needed
  113 00000048 E3A00000        mov     r0, #0x0
  114 0000004C E5820000        str     r0, [r2]
  115 00000050         ; Enter C code execution
  116 00000050         skipmem
  117 00000050 E59F006C        ldr     a1, =main_c
  118 00000054                 blatox  a1
   42 00000054                 ROUT
   43 00000054 E3100001        tst     a1, #0x01   ;
   44 00000058 159FE068        ldrne   lr, =%1
   45 0000005C 059FE068        ldreq   lr, =%2
   46 00000060 E12FFF10        bx      a1
   47 00000064         1
   48 00000064                 CODE16
   49 00000064 00004778        bx      pc
   50 00000066 00 00           ALIGN
   51 00000068                 CODE32
   52 00000068         2
  119 00000068         ; Software breakpoint code
  120 00000068         ; TRACE32 requires this so that we can hand back the con
                       trol to TRACE32
  121 00000068         ; Debugger when main_c returns
  122 00000068 EEDEEEDE 



ARM Macro Assembler    Page 4 


                       swbp    DCD     0xEEDEEEDE
  123 0000006C         ; Terminal emulation entry point for putting a character
                       .
  124 0000006C         ; When called, it will put or get a charactr from the
  125 0000006C         ; JTAG debugger terminal emulation window.  These functi
                       on
  126 0000006C         ; are incompatible with the JTAG debugger FLASH.* functi
                       ons
  127 0000006C         ; and will cause the debugger to hang if both are used.
  128 0000006C                 CODE16
  129 0000006C                 EXPORT  term_put
  130 0000006C                 ALIGN
  131 0000006C         term_put
  132 0000006C 00004778        bx      pc
  133 0000006E 00 00           DCW     0x0         ; Literal to align next inst
                                                   ruction to word boundary
  134 00000070         ; to avoid compiler warning
  135 00000070                 CODE32
  136 00000070                 ALIGN
  137 00000070         term_put_arm
  138 00000070 E3A02002        mov     r2, #2
  139 00000074         put_again
  140 00000074 EE101E10        mrc     p14, 0, r1, c0, c0
  141 00000078 E0011002        and     r1, r1, r2
  142 0000007C E3510000        cmp     r1, #0
  143 00000080 1AFFFFFE        bne     put_again
  144 00000084 EE010E10        mcr     p14, 0, r0, c1, c0
  145 00000088 E12FFF1E        bx      lr
  146 0000008C         ; Get terminal character.
  147 0000008C                 CODE16
  148 0000008C                 EXPORT  term_get
  149 0000008C                 ALIGN
  150 0000008C         term_get
  151 0000008C 00004778        bx      pc
  152 0000008E 00 00           DCW     0x0         ; Literal to align next inst
                                                   ruction to word boundary
  153 00000090                 CODE32
  154 00000090                 ALIGN
  155 00000090         term_get_arm
  156 00000090 E3A02001        mov     r2, #1
  157 00000094         get_again
  158 00000094 EE101E10        mrc     p14, 0, r1, c0, c0
  159 00000098 E0011002        and     r1, r1, r2
  160 0000009C E3510000        cmp     r1, #0
  161 000000A0 0AFFFFFE        beq     get_again
  162 000000A4 EE110E10        mrc     p14, 0, r0, c1, c0
  163 000000A8 E12FFF1E        bx      lr
  164 000000AC                 END
              00001000 
              00050078 
              00000000 
              00000000 
              00000040 
              00000044 
              00000000 
              00000064 
              00000068 
Command Line: [C:\ARM\ADSV1_2\bin\armasm.exe -list ./jflash/jfstart.lst -g -apc
s /interwork -cpu ARM926EJ-S]
