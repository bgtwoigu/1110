/*===========================================================================

                        EDIT HISTORY FOR MODULE

  This section contains comments describing changes made to the module.
  Notice that changes are listed in reverse chronological order.

$Header: //source/qcom/qct/wconnect/bthost/pf/rel/00.00.26/src/oi_bpp_private.h#1 $ 

$Log: $
*
*    #5        09 Oct 2008            AP
* Fixed Critical Errs generated by superlint.
*
*    #4        18 Oct 2006            PR
* Merged OI Code v3.0.14rev1revQ
*
*    #3        19 Apr 2005            GS
* Modified ADD_BODY_HEADER macro so that empty End-of-body header is sent in 
* the final OBEX packet (needed for interop'ing with HP Printers)
*

===========================================================================*/
/** @file 
 * @internal 
 * Basic Printing Profile private functions and definitions
 */

/** \addtogroup BPP_Internal */
/**@{*/

/**********************************************************************************
  $Revision: #1 $
  Copyright 2002 - 2003 Open Interface North America, Inc. All rights reserved.
***********************************************************************************/

#ifndef _OI_BPP_PRIVATE_H
#define _OI_BPP_PRIVATE_H

#include "oi_bpp.h"
#include "oi_bpp_printer.h"

#define BPP_OBEX_APP_PARAM_TAG_OFFSET 1
#define BPP_OBEX_APP_PARAM_TAG_COUNT 2
#define BPP_OBEX_APP_PARAM_TAG_JOBID 3
#define BPP_OBEX_APP_PARAM_TAG_FILESIZE 4

extern const OI_OBEX_BYTESEQ OI_BPP_ObexTarget_DPS;
extern const OI_OBEX_BYTESEQ OI_BPP_ObexTarget_PBR;
extern const OI_OBEX_BYTESEQ OI_BPP_ObexTarget_RUI;
extern const OI_OBEX_BYTESEQ OI_BPP_ObexTarget_STS;
extern const OI_OBEX_BYTESEQ OI_BPP_ObexTarget_OBJ;

#define BPP_MIMETYPE_REF_SIMPLE "text/x-ref-simple"
#define BPP_MIMETYPE_REF_XML "text/x-ref-xml"
#define BPP_MIMETYPE_REF_LIST "text/x-ref-list"
#define BPP_MIMETYPE_SOAP "x-obex/bt-SOAP"
#define BPP_MIMETYPE_REFOBJ "x-obex/referencedobject"
#define BPP_MIMETYPE_RUI "x-obex/RUI"

extern const OI_OBEX_BYTESEQ OI_BPP_MimeType_RefSimple;
extern const OI_OBEX_BYTESEQ OI_BPP_MimeType_RefXML;
extern const OI_OBEX_BYTESEQ OI_BPP_MimeType_RefList;
extern const OI_OBEX_BYTESEQ OI_BPP_MimeType_SOAP;
extern const OI_OBEX_BYTESEQ OI_BPP_MimeType_ReferencedObject;
extern const OI_OBEX_BYTESEQ OI_BPP_MimeType_RUI;

#define PRINTER_ATTR_COUNT 21 
#define OBJECTS_ATTR_COUNT 4

typedef struct _SENDER_SDP_DATA {
    OI_DATAELEM protocolDescriptor[3];
    OI_DATAELEM objRfcommDescriptor[2];

    OI_DATAELEM additionalProtocolDescriptorList[1];
    OI_DATAELEM additionalProtocolDescriptors[3];
    OI_DATAELEM ruiObjRfcommDescriptor[2];

    OI_SDPDB_ATTRIBUTE attrs[OBJECTS_ATTR_COUNT];
    OI_SDPDB_SERVICE_RECORD serviceRecord;

    OI_UINT32 sdpHandle;
} SENDER_SDP_DATA;

typedef struct _PRINTER_SDP_DATA {
    OI_DATAELEM protocolDescriptor[3];
    OI_DATAELEM jobRfcommDescriptor[2];
    
    OI_DATAELEM additionalProtocolDescriptorList[1];
    OI_DATAELEM additionalProtocolDescriptors[3];
    OI_DATAELEM statusRfcommDescriptor[2];
    OI_UINT128 characterRepertoires;
    
    OI_SDPDB_ATTRIBUTE attrs[PRINTER_ATTR_COUNT];
    OI_SDPDB_SERVICE_RECORD serviceRecord;

    OI_UINT32 sdpHandle;
} PRINTER_SDP_DATA;

OI_STATUS OI_BPP_RegisterPrinterServiceRecord(const OI_BPP_PRINTER_CAPS *info,
                                              const OI_SDP_STRINGS *strings,
                                              PRINTER_SDP_DATA **sdp,
                                              OI_UINT8 jobChannel,
                                              OI_UINT8 statusChannel);

OI_STATUS OI_BPP_DeregisterPrinterServiceRecord(PRINTER_SDP_DATA *sdp);

OI_STATUS OI_BPP_RegisterSenderServiceRecord(const OI_SDP_STRINGS *strings,
                                             SENDER_SDP_DATA **sdp,
                                             OI_UINT8 objChannel,
                                             OI_UINT8 ruiObjChannel);

OI_STATUS OI_BPP_DeregisterSenderServiceRecord(SENDER_SDP_DATA *sdp);


void OI_BPP_AddJobIdHeader(OI_OBEX_HEADER_LIST *hdrList, OI_BPP_JOB_ID jobId, OI_BYTE *storage);

/* Convenience macros for building header lists based on function parameters */

#define DECLARE_HEADER(_headerList, _size) OI_OBEX_HEADER _headerList##Entry[_size]; OI_OBEX_HEADER_LIST _headerList

#define INIT_HEADER(_headerList) _headerList.list = _headerList##Entry; _headerList.count = 0;

#define ADD_HEADER(_headerList, _headerType, _unionField, _data) \
        OI_ASSERT(_headerList.count < OI_ARRAYSIZE(_headerList##Entry)); \
        _headerList.list[_headerList.count].id = (_headerType); \
        _headerList.list[_headerList.count].val._unionField = *_data; \
        _headerList.count++;
        
#define ADD_BODY_HEADER(_headerList, _final, _body) \
        if (_body) { \
            OI_ASSERT(_headerList.count < OI_ARRAYSIZE(_headerList##Entry)); \
            _headerList.list[_headerList.count].id = _final ? OI_OBEX_HDR_END_OF_BODY : OI_OBEX_HDR_BODY; \
            _headerList.list[_headerList.count].val.body = *_body; \
            _headerList.count++; \
        }

/*
 * Some older HP printers have non-compliant BPP implementation whereby the BPP Printer requires 
 * an empty end-of-body header in the same OBEX packet as a non-empty body header.  Since this is 
 * non-compliant, HP_BROKEN_BPP_PRINTER_IMPLEMENTATION must be defined for the workaround to be effective.  
 * The workaround may itself cause interoperability problems with devices that do not expect 2 body headers 
 * in a single obex packet.
 * 
 * In addition to defining HP_BROKEN_BPP_PRINTER_IMPLEMENTATION, the bpp sender application must also avoid
 * fragmentation of the final OBEX packet by saving one byte of data for the ‘final’ write.  The final write 
 * will then have a single byte of body data followed by an empty end-of-body.  Since there is only one byte 
 * of data, one can be sure that the body data will not be segmented across multiple OBEX packets. 
 */

#ifdef HP_BROKEN_BPP_PRINTER_IMPLEMENTATION

#undef ADD_BODY_HEADER
#define ADD_BODY_HEADER(_headerList, _final, _body) \
        OI_ASSERT(_headerList.count < OI_ARRAYSIZE(_headerList##Entry)); \
        if (_body) { \
            _headerList.list[_headerList.count].id = OI_OBEX_HDR_BODY; \
            _headerList.list[_headerList.count].val.body = *_body; \
            _headerList.count++; \
            if (_final) { \
                OI_ASSERT(_headerList.count < OI_ARRAYSIZE(_headerList##Entry)); \
                _headerList.list[_headerList.count].id = OI_OBEX_HDR_END_OF_BODY; \
                _headerList.list[_headerList.count].val.body.data = NULL; \
                _headerList.list[_headerList.count].val.body.len = 0; \
                _headerList.count++; \
            } \
        }

#endif // HP_BROKEN_BPP_IMPLEMENTATION

#endif /* _OI_BPP_PRIVATE_H */

/**@}*/
