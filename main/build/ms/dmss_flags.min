#============================================================================
#  Description:
#    An includable component of the makefile to build the DMSS software for
#    the SURF (Subscriber Unit Reference Design) using the MSM6550 ASIC.
#
#    This file specifies the make file flags that are common across all
#    targets and makefiles
#
# Copyright (c) 2004 by QUALCOMM, Incorporated.  All Rights Reserved.
#----------------------------------------------------------------------------
#============================================================================
#
#                        EDIT HISTORY FOR MODULE
#
# $Header: //depot/asic/qsc1100/build/ms/dmss_flags.min#9 $ $DateTime: 2009/01/07 05:54:51 $ $Author: kishorep $
#
# when       who     what, where, why
# --------   ---     --------------------------------------------------------
# 11/30/07   ps      Adding support for SECBOOT 2.0
# 10/15/06   trc     Added new SMCOMP support
# 02/08/06   ljl     Added RVCT support
# 07/28/05   wd      L4 Merge
# 01/19/05   ts      Added support for non-secured NOR boot.
# 09/22/04   ktr     Added Progressive Boot support.
# 09/18/04   jkl     Added FOTA.
# 06/03/04   jkl     Initial release.
#============================================================================

#-------------------------------------------------------------------------------
# DMSS tools
#-------------------------------------------------------------------------------

ifeq ($(BUILD_UNIX),yes)
	PLAT_EXT	= .pl
else
	PLAT_EXT	= .exe
endif

QCTOOLS		= ../../tools/build

REDIRECT	= $(QCTOOLS)/redirect$(PLAT_EXT) # Redirect output to a file
PPASM		= $(QCTOOLS)/ppasm$(PLAT_EXT)    # PreProcess assembly files
ifeq ($(BUILD_UNIX),yes)
	SMCOMP		= perl $(QCTOOLS)/smcomp.pl # Perl STM compiler
else
	SMCOMP		= $(QCTOOLS)/smcomp.exe	 # Windows binary STM compiler
endif
DEPGEN		= $(QCTOOLS)/depgen$(PLAT_EXT)   # Dependency generator
B2A		= $(QCTOOLS)/b2a$(PLAT_EXT)	 # Binary to ASCII converter
MEMUSAGE	= $(QCTOOLS)/memusage$(PLAT_EXT) # Memory usage generation
MEMUSAGE_PER_DIR = $(QCTOOLS)/memusage_per_dir$(PLAT_EXT) # Memory usage generation for each directory
FEATLIST        = $(QCTOOLS)/featlist$(PLAT_EXT) # Feature list generator for the build
BTIME		= $(QCTOOLS)/btime$(PLAT_EXT)    # Build time
TEE		= $(QCTOOLS)/qtee$(PLAT_EXT)     # Tee script

QCTHDRGENTOOLS = $(HEADERGEN)
ATTACH_CERT    = $(QCTHDRGENTOOLS)/image_auth
IMAGE_HEADER   = $(QCTHDRGENTOOLS)/image_header # Header Generator
CREATE_SECELF  = $(QCTHDRGENTOOLS)/createsecelf	# secure elf tool
CHECK_4_CERTIFICATES = ./check_4_certificates  # Waits for Certificates to be generated
MOD_ELF_FLAGS= $(QCTHDRGENTOOLS)/modify_elf_flags
RESERVE_HASH_SEG = $(HEADERGEN)/reserve_hash_seg.exe

#Gemsea Add
BREWRC=$(BREWTOOLSDIR)/ResourceEditor/brewrc
#-------------------------------------------------------------------------------
# Windows/Unix Copy
#-------------------------------------------------------------------------------
# This is needed because using 'cp' under windows through cygwin does not
# handle the rights correctly and tromps on the Access Control Lists of the
# files.  This solution allows windows copy to be used under windows and
# a unix copy under unix

ifeq ($(BUILD_UNIX),yes)

    slashes ?= $(1)
    COPY=cp
    MKDIR=mkdir

else
    # The 'slashes' function changes the path separation character from
    # '/' to '\', and quotes the string so the shell doesn't see the
    # backslashes.  This is needed because some Windows tools interpret
    # arguments that begin with forward slashes as options instead of
    # files.

    slashes=$(foreach path,$(1),'$(subst /,\,$(path))' )
    COPY=cmd /c copy
    MKDIR=cmd /c md
endif

#-------------------------------------------------------------------------------
# Target compile time symbol definitions
#-------------------------------------------------------------------------------
TARGET         = $(BUILD)#                     # Target name for output files

ifndef BUILDDIR
	TARGETDIR      = $(BUILD)#             # Name for object directory
else
	TARGETDIR      = $(BUILDDIR)#
endif

LIBDIR = $(TARGETDIR)/libs

# If linting, then set LINTDIR
ifdef DO_LINT
   LINTDIR=lint
endif
ifeq ($(DO_LINT),subsystem)
   # change TARGETDIR to use the group_c_compile feature
   TARGETDIR=lint
endif

LOADEFSDIR     = loadefs

BUILD_LC      := $(shell perl -e 'print lc("$(BUILD)")')
#BUILD_KCFG    := $(shell perl -e 'print substr("$(BUILD)",1,1)')
BUILD_KCFG    := B
CUSTFILE       = cust$(BUILD_LC).h

ifneq ($(USES_L4), yes)
  SCLFILE_IN              = $(ASIC)_Rex_$(BUILD_KCFG)_in.scl#
  SCLFILE_IN_PREPROCESSED = $(ASIC)_Rex_$(BUILD_KCFG)_in_preprocessed.scl#
  SCLFILE_OUT             = $(ASIC)_Rex_$(BUILD_KCFG).scl#
  SCLFILE                 = $(ASIC)_Rex_$(BUILD).scl#
  CUSTSCLFILE             = cust_scl_$(BUILD_KCFG).h
else

ifeq ($(USES_L4_PROGRESSIVE_BOOT), yes)
  SCLFILE_L4_IN         = $(ASIC)_$(BUILD_KCFG)_pboot_in.scl#
  SCLFILE_L4_IN_PREPROCESSED   = $(ASIC)_$(BUILD_KCFG)_pboot_in_preprocessed.scl#
  SCLFILE_L4_OUT        = $(ASIC)_$(BUILD_KCFG)_pboot.scl#
else
  SCLFILE_L4_IN         = $(ASIC)_$(BUILD_KCFG)_in.scl#
  SCLFILE_L4_IN_PREPROCESSED   = $(ASIC)_$(BUILD_KCFG)_in_preprocessed.scl#
  SCLFILE_L4_OUT        = $(ASIC)_$(BUILD_KCFG).scl#
endif

SCLFILE_L4_NONSEC     = $(ASIC)_$(BUILD_KCFG)_nonsec_$(FLASH_TYPE).scl#
SCLFILE_L4_SEC        = $(ASIC)_$(BUILD_KCFG)_sec_$(FLASH_TYPE).scl#
SCLFILE_L4_NONSEC_2CS = $(ASIC)_$(BUILD_KCFG)_nonsec_$(FLASH_TYPE)_2cs.scl#
SCLFILE_L4_SEC_2CS    = $(ASIC)_$(BUILD_KCFG)_sec_$(FLASH_TYPE)_2cs.scl#
SCLFILE_L4_ROM        = $(ASIC)_$(BUILD_KCFG)_rom_$(FLASH_TYPE).scl#
SCLFILE_L4_ROM_2CS    = $(ASIC)_$(BUILD_KCFG)_rom_$(FLASH_TYPE)_2cs.scl#
CUSTL4SCLFILE         = cust_l4_scl_$(BUILD_KCFG).h

MEMMAP_IN = memmap_$(BUILD_KCFG).cfg.in
MEMMAP = memmap_$(BUILD_KCFG).cfg

ifeq ($(USES_2CS), yes)
SCLFILE               = $(ASIC)_$(BUILD_KCFG)_$(SEC_MODE)_$(FLASH_TYPE)_2cs.scl#
else
SCLFILE               = $(ASIC)_$(BUILD_KCFG)_$(SEC_MODE)_$(FLASH_TYPE).scl#
endif
endif

CUSTH          = -DCUST_H=\"$(CUSTFILE)\"#     # Feature include file definition
ARM_ASM        = -D_ARM_ASM_#                  # ARM assembly language selection
ARM            = -DT_ARM #-D__arm__ -D__ARMEL__ -D__ARMCC_VERSION_ADS12__
RVCT_ARM       = -DT_ARM #-D__arm__ -D__ARMEL__
EXTENSIONS     = -DQC_MODIFIED -Dinline=__inline # Flags for various target extensions

MEMLIST        = memusage.lf                   # List file of memory objects and groups

ifeq ($(USES_MMI),yes)
RF_NV_H = -DMODEL_RF_NV_H=\"$(MODEL_RF_NV)\"#
SVC_NV_H = -DCUST_SVC_NV_H=\"$(CUST_SVC_NV)\"#
OEM_NV_H = -DCUST_OEM_NV_H=\"$(CUST_OEM_NV)\"#
endif

ASIC_UC       := $(shell perl -e 'print uc("$(ASIC)")')
ASIC_NOREV    := $(shell perl -e 'print substr("$(ASIC)",1,4)')

#-------------------------------------------------------------------------------
# Decide the ScatterLoader here
#-------------------------------------------------------------------------------

  ifeq ($(USES_FOTA), yes)
    SCLFILE_IN  = $(ASIC)_fota.scl#
  endif

  ifeq ($(USES_L4), yes)
    SCLFILE_IN = $(SCLFILE_L4_OUT)
  endif

#-------------------------------------------------------------------------------
# Diagnostic support options (default = no diagnostics support)
#-------------------------------------------------------------------------------

TIMETEST     =  #                       # Disable TIMETEST profiling support
#TIMETEST    = -DTIMETEST               # Enable TIMETEST profiling support

ASSERT_FATAL = -DASSERT=ASSERT_FATAL#   # Invoke ERR_FATAL for ASSERT
ASSERT_WARN  = -DASSERT=ASSERT_WARN#    # Invoke ERR for ASSERT

#-------------------------------------------------------------------------------
# PureVoice Recognition Tool Kit Settings
#-------------------------------------------------------------------------------

PVVRTK_FLAG   = -DFEATURE_PVVRTK_TEST#          # PVVRTK Settings

#-------------------------------------------------------------------------------
# Compiler symbol definitions
#-------------------------------------------------------------------------------

DMSS_CFLAGS = $(ARM) $(SURF) $(CUSTH) $(EXTENSIONS) $(TIMETEST) $(ASSERT_FATAL)
ifeq ($(USES_MMI),yes)
DMSS_CFLAGS+=$(OEM_NV_H) $(RF_NV_H) $(SVC_NV_H)
DMSS_CFLAGS += -DUSES_MMI -DCUST_EDITION
endif
ifeq ($(USES_RELEASE_VERSION),yes)
DMSS_CFLAGS += -DUSES_RELEASE_VERSION
else
USES_ARM_STACKTRACE = yes
endif
ifeq ($(USES_BREW_APPMGR),yes)
DMSS_CFLAGS += -DUSES_BREW_APPMGR
endif
ifeq ($(USES_NO_ASSERT),yes)
DMSS_CFLAGS += -DUSES_NO_ASSERT
endif
ifeq ($(FOR_NASRANI_NOT_MUSLIM),yes)
DMSS_CFLAGS+=-DSTATIC_BREW_APP_FOR_NASRANI_NOR_MUSLIM
endif
ifeq ($(USES_CAMERA),yes)
DMSS_CFLAGS += -DUSES_CAMERA
endif
RVCT_DMSS_CFLAGS = $(RVCT_ARM) $(SURF) $(CUSTH) $(EXTENSIONS) $(TIMETEST) $(ASSERT_FATAL)
DEPEND_FLAGS= -D SMF_DEPEND

#-------------------------------------------------------------------------------
# Assembler symbol definitions
#-------------------------------------------------------------------------------

DMSS_AFLAGS = $(ARM) $(CUSTH) $(ARM_ASM) $(APCS) $(EXTENSIONS) $(TIMETEST)

LINE = "------------------------------------------------------------------------"

#-------------------------------------------------------------------------------
# Group C-File Compile Sequence
#-------------------------------------------------------------------------------

define group_c_compile
	@echo ------------------------------------------------------------------------
	@echo GROUP BUILD: $@
	$(CC) $(CFLAGS) $(DMSS_CFLAGS) $(ALL_INCLUDES) $(QTV_PATHS) -I"$(ARMINC)" $(APPFLAGS) $(MSG_BT_SSID) $^
	@echo ------------------------------------------------------------------------
	$(AR) cr $@ $(notdir $(^:%.c=%.o))
	@$(RM) $(notdir $(^:%.c=%.o))
	@echo ------------------------------------------------------------------------
endef

ifeq ($(MEM_USAGE),yes)
define group_c_compile
	@echo ------------------------------------------------------------------------
	@echo COLLECT $(notdir $@)
	@echo $(notdir $@):: $(notdir $(^:%.c=%.o)) >> $(MEMLIST)
	@echo ------------------------------------------------------------------------
endef
endif

#-------------------------------------------------------------------------------
# C-File Compile Sequence
#-------------------------------------------------------------------------------

define c_compile
	@echo ------------------------------------------------------------------------
	@echo OBJECT $@
	$(CC) $(CFLAGS) $(DMSS_CFLAGS) $(ALL_INCLUDES) $(QTV_PATHS) -I"$(ARMINC)" $(BUILD_VERSION) $(APPFLAGS) $(MSG_BT_SSID) $(OBJ_CMD) $@ $<
	@echo ------------------------------------------------------------------------
endef

ifeq ($(MEM_USAGE),yes)
define c_compile
	@echo ------------------------------------------------------------------------
	@echo COLLECT $@
	@echo UNSORTED:: $(notdir $@) >> $(MEMLIST)
	@echo ------------------------------------------------------------------------
endef
endif

#-------------------------------------------------------------------------------
# S-File Assembly Sequence
#-------------------------------------------------------------------------------

define s_compile
	@echo ------------------------------------------------------------------------
	@echo OBJECT $@
	$(CC) -E $(DMSS_AFLAGS) $(ALL_INCLUDES) < $< | $(PPASM) - > $(OBJDIR)/$*.i
	$(AS) $(AFLAGS) -list $(OBJDIR)/$*.lst $(OBJDIR)/$*.i $(OBJ_CMD) $@
	@echo ------------------------------------------------------------------------
endef

ifeq ($(MEM_USAGE),yes)
define s_compile
	@echo ------------------------------------------------------------------------
	@echo COLLECT $@
	@echo UNSORTED:: $(notdir $@) >> $(MEMLIST)
	@echo ------------------------------------------------------------------------
endef
endif

#-------------------------------------------------------------------------------
# C++ Compile Sequence
#-------------------------------------------------------------------------------

define cxx_compile
	@echo ------------------------------------------------------------------------
	@echo OBJECT $@
	$(CXX) $(CFLAGS) $(CXXFLAGS) $(DMSS_CFLAGS) $(ALL_INCLUDES) $(QTV_PATHS) -I"$(ARMINC)" $(BUILD_VERSION) $(APPFLAGS) $(MSG_BT_SSID) $(OBJ_CMD) $@ $<
	@echo ------------------------------------------------------------------------
endef

ifeq ($(MEM_USAGE),yes)
define cxx_compile
	@echo ------------------------------------------------------------------------
	@echo COLLECT $@
	@echo UNSORTED:: $(notdir $@) >> $(MEMLIST)
	@echo ------------------------------------------------------------------------
endef
endif

#-------------------------------------------------------------------------------
# Library Creation Sequence
#-------------------------------------------------------------------------------

define lib_create
	@echo ------------------------------------------------------------------------
	@echo LIBRARY $@
	$(AR) cr $@ $(filter %.o,$^)
	@echo ------------------------------------------------------------------------
endef

