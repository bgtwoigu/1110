static void disp_ic_bitblt(const void *src_ptr, dword copy_count)
{
    register const uint16 *pdata = src_ptr;
    register uint16  data;
    dword   mod_count;
    const uint16 *pend;
    
    mod_count   = copy_count&0x07;
    copy_count -= mod_count;
    pend  = pdata + copy_count;
    
    while(pdata<pend)
    {
        data = (uint16)(*pdata++);
        LCD_WRITE_DATA16(data);
        data = (uint16)(*pdata++);
        LCD_WRITE_DATA16(data);
        data = (uint16)(*pdata++);
        LCD_WRITE_DATA16(data);
        data = (uint16)(*pdata++);
        LCD_WRITE_DATA16(data);
        data = (uint16)(*pdata++);
        LCD_WRITE_DATA16(data);
        data = (uint16)(*pdata++);
        LCD_WRITE_DATA16(data);
        data = (uint16)(*pdata++);
        LCD_WRITE_DATA16(data);
        data = (uint16)(*pdata++);
        LCD_WRITE_DATA16(data);
    }
    
    while(mod_count--)
    {
        data = (uint16)(*pdata++);
        LCD_WRITE_DATA16(data);
    }
}

static void disp_ic_set(uint32 src, dword copy_count)
{
    dword   mod_count;
    
    mod_count   = copy_count&0x07;
    copy_count  = copy_count>>3;
    
    while(copy_count--)
    {
        LCD_WRITE_DATA16(src);
        LCD_WRITE_DATA16(src);
        LCD_WRITE_DATA16(src);
        LCD_WRITE_DATA16(src);
        LCD_WRITE_DATA16(src);
        LCD_WRITE_DATA16(src);
        LCD_WRITE_DATA16(src);
        LCD_WRITE_DATA16(src);
    }
    
    while(mod_count--)
    {
        LCD_WRITE_DATA16(src);
    }
}

#ifdef FEATURE_MP4_DECODER
static const int16 Cr2R[256]= //(1436*(Cr-128))
{
    -180, -179, -177, -176, -174, -173, -172, -170, 
    -169, -167, -166, -165, -163, -162, -160, -159, 
    -158, -156, -155, -153, -152, -151, -149, -148, 
    -146, -145, -144, -142, -141, -139, -138, -137, 
    -135, -134, -132, -131, -130, -128, -127, -125, 
    -124, -123, -121, -120, -118, -117, -115, -114, 
    -113, -111, -110, -108, -107, -106, -104, -103, 
    -101, -100, -99, -97, -96, -94, -93, -92, 
    -90, -89, -87, -86, -85, -83, -82, -80, 
    -79, -78, -76, -75, -73, -72, -71, -69, 
    -68, -66, -65, -64, -62, -61, -59, -58, 
    -57, -55, -54, -52, -51, -50, -48, -47, 
    -45, -44, -43, -41, -40, -38, -37, -36, 
    -34, -33, -31, -30, -29, -27, -26, -24, 
    -23, -22, -20, -19, -17, -16, -15, -13, 
    -12, -10, -9, -8, -6, -5, -3, -2, 
    0, 1, 2, 4, 5, 7, 8, 9, 
    11, 12, 14, 15, 16, 18, 19, 21, 
    22, 23, 25, 26, 28, 29, 30, 32, 
    33, 35, 36, 37, 39, 40, 42, 43, 
    44, 46, 47, 49, 50, 51, 53, 54, 
    56, 57, 58, 60, 61, 63, 64, 65, 
    67, 68, 70, 71, 72, 74, 75, 77, 
    78, 79, 81, 82, 84, 85, 86, 88, 
    89, 91, 92, 93, 95, 96, 98, 99, 
    100, 102, 103, 105, 106, 107, 109, 110, 
    112, 113, 114, 116, 117, 119, 120, 122, 
    123, 124, 126, 127, 129, 130, 131, 133, 
    134, 136, 137, 138, 140, 141, 143, 144, 
    145, 147, 148, 150, 151, 152, 154, 155, 
    157, 158, 159, 161, 162, 164, 165, 166, 
    168, 169, 171, 172, 173, 175, 176, 178
};

static const int16 Cb2G[256]= //(352*(Cb-128))
{
    -44, -44, -44, -43, -43, -43, -42, -42, 
    -42, -41, -41, -41, -40, -40, -40, -39, 
    -39, -39, -38, -38, -38, -37, -37, -37, 
    -36, -36, -36, -35, -35, -35, -34, -34, 
    -33, -33, -33, -32, -32, -32, -31, -31, 
    -31, -30, -30, -30, -29, -29, -29, -28, 
    -28, -28, -27, -27, -27, -26, -26, -26, 
    -25, -25, -25, -24, -24, -24, -23, -23, 
    -22, -22, -22, -21, -21, -21, -20, -20, 
    -20, -19, -19, -19, -18, -18, -18, -17, 
    -17, -17, -16, -16, -16, -15, -15, -15, 
    -14, -14, -14, -13, -13, -13, -12, -12, 
    -11, -11, -11, -10, -10, -10, -9, -9, 
    -9, -8, -8, -8, -7, -7, -7, -6, 
    -6, -6, -5, -5, -5, -4, -4, -4, 
    -3, -3, -3, -2, -2, -2, -1, -1, 
    0, 0, 0, 1, 1, 1, 2, 2, 
    2, 3, 3, 3, 4, 4, 4, 5, 
    5, 5, 6, 6, 6, 7, 7, 7, 
    8, 8, 8, 9, 9, 9, 10, 10, 
    11, 11, 11, 12, 12, 12, 13, 13, 
    13, 14, 14, 14, 15, 15, 15, 16, 
    16, 16, 17, 17, 17, 18, 18, 18, 
    19, 19, 19, 20, 20, 20, 21, 21, 
    22, 22, 22, 23, 23, 23, 24, 24, 
    24, 25, 25, 25, 26, 26, 26, 27, 
    27, 27, 28, 28, 28, 29, 29, 29, 
    30, 30, 30, 31, 31, 31, 32, 32, 
    33, 33, 33, 34, 34, 34, 35, 35, 
    35, 36, 36, 36, 37, 37, 37, 38, 
    38, 38, 39, 39, 39, 40, 40, 40, 
    41, 41, 41, 42, 42, 42, 43, 43
};

static const int16 Cr2G[256]= //(731*(Cr-128))
{
    -92, -91, -90, -90, -89, -88, -88, -87, 
    -86, -85, -85, -84, -83, -83, -82, -81, 
    -80, -80, -79, -78, -78, -77, -76, -75, 
    -75, -74, -73, -73, -72, -71, -70, -70, 
    -69, -68, -68, -67, -66, -65, -65, -64, 
    -63, -63, -62, -61, -60, -60, -59, -58, 
    -58, -57, -56, -55, -55, -54, -53, -53, 
    -52, -51, -50, -50, -49, -48, -48, -47, 
    -46, -45, -45, -44, -43, -43, -42, -41, 
    -40, -40, -39, -38, -38, -37, -36, -35, 
    -35, -34, -33, -33, -32, -31, -30, -30, 
    -29, -28, -28, -27, -26, -25, -25, -24, 
    -23, -23, -22, -21, -20, -20, -19, -18, 
    -18, -17, -16, -15, -15, -14, -13, -13, 
    -12, -11, -10, -10, -9, -8, -8, -7, 
    -6, -5, -5, -4, -3, -3, -2, -1, 
    0, 0, 1, 2, 2, 3, 4, 4, 
    5, 6, 7, 7, 8, 9, 9, 10, 
    11, 12, 12, 13, 14, 14, 15, 16, 
    17, 17, 18, 19, 19, 20, 21, 22, 
    22, 23, 24, 24, 25, 26, 27, 27, 
    28, 29, 29, 30, 31, 32, 32, 33, 
    34, 34, 35, 36, 37, 37, 38, 39, 
    39, 40, 41, 42, 42, 43, 44, 44, 
    45, 46, 47, 47, 48, 49, 49, 50, 
    51, 52, 52, 53, 54, 54, 55, 56, 
    57, 57, 58, 59, 59, 60, 61, 62, 
    62, 63, 64, 64, 65, 66, 67, 67, 
    68, 69, 69, 70, 71, 72, 72, 73, 
    74, 74, 75, 76, 77, 77, 78, 79, 
    79, 80, 81, 82, 82, 83, 84, 84, 
    85, 86, 87, 87, 88, 89, 89, 90
};

static const int16 Cb2B[256]= //(1815*(Cb-128))
{
    -227, -226, -224, -222, -220, -219, -217, -215, 
    -213, -211, -210, -208, -206, -204, -203, -201, 
    -199, -197, -195, -194, -192, -190, -188, -187, 
    -185, -183, -181, -180, -178, -176, -174, -172, 
    -171, -169, -167, -165, -164, -162, -160, -158, 
    -156, -155, -153, -151, -149, -148, -146, -144, 
    -142, -141, -139, -137, -135, -133, -132, -130, 
    -128, -126, -125, -123, -121, -119, -117, -116, 
    -114, -112, -110, -109, -107, -105, -103, -102, 
    -100, -98, -96, -94, -93, -91, -89, -87, 
    -86, -84, -82, -80, -78, -77, -75, -73, 
    -71, -70, -68, -66, -64, -63, -61, -59, 
    -57, -55, -54, -52, -50, -48, -47, -45, 
    -43, -41, -39, -38, -36, -34, -32, -31, 
    -29, -27, -25, -24, -22, -20, -18, -16, 
    -15, -13, -11, -9, -8, -6, -4, -2, 
    0, 1, 3, 5, 7, 8, 10, 12, 
    14, 15, 17, 19, 21, 23, 24, 26, 
    28, 30, 31, 33, 35, 37, 38, 40, 
    42, 44, 46, 47, 49, 51, 53, 54, 
    56, 58, 60, 62, 63, 65, 67, 69, 
    70, 72, 74, 76, 77, 79, 81, 83, 
    85, 86, 88, 90, 92, 93, 95, 97, 
    99, 101, 102, 104, 106, 108, 109, 111, 
    113, 115, 116, 118, 120, 122, 124, 125, 
    127, 129, 131, 132, 134, 136, 138, 140, 
    141, 143, 145, 147, 148, 150, 152, 154, 
    155, 157, 159, 161, 163, 164, 166, 168, 
    170, 171, 173, 175, 177, 179, 180, 182, 
    184, 186, 187, 189, 191, 193, 194, 196, 
    198, 200, 202, 203, 205, 207, 209, 210, 
    212, 214, 216, 218, 219, 221, 223, 225
};

#define RANGE_LIMIT(n)	\
{\
	if(n<0)	n=0;\
	else if(n>255) n=255;\
}

static int disp_copy_yuv420(const byte *src, int src_width, int src_height)
{
    uint32 x,y;
    const byte *Cb_Index,*Cr_Index,*Y_Index;
    int32 Y1,Y2,Cb,Cr,R,G,B,RC,GC,BC;
    int32 CbCrLineSize;
    
    CbCrLineSize = src_width/2;
    
    Y_Index  = src;
    Cb_Index = Y_Index+src_width*src_height;
    Cr_Index = Cb_Index+((src_width*src_height)/4);
    
    for(y=0;y<src_height/2;y++)
    {
        // Line1
        for(x=0;x<src_width/2;x++)
        {
            /* Y_Channel */
            Y1=*(Y_Index++);
            Y2=*(Y_Index++);
            
            /* U_Channel*/
            Cb=*(Cb_Index+x);
            //Cb-=128;
            
            /* V_Channel*/
            Cr=*(Cr_Index+x);
            //Cr-=128;

            RC = Cr2R[Cr];
            GC = Cb2G[Cb] + Cr2G[Cr];
            BC = Cb2B[Cb];
            
            //R=(Y + 1436*Cr)>>10;
            //G=(Y-352*Cb-731*Cr)>>10;
            //B=(Y + 1815*Cb)>>10;
            R=Y1 + RC;
            G=Y1 - GC;
            B=Y1 + BC;
            
            RANGE_LIMIT(R);
            RANGE_LIMIT(G);
            RANGE_LIMIT(B);
            LCD_WRITE_DATA16((uint16)(((R&0xF8)<<8)|((G&0xFC)<<3)|(B>>3)));

            R=Y2 + RC;
            G=Y2 - GC;
            B=Y2 + BC;
            
            RANGE_LIMIT(R);
            RANGE_LIMIT(G);
            RANGE_LIMIT(B);
            LCD_WRITE_DATA16((uint16)(((R&0xF8)<<8)|((G&0xFC)<<3)|(B>>3)));
        }

        // Line2
        for(x=0;x<src_width/2;x++)
        {
            /* Y_Channel */
            Y1=*(Y_Index++);
            Y2=*(Y_Index++);
            
            /* U_Channel*/
            Cb=*(Cb_Index+x);
            //Cb-=128;
            
            /* V_Channel*/
            Cr=*(Cr_Index+x);
            //Cr-=128;

            RC = Cr2R[Cr];
            GC = Cb2G[Cb] + Cr2G[Cr];
            BC = Cb2B[Cb];
            
            //R=(Y + 1436*Cr)>>10;
            //G=(Y-352*Cb-731*Cr)>>10;
            //B=(Y + 1815*Cb)>>10;
            R=Y1 + RC;
            G=Y1 - GC;
            B=Y1 + BC;
            
            RANGE_LIMIT(R);
            RANGE_LIMIT(G);
            RANGE_LIMIT(B);
            LCD_WRITE_DATA16((uint16)(((R&0xF8)<<8)|((G&0xFC)<<3)|(B>>3)));

            R=Y2 + RC;
            G=Y2 - GC;
            B=Y2 + BC;
            
            RANGE_LIMIT(R);
            RANGE_LIMIT(G);
            RANGE_LIMIT(B);
            LCD_WRITE_DATA16((uint16)(((R&0xF8)<<8)|((G&0xFC)<<3)|(B>>3)));
        }
        Cb_Index += CbCrLineSize;
        Cr_Index += CbCrLineSize;
    }
    return 0;
}

static void disp_ic_yuv420(const byte *src_ptr, word src_w, word src_h, word dst_w, word dst_h)
{
    if(src_w == dst_w && src_h == dst_h)
    {
        disp_copy_yuv420(src_ptr, src_w, src_h);
    }
    else
    {
    }
}
#endif
