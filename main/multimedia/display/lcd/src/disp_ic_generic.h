static void disp_ic_bitblt(const void *src_ptr, dword copy_count)
{
    register const uint16 *pdata = src_ptr;
    register uint16  data;
    dword   mod_count;
    const uint16 *pend;
    
    mod_count   = copy_count&0x07;
    copy_count -= mod_count;
    pend  = pdata + copy_count;
    
    while(pdata<pend)
    {
        data = (uint16)(*pdata++);
        LCD_WRITE_DATA16(data);
        data = (uint16)(*pdata++);
        LCD_WRITE_DATA16(data);
        data = (uint16)(*pdata++);
        LCD_WRITE_DATA16(data);
        data = (uint16)(*pdata++);
        LCD_WRITE_DATA16(data);
        data = (uint16)(*pdata++);
        LCD_WRITE_DATA16(data);
        data = (uint16)(*pdata++);
        LCD_WRITE_DATA16(data);
        data = (uint16)(*pdata++);
        LCD_WRITE_DATA16(data);
        data = (uint16)(*pdata++);
        LCD_WRITE_DATA16(data);
    }
    
    while(mod_count--)
    {
        data = (uint16)(*pdata++);
        LCD_WRITE_DATA16(data);
    }
}

static void disp_ic_set(uint32 src, dword copy_count)
{
    dword   mod_count;
    
    mod_count   = copy_count&0x07;
    copy_count  = copy_count>>3;
    
    while(copy_count--)
    {
        LCD_WRITE_DATA16(src);
        LCD_WRITE_DATA16(src);
        LCD_WRITE_DATA16(src);
        LCD_WRITE_DATA16(src);
        LCD_WRITE_DATA16(src);
        LCD_WRITE_DATA16(src);
        LCD_WRITE_DATA16(src);
        LCD_WRITE_DATA16(src);
    }
    
    while(mod_count--)
    {
        LCD_WRITE_DATA16(src);
    }
}

#if (defined(FEATURE_MP4_DECODER) || defined(FEATURE_CAMERA_NOFULLSCREEN)) //&& !defined(T_QSC1110)
static const int16 Cr2R[256]=
{
    -202, -200, -198, -197, -195, -194, -192, -191, 
    -189, -187, -186, -184, -183, -181, -180, -178, 
    -176, -175, -173, -172, -170, -169, -167, -165, 
    -164, -162, -161, -159, -157, -156, -154, -153, 
    -151, -150, -148, -146, -145, -143, -142, -140, 
    -139, -137, -135, -134, -132, -131, -129, -128, 
    -126, -124, -123, -121, -120, -118, -117, -115, 
    -113, -112, -110, -109, -107, -106, -104, -102, 
    -101, -99, -98, -96, -94, -93, -91, -90, 
    -88, -87, -85, -83, -82, -80, -79, -77, 
    -76, -74, -72, -71, -69, -68, -66, -65, 
    -63, -61, -60, -58, -57, -55, -54, -52, 
    -50, -49, -47, -46, -44, -43, -41, -39, 
    -38, -36, -35, -33, -31, -30, -28, -27, 
    -25, -24, -22, -20, -19, -17, -16, -14, 
    -13, -11, -9, -8, -6, -5, -3, -2, 
    0, 2, 3, 5, 6, 8, 9, 11, 
    13, 14, 16, 17, 19, 20, 22, 24, 
    25, 27, 28, 30, 31, 33, 35, 36, 
    38, 39, 41, 43, 44, 46, 47, 49, 
    50, 52, 54, 55, 57, 58, 60, 61, 
    63, 65, 66, 68, 69, 71, 72, 74, 
    76, 77, 79, 80, 82, 83, 85, 87, 
    88, 90, 91, 93, 94, 96, 98, 99, 
    101, 102, 104, 106, 107, 109, 110, 112, 
    113, 115, 117, 118, 120, 121, 123, 124, 
    126, 128, 129, 131, 132, 134, 135, 137, 
    139, 140, 142, 143, 145, 146, 148, 150, 
    151, 153, 154, 156, 157, 159, 161, 162, 
    164, 165, 167, 169, 170, 172, 173, 175, 
    176, 178, 180, 181, 183, 184, 186, 187, 
    189, 191, 192, 194, 195, 197, 198, 200, 
};

static const int16 Cb2G[256]=
{
    0, 0, 0, 1, 1, 1, 1, 1, 
    1, 2, 2, 2, 2, 2, 3, 3, 
    3, 3, 3, 4, 4, 4, 4, 4, 
    4, 5, 5, 5, 5, 5, 6, 6, 
    6, 6, 6, 7, 7, 7, 7, 7, 
    7, 8, 8, 8, 8, 8, 9, 9, 
    9, 9, 9, 10, 10, 10, 10, 10, 
    10, 11, 11, 11, 11, 11, 12, 12, 
    12, 12, 12, 13, 13, 13, 13, 13, 
    13, 14, 14, 14, 14, 14, 15, 15, 
    15, 15, 15, 16, 16, 16, 16, 16, 
    16, 17, 17, 17, 17, 17, 18, 18, 
    18, 18, 18, 19, 19, 19, 19, 19, 
    19, 20, 20, 20, 20, 20, 21, 21, 
    21, 21, 21, 22, 22, 22, 22, 22, 
    22, 23, 23, 23, 23, 23, 24, 24, 
    24, 24, 24, 25, 25, 25, 25, 25, 
    25, 26, 26, 26, 26, 26, 27, 27, 
    27, 27, 27, 28, 28, 28, 28, 28, 
    28, 29, 29, 29, 29, 29, 30, 30, 
    30, 30, 30, 31, 31, 31, 31, 31, 
    31, 32, 32, 32, 32, 32, 33, 33, 
    33, 33, 33, 34, 34, 34, 34, 34, 
    34, 35, 35, 35, 35, 35, 36, 36, 
    36, 36, 36, 37, 37, 37, 37, 37, 
    37, 38, 38, 38, 38, 38, 39, 39, 
    39, 39, 39, 40, 40, 40, 40, 40, 
    40, 41, 41, 41, 41, 41, 42, 42, 
    42, 42, 42, 43, 43, 43, 43, 43, 
    43, 44, 44, 44, 44, 44, 45, 45, 
    45, 45, 45, 46, 46, 46, 46, 46, 
    46, 47, 47, 47, 47, 47, 48, 48, 
};

static const int16 Cr2G[256]=
{
    -84, -83, -83, -83, -82, -82, -81, -81, 
    -80, -80, -79, -79, -78, -78, -77, -77, 
    -76, -76, -76, -75, -75, -74, -74, -73, 
    -73, -72, -72, -71, -71, -70, -70, -69, 
    -69, -68, -68, -68, -67, -67, -66, -66, 
    -65, -65, -64, -64, -63, -63, -62, -62, 
    -61, -61, -61, -60, -60, -59, -59, -58, 
    -58, -57, -57, -56, -56, -55, -55, -54, 
    -54, -53, -53, -53, -52, -52, -51, -51, 
    -50, -50, -49, -49, -48, -48, -47, -47, 
    -46, -46, -46, -45, -45, -44, -44, -43, 
    -43, -42, -42, -41, -41, -40, -40, -39, 
    -39, -39, -38, -38, -37, -37, -36, -36, 
    -35, -35, -34, -34, -33, -33, -32, -32, 
    -31, -31, -31, -30, -30, -29, -29, -28, 
    -28, -27, -27, -26, -26, -25, -25, -24, 
    -24, -24, -23, -23, -22, -22, -21, -21, 
    -20, -20, -19, -19, -18, -18, -17, -17, 
    -17, -16, -16, -15, -15, -14, -14, -13, 
    -13, -12, -12, -11, -11, -10, -10, -9, 
    -9, -9, -8, -8, -7, -7, -6, -6, 
    -5, -5, -4, -4, -3, -3, -2, -2, 
    -2, -1, -1, 0, 0, 1, 1, 2, 
    2, 3, 3, 4, 4, 5, 5, 6, 
    6, 6, 7, 7, 8, 8, 9, 9, 
    10, 10, 11, 11, 12, 12, 13, 13, 
    13, 14, 14, 15, 15, 16, 16, 17, 
    17, 18, 18, 19, 19, 20, 20, 20, 
    21, 21, 22, 22, 23, 23, 24, 24, 
    25, 25, 26, 26, 27, 27, 28, 28, 
    28, 29, 29, 30, 30, 31, 31, 32, 
    32, 33, 33, 34, 34, 35, 35, 35, 
};

static const int16 Cb2B[256]=
{
    -237, -236, -234, -232, -230, -228, -226, -225, 
    -223, -221, -219, -217, -215, -213, -212, -210, 
    -208, -206, -204, -202, -200, -199, -197, -195, 
    -193, -191, -189, -187, -186, -184, -182, -180, 
    -178, -176, -174, -173, -171, -169, -167, -165, 
    -163, -161, -160, -158, -156, -154, -152, -150, 
    -148, -147, -145, -143, -141, -139, -137, -135, 
    -134, -132, -130, -128, -126, -124, -122, -121, 
    -119, -117, -115, -113, -111, -109, -108, -106, 
    -104, -102, -100, -98, -96, -95, -93, -91, 
    -89, -87, -85, -83, -82, -80, -78, -76, 
    -74, -72, -71, -69, -67, -65, -63, -61, 
    -59, -58, -56, -54, -52, -50, -48, -46, 
    -45, -43, -41, -39, -37, -35, -33, -32, 
    -30, -28, -26, -24, -22, -20, -19, -17, 
    -15, -13, -11, -9, -7, -6, -4, -2, 
    0, 2, 4, 6, 7, 9, 11, 13, 
    15, 17, 19, 20, 22, 24, 26, 28, 
    30, 32, 33, 35, 37, 39, 41, 43, 
    45, 46, 48, 50, 52, 54, 56, 58, 
    59, 61, 63, 65, 67, 69, 71, 72, 
    74, 76, 78, 80, 82, 83, 85, 87, 
    89, 91, 93, 95, 96, 98, 100, 102, 
    104, 106, 108, 109, 111, 113, 115, 117, 
    119, 121, 122, 124, 126, 128, 130, 132, 
    134, 135, 137, 139, 141, 143, 145, 147, 
    148, 150, 152, 154, 156, 158, 160, 161, 
    163, 165, 167, 169, 171, 173, 174, 176, 
    178, 180, 182, 184, 186, 187, 189, 191, 
    193, 195, 197, 199, 200, 202, 204, 206, 
    208, 210, 212, 213, 215, 217, 219, 221, 
    223, 225, 226, 228, 230, 232, 234, 236, 
};

#define YUV420P2RGB565_R5XX_0  202

static const uint16 R5xx[658] = 
{
    0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    // 0 Index 202 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0800, 0x0800, 0x0800, 0x0800, 0x0800, 0x0800, 0x0800, 0x0800, 
    0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 0x1000, 
    0x1800, 0x1800, 0x1800, 0x1800, 0x1800, 0x1800, 0x1800, 0x1800, 
    0x2000, 0x2000, 0x2000, 0x2000, 0x2000, 0x2000, 0x2000, 0x2000, 
    0x2800, 0x2800, 0x2800, 0x2800, 0x2800, 0x2800, 0x2800, 0x2800, 
    0x3000, 0x3000, 0x3000, 0x3000, 0x3000, 0x3000, 0x3000, 0x3000, 
    0x3800, 0x3800, 0x3800, 0x3800, 0x3800, 0x3800, 0x3800, 0x3800, 
    0x4000, 0x4000, 0x4000, 0x4000, 0x4000, 0x4000, 0x4000, 0x4000, 
    0x4800, 0x4800, 0x4800, 0x4800, 0x4800, 0x4800, 0x4800, 0x4800, 
    0x5000, 0x5000, 0x5000, 0x5000, 0x5000, 0x5000, 0x5000, 0x5000, 
    0x5800, 0x5800, 0x5800, 0x5800, 0x5800, 0x5800, 0x5800, 0x5800, 
    0x6000, 0x6000, 0x6000, 0x6000, 0x6000, 0x6000, 0x6000, 0x6000, 
    0x6800, 0x6800, 0x6800, 0x6800, 0x6800, 0x6800, 0x6800, 0x6800, 
    0x7000, 0x7000, 0x7000, 0x7000, 0x7000, 0x7000, 0x7000, 0x7000, 
    0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 
    0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 0x8000, 
    0x8800, 0x8800, 0x8800, 0x8800, 0x8800, 0x8800, 0x8800, 0x8800, 
    0x9000, 0x9000, 0x9000, 0x9000, 0x9000, 0x9000, 0x9000, 0x9000, 
    0x9800, 0x9800, 0x9800, 0x9800, 0x9800, 0x9800, 0x9800, 0x9800, 
    0xa000, 0xa000, 0xa000, 0xa000, 0xa000, 0xa000, 0xa000, 0xa000, 
    0xa800, 0xa800, 0xa800, 0xa800, 0xa800, 0xa800, 0xa800, 0xa800, 
    0xb000, 0xb000, 0xb000, 0xb000, 0xb000, 0xb000, 0xb000, 0xb000, 
    0xb800, 0xb800, 0xb800, 0xb800, 0xb800, 0xb800, 0xb800, 0xb800, 
    0xc000, 0xc000, 0xc000, 0xc000, 0xc000, 0xc000, 0xc000, 0xc000, 
    0xc800, 0xc800, 0xc800, 0xc800, 0xc800, 0xc800, 0xc800, 0xc800, 
    0xd000, 0xd000, 0xd000, 0xd000, 0xd000, 0xd000, 0xd000, 0xd000, 
    0xd800, 0xd800, 0xd800, 0xd800, 0xd800, 0xd800, 0xd800, 0xd800, 
    0xe000, 0xe000, 0xe000, 0xe000, 0xe000, 0xe000, 0xe000, 0xe000, 
    0xe800, 0xe800, 0xe800, 0xe800, 0xe800, 0xe800, 0xe800, 0xe800, 
    0xf000, 0xf000, 0xf000, 0xf000, 0xf000, 0xf000, 0xf000, 0xf000, 
    0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 
    0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 
    0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 
    0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 
    0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 
    0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 
    0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 
    0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 
    0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 
    0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 
    0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 
    0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 
    0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 
    0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 
    0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 
    0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 
    0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 
    0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 
    0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 
    0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 
    0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 
    0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 
    0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 
    0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 
    0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 
    0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 0xf800, 
};

#define YUV420P2RGB565_GX6X_0  83

static const uint16 Gx6x[423] = 
{
    0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    // 0 Index 83 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 
    0x0040, 0x0040, 0x0040, 0x0040, 0x0060, 0x0060, 0x0060, 0x0060, 
    0x0080, 0x0080, 0x0080, 0x0080, 0x00a0, 0x00a0, 0x00a0, 0x00a0, 
    0x00c0, 0x00c0, 0x00c0, 0x00c0, 0x00e0, 0x00e0, 0x00e0, 0x00e0, 
    0x0100, 0x0100, 0x0100, 0x0100, 0x0120, 0x0120, 0x0120, 0x0120, 
    0x0140, 0x0140, 0x0140, 0x0140, 0x0160, 0x0160, 0x0160, 0x0160, 
    0x0180, 0x0180, 0x0180, 0x0180, 0x01a0, 0x01a0, 0x01a0, 0x01a0, 
    0x01c0, 0x01c0, 0x01c0, 0x01c0, 0x01e0, 0x01e0, 0x01e0, 0x01e0, 
    0x0200, 0x0200, 0x0200, 0x0200, 0x0220, 0x0220, 0x0220, 0x0220, 
    0x0240, 0x0240, 0x0240, 0x0240, 0x0260, 0x0260, 0x0260, 0x0260, 
    0x0280, 0x0280, 0x0280, 0x0280, 0x02a0, 0x02a0, 0x02a0, 0x02a0, 
    0x02c0, 0x02c0, 0x02c0, 0x02c0, 0x02e0, 0x02e0, 0x02e0, 0x02e0, 
    0x0300, 0x0300, 0x0300, 0x0300, 0x0320, 0x0320, 0x0320, 0x0320, 
    0x0340, 0x0340, 0x0340, 0x0340, 0x0360, 0x0360, 0x0360, 0x0360, 
    0x0380, 0x0380, 0x0380, 0x0380, 0x03a0, 0x03a0, 0x03a0, 0x03a0, 
    0x03c0, 0x03c0, 0x03c0, 0x03c0, 0x03e0, 0x03e0, 0x03e0, 0x03e0, 
    0x0400, 0x0400, 0x0400, 0x0400, 0x0420, 0x0420, 0x0420, 0x0420, 
    0x0440, 0x0440, 0x0440, 0x0440, 0x0460, 0x0460, 0x0460, 0x0460, 
    0x0480, 0x0480, 0x0480, 0x0480, 0x04a0, 0x04a0, 0x04a0, 0x04a0, 
    0x04c0, 0x04c0, 0x04c0, 0x04c0, 0x04e0, 0x04e0, 0x04e0, 0x04e0, 
    0x0500, 0x0500, 0x0500, 0x0500, 0x0520, 0x0520, 0x0520, 0x0520, 
    0x0540, 0x0540, 0x0540, 0x0540, 0x0560, 0x0560, 0x0560, 0x0560, 
    0x0580, 0x0580, 0x0580, 0x0580, 0x05a0, 0x05a0, 0x05a0, 0x05a0, 
    0x05c0, 0x05c0, 0x05c0, 0x05c0, 0x05e0, 0x05e0, 0x05e0, 0x05e0, 
    0x0600, 0x0600, 0x0600, 0x0600, 0x0620, 0x0620, 0x0620, 0x0620, 
    0x0640, 0x0640, 0x0640, 0x0640, 0x0660, 0x0660, 0x0660, 0x0660, 
    0x0680, 0x0680, 0x0680, 0x0680, 0x06a0, 0x06a0, 0x06a0, 0x06a0, 
    0x06c0, 0x06c0, 0x06c0, 0x06c0, 0x06e0, 0x06e0, 0x06e0, 0x06e0, 
    0x0700, 0x0700, 0x0700, 0x0700, 0x0720, 0x0720, 0x0720, 0x0720, 
    0x0740, 0x0740, 0x0740, 0x0740, 0x0760, 0x0760, 0x0760, 0x0760, 
    0x0780, 0x0780, 0x0780, 0x0780, 0x07a0, 0x07a0, 0x07a0, 0x07a0, 
    0x07c0, 0x07c0, 0x07c0, 0x07c0, 0x07e0, 0x07e0, 0x07e0, 0x07e0, 
    0x07e0, 0x07e0, 0x07e0, 0x07e0, 0x07e0, 0x07e0, 0x07e0, 0x07e0, 
    0x07e0, 0x07e0, 0x07e0, 0x07e0, 0x07e0, 0x07e0, 0x07e0, 0x07e0, 
    0x07e0, 0x07e0, 0x07e0, 0x07e0, 0x07e0, 0x07e0, 0x07e0, 0x07e0, 
    0x07e0, 0x07e0, 0x07e0, 0x07e0, 0x07e0, 0x07e0, 0x07e0, 0x07e0, 
    0x07e0, 0x07e0, 0x07e0, 0x07e0, 0x07e0, 0x07e0, 0x07e0, 0x07e0, 
    0x07e0, 0x07e0, 0x07e0, 0x07e0, 0x07e0, 0x07e0, 0x07e0, 0x07e0, 
    0x07e0, 0x07e0, 0x07e0, 0x07e0, 0x07e0, 0x07e0, 0x07e0, 0x07e0, 
    0x07e0, 0x07e0, 0x07e0, 0x07e0, 0x07e0, 0x07e0, 0x07e0, 0x07e0, 
    0x07e0, 0x07e0, 0x07e0, 0x07e0, 0x07e0, 0x07e0, 0x07e0, 0x07e0, 
    0x07e0, 0x07e0, 0x07e0, 0x07e0, 0x07e0, 0x07e0, 0x07e0, 0x07e0, 
    0x07e0, 0x07e0, 0x07e0, 0x07e0, 
};

#define YUV420P2RGB565_BXX5_0  237

static const uint16 Bxx5[729] = 
{
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    // 0 Index 237 
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 
    0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 
    0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 
    0x0003, 0x0003, 0x0003, 0x0003, 0x0003, 0x0003, 0x0003, 0x0003, 
    0x0004, 0x0004, 0x0004, 0x0004, 0x0004, 0x0004, 0x0004, 0x0004, 
    0x0005, 0x0005, 0x0005, 0x0005, 0x0005, 0x0005, 0x0005, 0x0005, 
    0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 0x0006, 
    0x0007, 0x0007, 0x0007, 0x0007, 0x0007, 0x0007, 0x0007, 0x0007, 
    0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 0x0008, 
    0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 0x0009, 
    0x000a, 0x000a, 0x000a, 0x000a, 0x000a, 0x000a, 0x000a, 0x000a, 
    0x000b, 0x000b, 0x000b, 0x000b, 0x000b, 0x000b, 0x000b, 0x000b, 
    0x000c, 0x000c, 0x000c, 0x000c, 0x000c, 0x000c, 0x000c, 0x000c, 
    0x000d, 0x000d, 0x000d, 0x000d, 0x000d, 0x000d, 0x000d, 0x000d, 
    0x000e, 0x000e, 0x000e, 0x000e, 0x000e, 0x000e, 0x000e, 0x000e, 
    0x000f, 0x000f, 0x000f, 0x000f, 0x000f, 0x000f, 0x000f, 0x000f, 
    0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 0x0010, 
    0x0011, 0x0011, 0x0011, 0x0011, 0x0011, 0x0011, 0x0011, 0x0011, 
    0x0012, 0x0012, 0x0012, 0x0012, 0x0012, 0x0012, 0x0012, 0x0012, 
    0x0013, 0x0013, 0x0013, 0x0013, 0x0013, 0x0013, 0x0013, 0x0013, 
    0x0014, 0x0014, 0x0014, 0x0014, 0x0014, 0x0014, 0x0014, 0x0014, 
    0x0015, 0x0015, 0x0015, 0x0015, 0x0015, 0x0015, 0x0015, 0x0015, 
    0x0016, 0x0016, 0x0016, 0x0016, 0x0016, 0x0016, 0x0016, 0x0016, 
    0x0017, 0x0017, 0x0017, 0x0017, 0x0017, 0x0017, 0x0017, 0x0017, 
    0x0018, 0x0018, 0x0018, 0x0018, 0x0018, 0x0018, 0x0018, 0x0018, 
    0x0019, 0x0019, 0x0019, 0x0019, 0x0019, 0x0019, 0x0019, 0x0019, 
    0x001a, 0x001a, 0x001a, 0x001a, 0x001a, 0x001a, 0x001a, 0x001a, 
    0x001b, 0x001b, 0x001b, 0x001b, 0x001b, 0x001b, 0x001b, 0x001b, 
    0x001c, 0x001c, 0x001c, 0x001c, 0x001c, 0x001c, 0x001c, 0x001c, 
    0x001d, 0x001d, 0x001d, 0x001d, 0x001d, 0x001d, 0x001d, 0x001d, 
    0x001e, 0x001e, 0x001e, 0x001e, 0x001e, 0x001e, 0x001e, 0x001e, 
    0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 
    0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 
    0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 
    0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 
    0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 
    0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 
    0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 
    0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 
    0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 
    0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 
    0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 
    0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 
    0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 
    0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 
    0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 
    0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 
    0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 
    0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 
    0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 
    0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 
    0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 
    0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 
    0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 
    0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 
    0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 
    0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 
    0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 
    0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 
    0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 
    0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 0x001f, 
    0x001f, 0x001f, 0x001f, 0x001f, 
};

//                     |     YLen        | YLen/4   | YLen/4
// MDP YUV Format       yyyyyyyyyyyyyyyy | crcbcrcb   crcbcrcb
// Normal YUV Format    yyyyyyyyyyyyyyyy | cbcbcbcb | crcrcrcr
#define DISP_YUV_MDP_FORMAT

#ifndef DISP_IC_WIDTH_MAX
#define DISP_IC_WIDTH_MAX   480
#endif
static uint16 g_wDispLineBuf[DISP_IC_WIDTH_MAX];

static int disp_copy_yuv420(const byte *src, uint16 src_width, uint16 src_height)
{
    uint16 x,y;
#ifdef DISP_YUV_MDP_FORMAT
    const byte *CbCr_Index,*Y_Index;
#else
    const byte *Cb_Index,*Cr_Index,*Y_Index;
#endif
    int16 Y1,Y2,Y3,Y4,Cb,Cr,R;
    uint16 out1,out2,out3,out4;
    const uint16 *rTable,*gTable,*bTable;
    uint16 *LineBuf;
    
    Y_Index  = src;
#ifdef DISP_YUV_MDP_FORMAT
    CbCr_Index = Y_Index+src_width*src_height;
#else
    Cb_Index = Y_Index+src_width*src_height;
    Cr_Index = Cb_Index+((src_width*src_height)/4);
#endif
    rTable = &R5xx[YUV420P2RGB565_R5XX_0];
    gTable = &Gx6x[YUV420P2RGB565_GX6X_0];
    bTable = &Bxx5[YUV420P2RGB565_BXX5_0];
    
    for(y=0;y<src_height>>1;y++)
    {
        LineBuf = g_wDispLineBuf;
        // Line1
        for(x=0;x<src_width>>1;x++)
        {
            /* Y_Channel */
            Y1=*(Y_Index);
            Y2=*(Y_Index+1);
            Y3=*(Y_Index++ + src_width);
            Y4=*(Y_Index++ + src_width);
            Y4-=Y3;
            Y3-=Y2;
            Y2-=Y1;
            
#ifdef DISP_YUV_MDP_FORMAT
            /* U_Channel*/
            Cr=*(CbCr_Index++);
            
            /* V_Channel*/
            Cb=*(CbCr_Index++);
#else
            /* U_Channel*/
            Cb=*(Cb_Index++);
            
            /* V_Channel*/
            Cr=*(Cr_Index++);
#endif
            R = Y1 + Cr2R[Cr];
            out1 = rTable[R];
            R += Y2;
            out2 = rTable[R];
            R += Y3;
            out3 = rTable[R];
            R += Y4;
            out4 = rTable[R];
            
            R = Y1 - Cb2G[Cb] - Cr2G[Cr];
            out1 += gTable[R];
            R += Y2;
            out2 += gTable[R];
            R += Y3;
            out3 += gTable[R];
            R += Y4;
            out4 += gTable[R];
            
            R = Y1 + Cb2B[Cb];
            out1 += bTable[R];
            R += Y2;
            out2 += bTable[R];
            R += Y3;
            out3 += bTable[R];
            R += Y4;
            out4 += bTable[R];
            
            LCD_WRITE_DATA16(out1);
            LCD_WRITE_DATA16(out2);
            *(LineBuf++) = out3;
            *(LineBuf++) = out4;
        }
        Y_Index += src_width;

        // Line2
        disp_ic_bitblt(g_wDispLineBuf,src_width);
    }
    return 0;
}

static int disp_scale_yuv420(const byte *src, uint16 src_width, uint16 src_height, uint16 dst_width, uint16 dst_height)
{
    uint16 x,y,scale_x,scale_y,temp;
    uint32 scale;
#ifdef DISP_YUV_MDP_FORMAT
    const byte *CbCr_Index,*Y_Index, *CbCr_Orig,*Y_Orig,*CbCr_Temp;
#else
    const byte *Cb_Index,*Cr_Index,*Y_Index, *Cb_Orig,*Cr_Orig,*Y_Orig;
#endif
    int16 Y1,Cb,Cr,R;
    uint16 out;
    int16 CbCrLineSize;
    const uint16 *rTable,*gTable,*bTable;
    
    Y_Orig  = src;
#ifdef DISP_YUV_MDP_FORMAT
    CbCrLineSize = src_width;
    CbCr_Orig = Y_Orig+src_width*src_height;
#else
    CbCrLineSize = src_width/2;
    Cb_Orig = Y_Orig+src_width*src_height;
    Cr_Orig = Cb_Orig+((src_width*src_height)/4);
#endif
    scale    = (src_width<<10)/dst_width;
    rTable = &R5xx[YUV420P2RGB565_R5XX_0];
    gTable = &Gx6x[YUV420P2RGB565_GX6X_0];
    bTable = &Bxx5[YUV420P2RGB565_BXX5_0];
    
    for(y=0;y<dst_height;y++)
    {
        scale_y = (y*scale)>>10;
        Y_Index = Y_Orig+scale_y*src_width;
        temp = (scale_y>>1)*CbCrLineSize;
        
#ifdef DISP_YUV_MDP_FORMAT
        CbCr_Index = CbCr_Orig+temp;
#else
        Cb_Index = Cb_Orig+temp;
        Cr_Index = Cr_Orig+temp;
#endif
        // Line1
        for(x=0;x<dst_width;x++)
        {
            scale_x = (x*scale)>>10;
            
            /* Y_Channel */
            Y1=*(Y_Index+scale_x);
            
#ifdef DISP_YUV_MDP_FORMAT
            CbCr_Temp = CbCr_Index+((scale_x>>1)<<1);
            
            /* U_Channel*/
            Cr=*(CbCr_Temp++);
            
            /* V_Channel*/
            Cb=*(CbCr_Temp);
#else
            scale_x = scale_x>>1;

            /* U_Channel*/
            Cb=*(Cb_Index+scale_x);
            
            /* V_Channel*/
            Cr=*(Cr_Index+scale_x);
#endif
            R = Y1 + Cr2R[Cr];
            out = rTable[R];

            R = Y1 - Cb2G[Cb] - Cr2G[Cr];
            out += gTable[R];
            
            R = Y1 + Cb2B[Cb];
            out += bTable[R];

            LCD_WRITE_DATA16(out);
        }
    }
    return 0;
}

static void disp_ic_yuv420(const byte *src_ptr, word src_w, word src_h, word dst_w, word dst_h)
{
    if(src_w == dst_w && src_h == dst_h)
    {
        (void)disp_copy_yuv420(src_ptr, src_w, src_h);
    }
    else
    {
        (void)disp_scale_yuv420(src_ptr, src_w, src_h, dst_w, dst_h);
    }
}
#endif
