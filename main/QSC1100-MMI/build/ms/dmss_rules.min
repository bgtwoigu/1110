#============================================================================
#
#  Description:
#    An includable component of the makefile to build the DMSS software for
#    the SURF (Subscriber Unit Reference Design).
#
#    This file specifies the make file rules that are common across all
#    targets and makefiles
#
# Copyright (c) 2004-2006     by QUALCOMM, Incorporated. All Rights Reserved.
#----------------------------------------------------------------------------
#============================================================================
#
#			EDIT HISTORY FOR MODULE
#
# $Header: //depot/asic/qsc1100/build/ms/dmss_rules.min#46 $ $DateTime: 2009/06/03 23:58:05 $ $Author: pmuthe $
#
# when       who     what, where, why
# --------   ---     --------------------------------------------------------
# 02/27/08   mp      Update for SecureMSM
# 01/09/08   mp      Changes for QSC1100 RF support
# 11/30/07   ps      Adding support for SECBOOT 2.0
# 10/24/07   sn      Added USES_PS_LIB check for ps.lib.
# 06/15/07   gdp     Added WLAN Support.
# 05/01/07   amw     Added NOR partition table support.
# 10/15/06   trc     Updated state machine compiler inference rule
# 07/25/06   mpa     Added data_bcmcs_mdm.lib and hdrmrlp_apps.lib
# 05/22/06   vrk/ks  Added ps.lib (Data)
# 11/29/05   ra      Added sbi_lib.min
# 08/18/05   kss     Added lib_hdrreva.min
# 07/28/05   wd      L4 Merge
# 04/27/05   ds      Added hdrdmod.lib
# 03/03/05   ap      Deleted videofmt.lib.
# 02/25/05   jkl     Fixed VR featurization.
# 02/23/05   ap      Added QVP.
# 02/11/05   ap      Added relC CP lib, added brew forms and widgets.
# 10/14/04   ap      Added camcorder.lib.
# 10/04/04   tk      Changed Clean to delete Progressive boot Scatter Loader
# 09/23/04   ap      Copy varatouch lib to LIBDIR.
# 09/23/04   ap      Changed spaces to tabs for bcmcs and USB.
# 09/22/04   ktr     Added Progressive boot and USB.
# 09/21/04   ap      Added data_bcmcs.lib.
# 08/12/04   ap      Added hdrbc.lib.
# 06/24/04   ap      Added audioeq library.
# 06/23/04   kwo     Added search library
# 06/07/04   jkl     Fixed 8 bit NAND support.
# 06/03/04   jkl     Added Lint support.
# 05/27/04   jkl     Created bootsetup and cleaned setup.
# 05/20/04   bmg     Fixed 8-bit jnand problem and added FFA6550 support
# 05/06/04   AP      Created.
#============================================================================

#===============================================================================
#			      LIBRARIES
#===============================================================================

ifeq ($(USES_VR), yes)
	QCTLIBS := $(QCTLIBS) $(LIBDIR)/vrengine.lib
endif

ifeq ($(USES_AUDFMT), yes)
	QCTLIBS := $(QCTLIBS) $(LIBDIR)/audfmt.lib
endif

ifeq ($(USES_AUDIOEQ), yes)
	QCTLIBS := $(QCTLIBS) $(LIBDIR)/audioeq.lib
endif

ifeq ($(USES_BREW), yes)
        include $(BREW_OEM_MSM_SRC)/lib_aee.min
else
   ifneq ($(USES_THINUI),yes)
	include $(BREWAPI_LIB)/lib_aee.min
   endif
endif

ifeq ($(USES_CAMCORDER),yes)
        QCTLIBS := $(QCTLIBS) $(LIBDIR)/camcorder_enc.lib
        QCTLIBS := $(QCTLIBS) $(LIBDIR)/camcorder_mp4e_common.lib
endif

ifeq ($(USES_CAMCORDER),yes)
        QCTLIBS := $(QCTLIBS) $(LIBDIR)/camcorder_enc_lowtier.lib
        QCTLIBS := $(QCTLIBS) $(LIBDIR)/camcorder_mp4e_lowtier.lib
endif

ifeq ($(USES_QTVVIDEO),	yes)
        QCTLIBS := $(QCTLIBS) $(LIBDIR)/video_dec_mp4.lib
        QCTLIBS := $(QCTLIBS) $(LIBDIR)/video_dec_jpeg.lib
        QCTLIBS := $(QCTLIBS) $(LIBDIR)/video_dec_driver.lib
endif

ifeq ($(USES_H264), yes)
        QCTLIBS := $(QCTLIBS) $(LIBDIR)/video_dec_h264.lib
endif

ifeq ($(USES_QTVVIDEO), yes)
        QCTLIBS := $(QCTLIBS) $(LIBDIR)/video_dec_common.lib
endif


ifeq ($(USES_MSUITE), yes)
	QCTLIBS := $(QCTLIBS) $(LIBDIR)/msuite.lib
endif

ifeq ($(USES_PMIC), yes)
	QCTLIBS := $(QCTLIBS) $(LIBDIR)/pmic.lib
endif

ifeq ($(USES_SAF), yes)
	QCTLIBS := $(QCTLIBS) $(LIBDIR)/saf.lib
endif

ifeq ($(USES_SVG), yes)
	QCTLIBS := $(QCTLIBS) $(LIBDIR)/svg.lib
endif

#####################################
# SECURITY SERVICES | DRM | ICONTENT#
#####################################
ifeq ($(USES_SEC), yes)

        ifeq ($(USES_SEC_SVC), yes)
	QCTLIBS := $(QCTLIBS) $(LIBDIR)/sec.lib
                QCTLIBS := $(QCTLIBS) $(LIBDIR)/secapi_svc.lib
        endif

        ifeq ($(USES_SEC_CLNT), yes)

                #SECAPI Client Library
                QCTLIBS := $(QCTLIBS) $(LIBDIR)/secapi_clnt.lib

	#SEC Test Library
	QCTLIBS := $(QCTLIBS) $(LIBDIR)/sectst.lib

                #SFS Library
                ifeq ($(USES_SFS), yes)
                        QCTLIBS := $(QCTLIBS) $(LIBDIR)/sfs.lib
   endif

ifeq ($(USES_IPSEC), yes)
                        #DMSS IPSec Library
	QCTLIBS := $(QCTLIBS) $(LIBDIR)/sec_ipsec.lib

                        #BREW IPSec Library
   ifneq ($(USES_THINUI),yes)
	QCTLIBS := $(QCTLIBS) $(LIBDIR)/IPSec.lib
   endif
                        #Interface IPSec Library
                        QCTLIBS := $(QCTLIBS) $(LIBDIR)/ixipsec.lib
                endif #IPSEC
        endif #SEC_CLNT

####################################################################
#                      COMMON INTERFACES                           #
####################################################################

        ifeq ($(USES_SEC_SVC), yes)
                #IxTime Library
                QCTLIBS := $(QCTLIBS) $(LIBDIR)/ixtime_svc.lib

                #IxFile Service Library
                QCTLIBS := $(QCTLIBS) $(LIBDIR)/ixfile_svc.lib

                #IxStream Service Library
                QCTLIBS := $(QCTLIBS) $(LIBDIR)/ixstream_svc.lib

        endif

        ifeq ($(USES_SEC_CLNT), yes)
                #IxTime Library
                QCTLIBS := $(QCTLIBS) $(LIBDIR)/ixtime_clnt.lib

                ifeq ($(USES_DUAL_PD), yes)
                        #IxDiag Library
                        QCTLIBS := $(QCTLIBS) $(LIBDIR)/ixdiag_clnt.lib
                endif #DUAL_PD

                #IxFile Client Library
                QCTLIBS := $(QCTLIBS) $(LIBDIR)/ixfile_clnt.lib

                #IxStream Client Library
                QCTLIBS := $(QCTLIBS) $(LIBDIR)/ixstream_clnt.lib

endif

        #lib files that go on both the PD's
        #IxUtil Library
        QCTLIBS := $(QCTLIBS) $(LIBDIR)/ixutil.lib

#       ifneq ($(USES_L4), yes)
#               	ifneq ($(USES_THINUI),yes)
#                        #BREW DRM EXTENSION Library
#                        QCTLIBS := $(QCTLIBS) $(LIBDIR)/AEEDRM.lib

#                        #BREW DCF Library
#                        QCTLIBS := $(QCTLIBS) $(LIBDIR)/AEEDCF.lib
#                endif #THINUI
#        endif # !L4
endif #USES_SEC

#####################################
# SECURITY SERVICES | DRM | ICONTENT#
#####################################


ifeq ($(USES_WLAN), yes)
    ifeq ($(USES_WLAN_PHG), yes)
        QCTLIBS := $(QCTLIBS) $(LIBDIR)/wlan_oem_phg.lib
    endif
    ifeq ($(USES_WLAN_ATH), yes)
        QCTLIBS := $(QCTLIBS) $(LIBDIR)/wlan_oem_ath.lib
    endif
endif

ifeq ($(USES_ZIF), yes)

ifeq ($(USES_RF_QSC1100), yes)
	QCTLIBS := $(QCTLIBS) $(LIBDIR)/rf.lib
endif
ifeq ($(USES_SBI), yes)
	QCTLIBS := $(QCTLIBS) $(LIBDIR)/sbi.lib
endif

endif

ifeq ($(USES_QVP), yes)
	QCTLIBS := $(QCTLIBS) $(LIBDIR)/qvp.lib
	QCTLIBS := $(QCTLIBS) $(LIBDIR)/qvprtp.lib
	QCTLIBS := $(QCTLIBS) $(LIBDIR)/qvpcommon.lib
	QCTLIBS := $(QCTLIBS) $(LIBDIR)/ims_core.lib
endif

ifeq ($(USES_QVPCODEC), yes)
	QCTLIBS := $(QCTLIBS) $(LIBDIR)/qvpcodec.lib
endif
ifeq ($(USES_RMNET), yes)
	QCTLIBS := $(QCTLIBS) $(LIBDIR)/rmnet.lib
	QCTLIBS := $(QCTLIBS) $(LIBDIR)/qmi.lib
endif
	QCTLIBS := $(QCTLIBS) $(LIBDIR)/xmf.lib
	QCTLIBS := $(QCTLIBS) $(LIBDIR)/trm.lib
#ifeq ($(USES_MP4), yes)
#	QCTLIBS := $(QCTLIBS) $(LIBDIR)/h264enc.lib
#endif

ifeq ($(USES_PS_LIB), yes)
QCTLIBS := $(QCTLIBS) $(LIBDIR)/ps.lib
endif

QCTLIBS := $(QCTLIBS) $(LIBDIR)/trm.lib

QCTLIBS := $(QCTLIBS) $(LIBDIR)/hw.lib

QCTLIBS := $(QCTLIBS) $(LIBDIR)/boot.lib

QCTLIBS := $(QCTLIBS) $(LIBDIR)/srch.lib

QCTLIBS := $(QCTLIBS) $(LIBDIR)/tcxomgr.lib

ifeq ($(USES_USB_HOST), yes)
	QCTLIBS := $(QCTLIBS) $(LIBDIR)/usbhost.lib
endif

#ifeq ($(USES_REL_C), yes)
	QCTLIBS := $(QCTLIBS) $(LIBDIR)/cp.lib
#endif

ifeq ($(USES_VR), yes)
include $(VDB)/vdb_rules.min
endif

ifeq ($(USES_IPV6), yes)
	QCTLIBS := $(QCTLIBS) $(LIBDIR)/ipv6.lib
endif

QCTLIBS := $(QCTLIBS) $(LIBSTDLIB)/a1std.lib

QCTLIBS := $(QCTLIBS) $(LIBDIR)/hsusb/$(BUILD)/hsu_core.lib 

ifeq ($(USES_MANGO_UI),yes)
ifeq ($(USES_MANGO_UI_HIGHLIBS),yes)
QCTLIBS := $(QCTLIBS) $(MANGO)/Mng-high.lib
endif
ifeq ($(USES_MANGO_UI_MIDLIBS),yes)
QCTLIBS := $(QCTLIBS) $(MANGO)/Mng-mid.lib
endif
ifeq ($(USES_MANGO_UI_LOWLIBS),yes)
QCTLIBS := $(QCTLIBS) $(MANGO)/Mng-low.lib
endif
endif

#-------------------------------------------------------------------------------
# Memory Architecture Dependent Files
#-------------------------------------------------------------------------------
-include dmss_$(ASIC)_memarch.min

#-------------------------------------------------------------------------------
# Debug Symbols
#-------------------------------------------------------------------------------
-include dmss_dbg.min

#===============================================================================
#			      TARGET RULES
#===============================================================================

# The following are the target rules supported by this makefile with the
# exception of the 'depend' target which is located at the end of this file.
ifeq ($(USES_MMI),yes)
#-------------------------------------------------------------------------------
#
# Rules for building Const File System
#
#-------------------------------------------------------------------------------
vpath %.c $(BREW_CONST)

CONSTFILE_FILENAMES 	= $(filter-out FLAGS:%, $(filter-out fs:/%, $(subst |, ,$(CONSTFILE_FILES))))
CONSTFILE_SOURCES 		= $(addsuffix .c, $(CONSTFILE_FILENAMES))

CONSTFILE_FSLOC 		= $(firstword $(filter fs:/%, $(subst |, ,$(filter $(notdir $<)|%, $(CONSTFILE_FILES)))))
CONSTFILE_FLAGENT 		= $(firstword $(filter FLAGS:%, $(subst |, ,$(filter $(notdir $<)|%, $(CONSTFILE_FILES)))))
CONSTFILE_FLAGS 		= $(subst FIXED,-f,$(subst ., ,$(subst FLAGS:, , $(CONSTFILE_FLAGENT))))

CONSTFILE_OBJS 			= $(addprefix $(TARGETDIR)/,$(CONSTFILE_SOURCES:%.c=%.o))
CONSTFILE_BAR_FSLOC 	= $(firstword $(filter fs:/%, $(subst |, ,$(filter $(notdir $(<:%.brx=%.bar))|%, $(CONSTFILE_FILES)))))
CONSTFILE_BAR  			= $(filter %.bar, $(CONSTFILE_FILENAMES))
CONSTFILE_BAR_SRC 		= $(addsuffix .c, $(CONSTFILE_BAR))
CONSTFILE_BIN  			= $(filter-out %.bar, $(CONSTFILE_FILENAMES))
CONSTFILE_BIN_SRC 		= $(addsuffix .c, $(CONSTFILE_BIN))

$(BREW_CONST)/OEMConstFiles_Dynamic.c : OEMConstFiles.c $(CONSTFILE_SOURCES)
	@echo ------------------------------------------------------------------------
	@echo Generating $@
	@cp $< $@
	@chmod 666 $@
	@$(BREW_OEM_SRC)/../utils/OEMConstFileMod.exe $@ $(CONSTFILE_FILENAMES)
	@echo ------------------------------------------------------------------------
	
OBJECTS += $(CONSTFILE_OBJS)

$(CONSTFILE_BIN_SRC) : %.c: %
	@echo ------------------------------------------------------------------------
	@echo Creating C File $@
	$(BREWDIR)/pk/utils/bin2src.exe -s$(subst /,\\,$<) -d$(CONSTFILE_FSLOC) $(CONSTFILE_FLAGS) -o$(subst /,\\,$(BREW_CONST)/$@)
	@echo ------------------------------------------------------------------------

$(CONSTFILE_BAR_SRC) : %.bar.c: %.brx
	@echo ------------------------------------------------------------------------
	@echo Build Resource $(<:%.brx=%.bar)
	@$(BREWRC) -h $(<:%.brx=%.brh) -o $(<:%.brx=%.bar) $<
	@echo ------------------------------------------------------------------------
	@echo ------------------------------------------------------------------------
	@echo Creating C File $@
	$(BREWDIR)/pk/utils/bin2src.exe -s$(subst /,\\,$(<:%.brx=%.bar)) -d$(CONSTFILE_BAR_FSLOC) -o$(subst /,\\,$(BREW_CONST)/$@)
	@echo ------------------------------------------------------------------------

.PHONY : mmires
mmires: $(CONSTFILE_SOURCES) $(BREW_CONST)/OEMConstFiles_Dynamic.c
	@echo ------------------------------------------------------------------
	@echo BREW RESOURCE BUILDER
	@echo ------------------------------------------------------------------
endif	
#-------------------------------------------------------------------------------
# DMSS target
#-------------------------------------------------------------------------------

# The default target lists the tool versions, creates an object subdirectory
# if required, and builds the target image file and hex file.  The mobile
# object includes the compile date and time and is deleted after each build
# to ensure that it will always be rebuilt to include accurate build date and
# time information.

ifneq ($(USES_OBJECT_ONLY),yes)
ifeq ($(USES_REX),yes)
dmss : rvctflashtools setup flashtools deps libs media exe $(TARGET).bin fotapacker prereqs 
else
dmss : mmires rvctflashtools setup flashtools deps libs media  exe $(TARGET).bin fotapacker prereqs memmap 
endif
else
dmss : rvctflashtools setup flashtools deps libs media exe $(TARGET).bin fotapacker memmap 
endif

preobjs:mmires rvctflashtools setup flashtools deps libs media
	@echo "~~~~~~~~~~~~~~~~~~~~preobjs finish~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
genobjs:$(OBJECTS) $(QCTLIBS)# $(LIBOBJECTS)	
	@echo "~~~~~~~~~~~~~~~~~~~~genobjs finish~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
	

#-------------------------------------------------------------------------------
# Dependencies
#-------------------------------------------------------------------------------

ifeq ("$(ECLOUD_BUILD_ID)","")
deps : gen_com_cmm
	@echo ------------------------------------------------------------------------
	@echo Checking dependency file...
	@if test ! -f $(DEPFILE); then $(DEPGEN) $(DEPOPTS); fi
	@echo ------------------------------------------------------------------------
else
deps : gen_com_cmm
	@echo ------------------------------------------------------------------------
	@echo ELECTRIC CLOUD BUILD, DEPENDENCY AUTOMATICACLY MAINTAINED
	@echo ------------------------------------------------------------------------
endif

.PHONY: deps

#-------------------------------------------------------------------------------
# Memmap
#-------------------------------------------------------------------------------
memmap:

#-------------------------------------------------------------------------------
# Setup
#   The following steps should be performed for every build.
#-------------------------------------------------------------------------------
setup : $(TARGETDIR)/exist $(TARGETDIR)/$(BUILD)/exist

#-------------------------------------------------------------------------------
# COPY THE JOYSTICK LIB to libs
#-------------------------------------------------------------------------------
ifeq ($(USES_JOYST), yes)
	-@chmod +w $(LIBDIR)/varatouch.lib
	$(COPY) $(call slashes,$(JOYST)/varatouch.lib $(LIBDIR)/varatouch.lib)
endif

ifeq ($(USES_WLAN_PHG), yes)
	@if test -f $(LIBDIR)/wlan_oem_phg.lib; then chmod +w $(LIBDIR)/wlan_oem_phg.lib; fi
	@if test -f ../../wlan/libs/wlan_oem_phg.lib; then cp ../../wlan/libs/wlan_oem_phg.lib $(LIBDIR); fi
endif

ifeq ($(USES_WLAN_ATH),yes)
	@if test -f $(LIBDIR)/wlan_oem_ath.lib; then chmod +w $(LIBDIR)/wlan_oem_ath.lib; fi
	@if test -f ../../wlan/libs/wlan_oem_ath.lib; then cp ../../wlan/libs/wlan_oem_ath.lib $(LIBDIR); fi
endif

$(TARGETDIR)/$(BUILD)/exist:
	@echo CREATING $(TARGETDIR)/$(BUILD)
	@if test ! -f $(TARGETDIR)/$(BUILD)/exist && test ! -d $(TARGETDIR)/$(BUILD); then mkdir $(TARGETDIR)/$(BUILD); fi
	@echo Building $(TARGETDIR)/$(BUILD) > $(TARGETDIR)/$(BUILD)/exist

#-------------------------------------------------------------------------------
# Prerequisites
#-------------------------------------------------------------------------------
ifneq ($(USES_VR), yes)
prereqs : setup $(PREREQ_OBJS) $(TARGETDIR)/firmware
else
prereqs : setup $(PREREQ_OBJS) $(TARGETDIR)/firmware vrfiles
endif
	@echo ------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# DSP Firmware Generation
# For MDSP current dir when this is executed would be modem/mdsp/build/src
# come up 4 directories then go to tools/dsp_parser
#-------------------------------------------------------------------------------
ifeq ($(BUILD_UNIX), yes)
  export DSP_PARSER_CMD := ../../../../multimedia/core/tools/dsp_parser/qdspextlinux.bin
export MDSP_PARSER_CMD := ../../mdspsvc/tools/mdspextlinux.bin
else
  export DSP_PARSER_CMD := ../../../../multimedia/core/tools/dsp_parser/qdspext.exe
export MDSP_PARSER_CMD := ../../mdspsvc/tools/mdspext.exe
endif

firmware : $(TARGETDIR)/firmware

#-------------------------------------------------------------
# Hidden dependencies as a result of the firmware rule
# Declaring these deps resolves issues in parallel builds
#-------------------------------------------------------------
qdspext.c qdspext.h qdspdmaa.h mdspext.c mdspext.h mdspdmaa.h : firmware
MDSPDIR := $(MDSPBUILD)/src

$(TARGETDIR)/firmware: $(ADSP)/qdspext.c $(MDSPDIR)/mdspext.c
	@echo FIRMWARE > $(TARGETDIR)/firmware

$(ADSP)/qdspext.c :
	if test -f $(ADSP)/adsp_firmware.mak; then $(MAKE) -C $(ADSP) --no-print-directory -f adsp_firmware.mak; fi
	@echo ------------------------------------------------------------------------

$(MDSPDIR)/mdspext.c :
	if test -f $(MDSPBUILD)/src/mdsp_firmware.mak; then $(MAKE) -C $(MDSPBUILD)/src --no-print-directory -f mdsp_firmware.mak; fi
	@echo ------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Hidden dependencies as a result of the firmware rule
# Declaring these deps resolves issues in parallel builds
#-------------------------------------------------------------------------------
qdspext.c qdspext.h qdspdmaa.h mdspext.c mdspext.h mdspdmaa.h : firmware

#===============================================================================
#			      Library Generation
#===============================================================================

ifneq ($(USES_OBJECT_ONLY), yes)
libs : setup prereqs $(LIBRARIES)
	@if test -f dmss_lib.mak; then $(MAKE) --no-print-directory -f dmss_lib.mak; fi
else
libs : $(TARGETDIR)/exist $(LIBRARIES)
	@if test -f dmss_lib.mak; then $(MAKE) --no-print-directory -f dmss_lib.mak; fi
endif

dmsslib: $(QCTLIBS)

#-------------------------------------------------------------------------------
# Object directory target
#-------------------------------------------------------------------------------

# The object subdirectory is created if it does not already exist.

$(TARGETDIR)/exist:
	@echo CREATING $(TARGETDIR)
	@if test ! -f $(TARGETDIR)/exist && test ! -d $(TARGETDIR); then mkdir $(TARGETDIR); fi
	@echo Building $(TARGETDIR) > $(TARGETDIR)/exist
	@echo CREATING $(LIBDIR)
	@if test ! -f $(LIBDIR)/exist && test ! -d $(LIBDIR); then mkdir $(LIBDIR); fi
	@echo Building Common Libraries > $(LIBDIR)/exist

#-------------------------------------------------------------------------------
# Image file target
#-------------------------------------------------------------------------------

# The target image file is produced by the linker in the selected image format,
# and then a hex file is created from the target image file.

#===============================================================================
#			   RVCT Compilation
#===============================================================================
rvctflashtools:
ifeq ($(findstring RVCT,$(ARMTOOLS)),RVCT)
	mkdir $(SRCROOT)/tools/mjflash_rvct
	chmod +w $(SRCROOT)/tools/mjflash_rvct
	$(COPY) $(call slashes,$(SRCROOT)/tools/mjflash/*.*  $(SRCROOT)/tools/mjflash_rvct/)
	mkdir $(SRCROOT)/tools/hostdl_rvct
	chmod +w $(SRCROOT)/tools/hostdl_rvct
	$(COPY) $(call slashes,$(SRCROOT)/tools/hostdl/*.*  $(SRCROOT)/tools/hostdl_rvct/)
	mkdir $(SRCROOT)/tools/hostdl_rvct/NORflash
	chmod +w $(SRCROOT)/tools/hostdl_rvct/NORflash
	$(COPY) $(call slashes,$(SRCROOT)/tools/hostdl/NORflash/*.*  $(SRCROOT)/tools/hostdl_rvct/NORflash/)
	$(COPY) $(call slashes,$(SRCROOT)/build/ms/mjflash_rvct.cmm $(SRCROOT)/tools/mjflash_rvct/)
endif

#-------------------------------------------------------------------------------
# Flash Programming Tools targets
#-------------------------------------------------------------------------------

# MJNAND/NANDPRG tools will be built for NAND_SDRAM configuration
#
# MJFLASH/ARMPRG tools will be built for NOR_PSRAM configuration
#
# No tools will be built if one of the above is not defined
#
ifneq ($(USES_EFS_ROOT_RAMDISK), yes)
ifeq ($(USES_NAND_SDRAM),yes)

cleanflashtools:
	@echo #------------------------------------------------------------------
	@echo Building NAND Flash Tools
	@echo
	make -C $(MJNAND) -f jnand.mak BUILDID=$(BUILD) veryclean
	make -C $(HOSTDL) -f ap_arm.mak BUILDID=$(BUILD) FLASHTYPE=NAND veryclean
	@echo
	@echo Done Building Flash Tools
	@echo
	@echo

ifeq ($(USES_BUILD_FLASHTOOLS), yes)
flashtools:
	@echo #------------------------------------------------------------------
	@echo Building NAND Flash Tools
	@echo
	make -C $(MJNAND) -f jnand.mak BUILDID=$(BUILD)
	make -C $(HOSTDL) -f ap_arm.mak BUILDID=$(BUILD) FLASHTYPE=NAND
	@echo
	@echo Done Building Flash Tools
	@echo
	@echo
else
flashtools:
	@echo #------------------------------------------------------------------
	@echo SKIP Building NAND Flash Tools
	@echo
endif

flashtools_install:
ifneq ($(USES_NANDPRG_HDR),yes)
	@echo
#------------------------------------------------------------------
	@echo Installing NAND Flash Tools
	@echo
	make -C $(HOSTDL) -f ap_arm.mak BUILDID=$(BUILD) FLASHTYPE=NAND install
	@echo
	@echo Done Installing Flash Tools
	@echo
	@echo
endif
#------------------------------------------------------------------

else
ifeq ($(USES_NOR_PSRAM),yes)

cleanflashtools:
	@echo #------------------------------------------------------------------
	@echo Building NOR Flash Tools
	@echo
ifeq ($(findstring RVCT,$(ARMTOOLS)),RVCT)
	make -C $(MJFLASH_RVCT) -f jflash.mak BUILDID=$(BUILD) veryclean
	make -C $(HOSTDL_RVCT) -f ap_arm.mak BUILDID=$(BUILD) ADS120HOME=$(ARMHOME) FLASHTYPE=NOR veryclean
else
	make -C $(MJFLASH) -f jflash.mak BUILDID=$(BUILD) veryclean
	make -C $(HOSTDL) -f ap_arm.mak BUILDID=$(BUILD) ADS120HOME=$(ARMHOME) FLASHTYPE=NOR veryclean
endif
	@echo
	@echo Done Building Flash Tools
	@echo
	@echo


flashtools:
	@echo
#------------------------------------------------------------------
	@echo Building NOR Flash Tools
	@echo
ifeq ($(findstring RVCT,$(ARMTOOLS)),RVCT)
	make -C $(MJFLASH_RVCT) -f jflash.mak BUILDID=$(BUILD)
	make -C $(HOSTDL_RVCT) -f ap_arm.mak BUILDID=$(BUILD) ADS120HOME=$(ARMHOME) FLASHTYPE=NOR
else
	make -C $(MJFLASH) -f jflash.mak BUILDID=$(BUILD)
	make -C $(HOSTDL) -f ap_arm.mak BUILDID=$(BUILD) ADS120HOME=$(ARMHOME) FLASHTYPE=NOR
endif
	@echo
	@echo Done Building Flash Tools
	@echo
	@echo
#------------------------------------------------------------------

flashtools_install:
ifneq ($(USES_NANDPRG_HDR),yes)
	@echo
#------------------------------------------------------------------
	@echo Installing NOR Flash Tools
	@echo
ifeq ($(findstring RVCT,$(ARMTOOLS)),RVCT)
	make -C $(HOSTDL_RVCT) -f ap_arm.mak BUILDID=$(BUILD) ADS120HOME=$(ARMHOME) FLASHTYPE=NOR install
else
	make -C $(HOSTDL) -f ap_arm.mak BUILDID=$(BUILD) ADS120HOME=$(ARMHOME) FLASHTYPE=NOR install
endif
	@echo
	@echo Done Installing Flash Tools
	@echo
	@echo
#------------------------------------------------------------------
endif

else
flashtools:
	@echo
	@echo Building flash tools for Shadow RAM mode not supported
	@echo
endif
endif
endif
#------------------------------------------------------------------
#  Generate std_loadbuild CMM scripts
#------------------------------------------------------------------
#pragma RUNLOCAL
gen_com_cmm: prereqs
	@echo $(BUILD)
	rm -f std_loadbuild.cmm
	@$(REDIRECT) std_loadbuild.cmm "do jf $(BUILD)"
	rm -f std_loadbuild_erase.cmm
	@echo do erasechip.cmm > std_loadbuild_erase.cmm
	@echo cd ..\..\build\ms >> std_loadbuild_erase.cmm
	@echo do jf $(BUILD) >> std_loadbuild_erase.cmm
	@echo
	@echo

ifeq ($(USES_MANGO_BREW),yes)
	@ar -x $(BREW_LIB)/aeenet.lib AEEWebOpts.o 
	@ar -x $(BREW_LIB)/aeeweb.lib AEESource.o 
	rm -f others.lib 
	@ar -q $(BREW_LIB)/others.lib AEESource.o AEEWebOpts.o 
	rm -f AEEWebOpts.o 
	rm -f AEESource.o 
endif
.PHONY: gen_com_cmm

BREWLIB_LISTFILE = BREWLIBS.lf

# Memory Usage
#
MEM_USAGE_OBJS := $(QCTLIBS) $(OBJECTS) $(ARMLIBS)

# Image file
#
exe : $(TARGET).$(EXETYPE)

define link
	@echo -------------------------------------------------------------------------
	@echo TARGET $(ASIC) $(BUILD) $(VERSION)
	$(CC) -E $(CUSTH) $(TG) $(ARM_ASM) -I. -I../cust -I../../data/sta -I../../gps -I$(UTILS) -I$(MIBIB) -I$(BOOT_COMMON_SHARED_BOOT) $(SCLFILE_IN) > $(SCLFILE)
	@echo $(filter %.o,$^) > $(OBJDIR)/objects.via
	$(LD) $(SWITCH)$(EXETYPE) -o $@ $(LFLAGS) -via $(OBJDIR)/objects.via $(QCTLIBS) $(THIRD_PARTY_LIBS) -via $(BREWLIB_LISTFILE)
	@-rm -f $(TARGET).hex
	@echo -------------------------------------------------------------------------
endef

ifeq ($(USES_NO_AR_LINK), yes)
# override default link commands
define link
	@echo -------------------------------------------------------------------------
	@echo NO LINK
	@echo -------------------------------------------------------------------------
endef
endif

ifeq ($(MEM_USAGE),yes)
# override default link commands
define link
	@echo MEMORY REPORT $(ASIC)$(BUILD)$(VERSION).mem.html
	@echo UNSORTED:: $(notdir $(MEM_USAGE_OBJS) ) >> $(MEMLIST)
	@$(MEMUSAGE) -b $(ASIC)$(BUILD)$(VERSION) -mf $(BUILD).map -lf $(MEMLIST) -sf memsort.lf -gf ../doc/QCT_Group_Descriptions.xml -image ../doc/prodshot_$(ASIC).gif > $(ASIC)$(BUILD)$(VERSION).mem.html
endef
endif

# Generate the list files that are used by the armlink.
# Also generate the scatter loader file if PROGRESSIVE_BOOT is used
define GenListFiles
	@-rm -f $(BREWLIB_LISTFILE)
	@$(REDIRECT) $(BREWLIB_LISTFILE) $(BREWLIBS)
	@-rm -f $(PBOOT_DIRS_LISTFILE)
	@$(REDIRECT) $(PBOOT_DIRS_LISTFILE) $(PBOOT_DIRS)
	@-rm -f $(PBOOT_EXCLUDEDIRS_LISTFILE)
	@$(REDIRECT) $(PBOOT_EXCLUDEDIRS_LISTFILE) $(PBOOT_EXCLUDE_DIRS)
	@-rm -f $(PBOOT_EXCLUDELIBS_LISTFILE)
	@$(REDIRECT) $(PBOOT_EXCLUDELIBS_LISTFILE) $(PBOOT_EXCLUDE_LIBS)
endef


# Remove the list files here
define RemListFiles
	@-rm -f $(PBOOT_DIRS_LISTFILE)
	@-rm -f $(PBOOT_EXCLUDEDIRS_LISTFILE)
	@-rm -f $(PBOOT_EXCLUDELIBS_LISTFILE)
	@-rm -f $(BREWLIB_LISTFILE)
endef

# Generate the Feature List html
define GenFeatList
	@echo FEATURE-LIST $(ASIC)$(BUILD)$(VERSION).feat.html
	@-$(FEATLIST) -d ../../build/cust -g ../../build/doc/QCT_Group_Descriptions.xml -f -h -s > ../doc/$(ASIC)$(BUILD)$(VERSION).feat.html
	@echo FEATURE-LIST Generated
endef

define CreateScatterLoader
	@$(CC) -E $(CUSTH) -DCUST_L4_SCL_H=\"$(CUSTSCLFILE)\" $(TG) -I. -I../cust -I$(MIBIB) -I../../data/sta -I$(UTILS) $(SCLFILE_IN) > $(SCLFILE_IN_PREPROCESSED)
    @$(CREATE_PROGRESSIVE_BOOT_SCATTER_LOADER) -build $(BUILD) -targetdir $(TARGETDIR) -asic $(ASIC) -armhome $(ARMHOME) -brewlibdir $(BREW_LIB) -pbootdirs $(PBOOT_DIRS_LISTFILE) -pbootexcludedirs $(PBOOT_EXCLUDEDIRS_LISTFILE) -pbootexcludelibs $(PBOOT_EXCLUDELIBS_LISTFILE) -pbootinputscl $(SCLFILE_IN_PREPROCESSED) -pbootoutputscl $(SCLFILE_OUT) >&1
endef

gen_progressive_boot_scl:
	$(GenListFiles)
	$(CreateScatterLoader)
	$(RemListFiles)

define mod_Phdr
	$(MAKE) -C $(HEADERGEN) -f pboot_utils.mak mod_elf_flags
	$(MOD_ELF_FLAGS) $(TARGET).$(EXETYPE) $(SCLFILE)
endef

define reserve_hash_segment
	rm -f $(RESERVE_HASH_SEG)
	make -C $(HEADERGEN) -f pboot_utils.mak res_hash_seg
	$(RESERVE_HASH_SEG) $(SCLFILE) $(TARGET).$(EXETYPE) $(TARGET)_offsets_adjusted.$(EXETYPE)
endef

#If running a distributed build, run the link step local; otherwise
#this pragma is ignored

$(TARGET).$(EXETYPE) : $(OBJECTS) $(QCTLIBS)# $(LIBOBJECTS)
	$(GenListFiles)
	$(link)
	$(RemListFiles)
	$(GenFeatList)
ifeq ($(USES_MMI),yes)
BUILD_VERSION=-DBUILD_ASIC=\"$(ASIC)\" -DBUILD_TARGET=\"$(BUILD)\" -DBUILD_VER=\"$(VERSION)\" -DMODELNAME=\"$(MODELNAME)\" -DMODELVERSION=\"$(MODELVERSION)\"
else
#BUILD_VERSION=-DBUILD_ASIC=\"$(ASIC)\" -DBUILD_TARGET=\"$(BUILD)\" -DBUILD_VER=\"$(VERSION)\" 
endif

#If running a distributed build, run the link step local; otherwise
#this pragma is ignored
# Bin dependencies for new-style multi-image boot
# dmss : bin_sec
# BIN file generation
# bin_sec : $(TARGET).bin
#-------------------------------------------------------------------------------
# Clean target
#-------------------------------------------------------------------------------

# The object subdirectory, target image file, and target hex file are deleted.
cleanmmires:
	@echo --------------------clean resource file--------------------------------
	@-rm -f $(BREW_CONST)/*.*
	@echo -----------------clean resource file finish----------------------------
	
cleanamss:cleanmmires	
	@echo ------------------------------------------------------------------------
	@echo Deleting the Progressive Boot Scatter Loader
	@-if test -n "$(USES_PROGRESSIVE_BOOT)"; then echo    ... remove Progressive Boot Scatter Loader; rm -f $(BUILDMS)/$(SCLFILE_IN); fi
	@echo ------------------------------------------------------------------------
	@echo CLEAN
	
#@echo    ... remove object files
#@-rm -rf $(TARGETDIR)
ifneq ($(USES_ZBLD), yes)
	@echo    ... remove library object files
	@-rm -rf $(TARGETDIR)		
else
	@cd $(TARGETDIR);rm -f *.*;rm -Rf $(BUILD);cd ..	
	
endif
	@echo    ... remove elf, hex, sym, map, scl files
	@-rm -f $(TARGET).$(EXETYPE)
	@-rm -f $(TARGET).hex
	@-rm -f $(TARGET).sym
	@-rm -f $(TARGET).map
	@-rm -f $(ASIC)_$(TARGET).scl
	@-rm -f $(ASIC)_$(BUILD_KCFG)_in_preprocessed.scl
	@-rm -f $(ASIC)_$(BUILD_KCFG).scl
	@-rm -f $(ASIC)_$(BUILD_KCFG)_nonsec_$(FLASH_TYPE).scl
	@-rm -f $(ASIC)_$(BUILD_KCFG)_sec_$(FLASH_TYPE).scl
	@-rm -f $(ASIC)_$(BUILD_KCFG)_nonsec_$(FLASH_TYPE)_2cs.scl
	@-rm -f $(ASIC)_$(BUILD_KCFG)_sec_$(FLASH_TYPE)_2cs.scl
	@-rm -f $(ASIC)_$(BUILD_KCFG)_rom_$(FLASH_TYPE).scl
	@-rm -f $(ASIC)_$(BUILD_KCFG)_rom_$(FLASH_TYPE)_2cs.scl

	@echo    ... remove static BREW txt files
	@-rm -f $(UI)/*.txt
	@echo    ... remove .i and .lst files
	@-find $(SRCROOT)/. -name '*.i' | xargs rm -f
ifneq ($(USES_ZBLD), yes)
	@echo    ... remove qdsp/mdsp files
	@-rm -f $(ADSP)/qdspext.c
	@-rm -f $(ADSP)/qdspext.h
	@-rm -f $(MDSP)/xo/mdspext.c
	@-rm -f $(MDSP)/xo/mdspdmaa.h
	@-rm -f $(MDSP)/xo/mdspext.h
	@echo ------------------------------------------------------------------------
endif

ifneq ($(USES_MMI),yes)
.PHONY: clean
else
clean: cleanamss cleanflashtools
endif

#-------------------------------------------------------------------------------
# Test target
#-------------------------------------------------------------------------------

# The flags and symbol definitions for the compiler, assembler and linker are
# listed for makefile test purposes.

test :
	@echo AFLAGS      : $(AFLAGS)
	@echo ------------------------------------------------------------------
	@echo DMSS_AFLAGS : $(DMSS_AFLAGS)
	@echo ------------------------------------------------------------------
	@echo CFLAGS      : $(CFLAGS)
	@echo ------------------------------------------------------------------
	@echo CFLAGS0     : $(CFLAGS0)
	@echo ------------------------------------------------------------------
	@echo DMSS_CFLAGS : $(DMSS_CFLAGS)
	@echo ------------------------------------------------------------------
	@echo LFLAGS      : $(LFLAGS)
	@echo ------------------------------------------------------------------
	@echo ARMLIBS     : $(ARMLIBS)
	@echo ------------------------------------------------------------------
	@echo ARMAR	      : $(ARMAR)
	@echo ------------------------------------------------------------------
	@echo ARMCC	      : $(ARMCC)
	@echo ------------------------------------------------------------------
	@echo CC	      : $(CC)
	@echo ------------------------------------------------------------------
	@echo ASM	      : $(AS)
	@echo ------------------------------------------------------------------
	@echo TARGETDIR   : $(TARGETDIR)
	@echo ------------------------------------------------------------------
	@echo QCTLIBS     : $(QCTLIBS)
	@echo ------------------------------------------------------------------
ifeq ($(USES_MMI),yes)	
	@echo CONSTFILE_BAR:$(CONSTFILE_BAR)
	@echo ------------------------------------------------------------------
endif	
	@echo PREREQ_OBJ  : $(PREREQ_OBJS)
	@echo ------------------------------------------------------------------
	@echo OBJECTS     : $(OBJECTS)
	@echo ------------------------------------------------------------------
	@echo SUBSYS_DBG_SYM  : $(SUBSYS_DBG_SYM)
	@echo ------------------------------------------------------------------
	@echo OBJS_WITH_DBG_SYMS : $(OBJS_WITH_DBG_SYMS)
	
#-------------------------------------------------------------------------------
# Tools target
#-------------------------------------------------------------------------------

# The tool versions are listed.

tools :
	@echo ------------------------------------------------------------------------
	@echo $(ARM_VERSION_BANNER)
	@$(ARMCC) $(VER_FLAG)
	@$(CC)    $(VER_FLAG)
	@$(ASM)   $(VER_FLAG)
	@echo ------------------------------------------------------------------------

#--------------------------------------------------------------------
# FOTA Packer Tool
#--------------------------------------------------------------------
fotapacker:
ifeq ($(USES_FOTA),yes)
	@echo -------------------------------------------------------------
	@echo Building FOTA Packer
	(if test -f $(FOTA)/tools/fotapacker.mak; then cd $(FOTA)/tools;  make -f fotapacker.mak ; fi)
	@echo Done Building FOTA Packer
	@echo
	@echo -------------------------------------------------------------
endif

#===============================================================================
#			  DEFAULT SUFFIX RULES
#===============================================================================

# The following are the default suffix rules used to compile all objects that
# are not specifically included in one of the module specific rules defined
# in the next section.

# The following macros are used to specify the output object file, MSG_FILE
# symbol definition and input source file on the compile line in the rules
# defined below.

SRC_FILE = $(@:%.o=%.c)#					# Input source file specification
OBJ_FILE = -o $@#							# Output obj file specification
SRC_CFILE= $(notdir $(SRC_FILE))#			# C File of src without directory

ifneq ($(USES_OBJECT_ONLY), yes)
#-------------------------------------------------------------------------------
# C, S, CPP code inference rules
#-------------------------------------------------------------------------------
# See DMSS_FLAGS.MIN for the definition

$(OBJDIR)/%.o : %.c
	$(c_compile)

#-------------------------------------------------------------------------------
# C++ code inference rules
#-------------------------------------------------------------------------------
# See DMSS_FLAGS.MIN for the definition

$(OBJDIR)/%.o : %.cpp
	$(cxx_compile)

#-------------------------------------------------------------------------------
# Assembly code inference rules
#-------------------------------------------------------------------------------
# See DMSS_FLAGS.MIN for the definition

$(OBJDIR)/%.o : %.s
	$(s_compile)

#-------------------------------------------------------------------------------
# Mixed source/assembly inference rule
#-------------------------------------------------------------------------------
$(OBJDIR)/%.mix : %.c
	@echo ------------------------------------------------------------------------
	@echo OBJECT $@ CV
	$(CC) -o $@ -S -fs $(CFLAGS) $(DMSS_CFLAGS) $(ALL_INCLUDES) $(QTV_PATHS) -I"$(ARMINC)" $(BUILD_VERSION) $(APPFLAGS) $(MSG_BT_SSID) $<
	@echo ------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# State machine build inference rules
#-------------------------------------------------------------------------------
$(STM_OBJDIR)/%.smt : %.smf
	@echo ------------------------------------------------------------------------
	@echo STATE MACHINE $*
	$(CC) $(CFLAGS) $(DMSS_CFLAGS) $(ALL_INCLUDES) $(QTV_PATHS) -I"$(ARMINC)" $(BUILD_VERSION) $(APPFLAGS) $(MSG_BT_SSID) -E $< | $(SMCOMP) -t -b $* -d $(STM_OBJDIR)
	@echo ------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# BREW resource file inference rules
#-------------------------------------------------------------------------------
$(COREAPP)/%_res.txt : %.bar
	@echo ------------------------------------------------------------------------
	@echo BREW RESOURCE FILE $(notdir $<)
	@-rm -f $@
	@$(B2A) $< > $@
	@echo ------------------------------------------------------------------------

$(COREAPP)/%_qcp.txt : %.qcp
	@echo ------------------------------------------------------------------------
	@echo BREW RESOURCE FILE $(notdir $<)
	@-rm -f $@
	@$(B2A) $< > $@
	@echo ------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# WMSAPP EMS file inference rules
#-------------------------------------------------------------------------------
$(COREAPP)/%_bmp.txt : %.bmp
	@echo ------------------------------------------------------------------------
	@echo WMSAPP EMS FILE $(notdir $<)
	@-rm -f $@
	@$(B2A) $< > $@
	@echo ------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# WMSAPP EMS file inference rules
#-------------------------------------------------------------------------------
$(COREAPP)/%_imy.txt : %.imy
	@echo ------------------------------------------------------------------------
	@echo WMSAPP EMS FILE $(notdir $<)
	@-rm -f $@
	@$(B2A) $< > $@
	@echo ------------------------------------------------------------------------
endif

# if USES_OBJECT_ONLY == yes

#===============================================================================
#			  MODULE SPECIFIC RULES
#===============================================================================
# The following module specific rules allow sets of objects to be compiled
# with compiler flags other than the defaults used in the suffix rules defined
# above.  The following rules use the module specific compiler flags defined
# at the beginning of this file.  New objects can be added to any of the
# following rules by modifying the corresponding list of objects.

#===============================================================================
#			    LOADEFS Directory Construction
#===============================================================================

media:

$(TARGETDIR)/mediacopy:
	@echo MEDIACOPY > $(TARGETDIR)/mediacopy
	-$(MEDIACOPY)
