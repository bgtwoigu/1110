#============================================================================
#
#  Description:
#    An includable component of the makefile to define the fixed addresses
#    and other data used during the build process.
#
#
# Copyright (c) 2006-2007 by QUALCOMM, Incorporated. All Rights Reserved.
#----------------------------------------------------------------------------
#============================================================================
#
#                       EDIT HISTORY FOR MODULE
#
# $Header: //depot/asic/qsc1100/build/ms/boot_targets_param.min#2 $ $DateTime: 2007/12/02 18:53:58 $ $Author: psanghvi $
#
# when       who     what, where, why
# --------   ---     --------------------------------------------------------
# 11/30/07   ps      Adding support for SECBOOT 2.0
# 02/12/07   rjain   Fixed OEMSBL_ADDR for NAND builds
# 12/30/06   anb     Added support to auto-generate miaddress.h file.
# 11/15/06   rjain   Added support for OEMSBL tone feature.
#                    Rollback changes made in #5
# 07/05/06   rjain   Created for 6260
#============================================================================

#-------------------------------------------------------------------------------
# This file is used to define the memory layout for the a particular target
# RAM_START_ADDR  = Where the RAM is located (which Chip Select)
# QCSBL_ADDR      = QCSBL start address to be used in the scatter loader file
# OEMSBL_ADDR     = OEMSBL start address to be used in the scatter loader file
# AMSS_ADDR       = AMSS start address to be used in the scatter loader file
# HOSTDL_ADDR_HDR = HOST Downloaders Header address
# HOSTDL_ADDR     =
#
# For NAND/SDRAM Device= following needs to be defined in this file....
# RAM_START_ADDR           Chip Select Address.
# QCSBL_ADDR               Destination Address for QCSBL image
# OEMSBL_ADDR              Destination Address for OEMSBL image
# AMSS_ADDR                Destination Address for AMSS image
# HOSTDL_ADDR_HDR
# HOSTDL_ADDR
# OEMSBL_NAND_STACK_BASE   OEMSBL's stack address
# SBL_NAND_STACK_BASE      OEMSBL's stack address
#
# For NOR/PSRAM Device= following needs to be defined in this file...
# RAM_START_ADDR           Chip Select Address.
# QCSBL_ADDR               Destination Address for QCSBL image
# QCSBL_DATA_ADDR          Address location to start RW/NZI/ZI
# OEMSBL_ADDR              Destination Address for OEMSBL image
# OEMSBL_DATA_ADDR         Address location to start RW/NZI/ZI
# AMSS_DATA_ADDR           Address location to start RW/NZI/ZI
# HOSTDl_ADDR_HDR
# HOSTDL_ADDR
# OEMSBL_NOR_STACK_BASE    OEMSBL's stack address
# SBL_NOR_STACK_BASE       OEMSBL's stack address
# OEMSBL_NAND_STACK_BASE   = 0x0
# SBL_NAND_STACK_BASE      = 0x0
# Important Point to Note for NOR Builds:
# QCSBL_ADDR and QCSBL_DATA_ADDR are mutually exclusive (only one needs to be defined)
# OEMSBL_ADDR and OEMSBL_DATA_ADDR are mutually exclusive (only one needs to be defined)
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Chip Select Address
#-------------------------------------------------------------------------------
CS0 = 0x0
CS1 = 0x08000000
CS2 = 0x10000000
CS3 = 0x18000000
IMEM_BASE = 0x58010000

ifeq ($(USES_NOR_PSRAM),yes)
        RAM_START_ADDR = $(CS1)

        #-------------------------------------------------------------------------------
        # Example Layout
        # QCSBL_ADDR        = SRC and DEST in NOR
        # QCSBL_DATA_ADDR   = Data location in RAM
        # OEMSBL_ADDR       = SRC and DEST in NOR
        # OEMSBL_DATA_ADDR  = Data location in RAM
        # AMSS_DATA_ADDR    = AMSS Data in RAM
        #-------------------------------------------------------------------------------
        #QCSBL_ADDR  =
        #QCSBL_DATA_ADDR = 0x3000
        #OEMSBL_ADDR =
        #OEMSBL_DATA_ADDR = 0x1C000
        #OEMSBL_STACK_BASE = 0x50000
        #AMSS_DATA_ADDR = 0x60000

        #-------------------------------------------------------------------------------
        # Example Layout
        # QCSBL_ADDR        = SRC in NOR and DEST in RAM
        # QCSBL_DATA_ADDR   = Data location will follow CODE in RAM
        # OEMSBL_ADDR       = SRC in NOR and DEST in RAM
        # OEMSBL_DATA_ADDR  = Data location will follow CODE in RAM
        # AMSS_DATA_ADDR    = AMSS Data in RAM
        #-------------------------------------------------------------------------------
        #QCSBL_ADDR  = 0x3000
        #QCSBL_DATA_ADDR =
        #OEMSBL_ADDR = 0x23000
        #OEMSBL_DATA_ADDR =
        #OEMSBL_STACK_BASE = 0x84000
        #AMSS_DATA_ADDR = 0x90000

        #-------------------------------------------------------------------------------
        # Example Layout
        # QCSBL_ADDR        = SRC and DEST in NOR
        # QCSBL_DATA_ADDR   = Data location in RAM
        # OEMSBL_ADDR       = SRC in NOR and DEST in RAM
        # OEMSBL_DATA_ADDR  = Data location will follow CODE in RAM
        # AMSS_DATA_ADDR    = AMSS Data in RAM
        #-------------------------------------------------------------------------------
	ifeq ($(USES_SECBOOT_2_0),yes)
            FSBL_ADDR    = 0x00010000
            DBL_ADDR     = 0x0000
            OSBL_ADDR    = 0x00060000
            OSBL_STACK_BASE    = 0x000F8000
        else
        QCSBL_ADDR  =
	QCSBL_DATA_ADDR = 0x3000
	OEMSBL_ADDR = 0x1C000
        OEMSBL_DATA_ADDR =
	OEMSBL_STACK_BASE = 0x7D000
        endif
	AMSS_DATA_ADDR = 0x80000

        #-------------------------------------------------------------------------------
        # NORPRG related definitions
        # HOSTDL_DOWNLOAD_ADDR = Is offset from RAM_START_ADDR
        # HOSTDL_ADDR_HDR      = Is the physical address ( RAM_START_ADDR + HOSTDL_DOWNLOAD_ADDR )
        # HOSTDL_ADDR          = Is the physical address (offset of 28 bytes from HOSTDL_ADDR)
        #-------------------------------------------------------------------------------
        HOSTDL_DOWNLOAD_ADDR = 0x08800000

        # Hard coded, as is the .scl file.  Need to define in a central location,
        # like the .builds file, and redo the .scl file to match
        HOSTDL_ADDR_HDR = 0x08800000

	ifeq ($(USES_NORPRG_HDR),yes)
        # Offset the start of the HOSTDL code
        # HOSTDL_ADDR will be used to over-write nandprg S_ADDR in ap_config.min
	HOSTDL_ADDR = 0x08800028
	endif
        
        ifeq ($(USES_NO_NOR_PARTITION), yes)
          DBL_SRC_ADDR= 0x0
          FSBL_SRC_ADDR= 0x8000
          OSBL_SRC_ADDR= 0x15000
          AMSS_SRC_ADDR= 0x40000
        endif


else
        RAM_START_ADDR = $(CS0)

	#-------------------------------------------------------------------------------
	# QCSBL/OEMSBL/AMSS related definitions
        # DBL address is the offset from IMEM/IRAM
	#-------------------------------------------------------------------------------
	ifeq ($(USES_SECBOOT_2_0),yes)
            FSBL_ADDR    = 0x00010000
            DBL_ADDR     = 0x0000
            OSBL_ADDR    = 0x00060000
            OSBL_STACK_BASE    = 0x000F8000
        else
	QCSBL_ADDR   = 0x00080000
	OEMSBL_ADDR  = 0xA0000
        ifeq ($(USES_OEMSBL_AUDIBLE_TONE),yes)
          OEMSBL_STACK_BASE = 0x00118000
        else
          OEMSBL_STACK_BASE = 0x00380000
        endif
        endif
	AMSS_ADDR    = 0x134000

        #-------------------------------------------------------------------------------
        # NANDPRG related definitions
        # HOSTDL_DOWNLOAD_ADDR = Is offset from RAM_START_ADDR
        # HOSTDL_ADDR_HDR      = Is the physical address ( RAM_START_ADDR + HOSTDL_DOWNLOAD_ADDR )
        # HOSTDL_ADDR          = Is the physical address (offset of 28 bytes from HOSTDL_DOWNLOAD_ADDR)
        #-------------------------------------------------------------------------------
        HOSTDL_DOWNLOAD_ADDR = 0x0

        # Hard coded, as is the .scl file.  Need to define in a central location,
        # like the .builds file, and redo the .scl file to match
        HOSTDL_ADDR_HDR = 0x00800000

	ifeq ($(USES_NANDPRG_HDR),yes)
        # Offset the start of the HOSTDL code
        # HOSTDL_ADDR will be used to over-write nandprg S_ADDR in ap_config.min
        HOSTDL_ADDR = 0x00800028
endif
endif

#-------------------------------------------------------------------------------
# EXPORTS
#-------------------------------------------------------------------------------
export RAM_START_ADDR
export HOSTDL_ADDR
export HOSTDL_ADDR_HDR
export AMSS_ADDR
export AMSS_DATA_ADDR
export HOSTDL_DOWNLOAD_ADDR

ifeq ($(USES_SECBOOT_2_0),yes)
export FSBL_ADDR
export DBL_ADDR
export OSBL_ADDR
export OSBL_STACK_BASE
export IMEM_BASE
else
export QCSBL_ADDR
export QCSBL_DATA_ADDR
export OEMSBL_DATA_ADDR
export OEMSBL_STACK_BASE
endif

ifeq ($(USES_NOR_PSRAM),yes)
ifeq ($(USES_NO_NOR_PARTITION), yes)
export DBL_SRC_ADDR
export FSBL_SRC_ADDR
export OSBL_SRC_ADDR
export AMSS_SRC_ADDR
endif
endif
