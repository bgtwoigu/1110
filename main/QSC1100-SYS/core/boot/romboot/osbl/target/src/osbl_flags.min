#============================================================================
#  Name:
#    OSBL_FLAGS.MIN
#
#  Description:
#    An includable component of the makefile to build the OSBL software.
#
# Copyright (c) 2008 by QUALCOMM, Incorporated.  All Rights Reserved.
#----------------------------------------------------------------------------
#============================================================================
#
#                        EDIT HISTORY FOR MODULE
#
# $Header: //depot/asic/qsc1100/romboot/osbl/osbl_flags.min#6 $
#
# when       who     what, where, why
# -------    ---     --------------------------------------------------------
# 10/16/08    tnk     Include  QHSUSB Stack in osbl for fast enum
# 02/07/08    MJS     Use flash_open() API.
# 01/09/08    MJS     Initial revision ported from Raptor1 and Serra.
#============================================================================


#-------------------------------------------------------------------------------
# Target compile time symbol definitions
#-------------------------------------------------------------------------------


# It is either QHSUSB or HSU.
ifeq ($(USES_QHSUSB),yes)
    override USES_HSU = no
endif
ifeq ($(USES_OSBL_CHG_SCREEN),yes)
  EXTENSIONS := $(EXTENSIONS) -DFEATURE_BOOT_SPLASH_SCREEN
endif

# This is the customer include file
ifeq ($(BUILD_UNIX), yes)
    CUSTFILE       =$(shell echo CUST$(BUILD).H | tr "[:upper:]" "[:lower:]")
else
    CUSTFILE       = CUST$(BUILD).H
endif

DEPEND_FLAGS = $(DEPEND) $(@D)/$*.dep

KEEP_FLAGS = $(addprefix $(KEEP) , $(KEEP_OBJECTS))

export CUSTH   = -DCUST_H=\"$(CUSTFILE)\" # Feature include file definition
ARM_ASM = -D_ARM_ASM_#                    # ARM assembly language selection
ARM     = -DT_ARM -D__ARMEL__#            # ARM processor target

# Flags for various target extensions
EXTENSIONS =  -DBOOT_LOADER -DBUILD_BOOT_CHAIN -DOSBL #
EXTENSIONS += -DFLASH_NAND_SINGLE_THREADED -DFLASH_CLIENT_BOOT #
EXTENSIONS += -DIMAGE_MODEM_PROC $(CUSTH) #
EXTENSIONS += -DBOOT_WATCHDOG_DISABLED #

# Build information for DLOAD detection
#BUILD = "0315"
#ASIC = "7500X"
EXTENSIONS += -DBOOT_MSM_H=\"osbl_boot_msm.h\"
BUILD_VERSION:= -DBUILD_ASIC=\"$(ASIC)\" -DBUILD_TARGET=\"$(BUILD_VERSION)\" \
                 -DBUILD_VER=\"$(BUILD)\" -DBOOT_TARGET

EXTENSIONS += $(BUILD_VERSION)
EXTENSIONS += -DBOOT_SBL_H=\"boot_comdef.h\" #Make this a nop
EXTENSIONS += -DBOOT_CUSTSBL_H=\"custosbl.h\"
EXTENSIONS += -DBOOT_SBLDLOAD_H=\"osbl_dload.h\"

ALL_INCLUDES += -I$(BOOT_SHARED)

# Extract the build version for module versioning
BOOT_MODULE_BUILD_VERSION := $(shell perl -e "'$(VERSION)'=~/^\\d{1,4}/g; print int $$&")#
ifeq ($(strip $(BOOT_MODULE_BUILD_VERSION)),)
  BOOT_MODULE_BUILD_VERSION := 0#
endif
EXTENSIONS += -DBOOT_MODULE_BUILD_VERSION=$(BOOT_MODULE_BUILD_VERSION)

EXTENSIONS += -DRUMI_TEST

# data cache feature
BOOT_USES_DCACHE = FALSE
ifeq ($(BOOT_USES_DCACHE),TRUE)
  EXTENSIONS += -DBOOT_USES_DCACHE
endif

#CE MODS
USE_CE = FALSE
ifeq ($(USE_CE),TRUE)
  EXTENSIONS += -DBOOT_USE_CE -DFEATURE_CE_BUG
endif

#DM MODS
USE_DM = FALSE
ifeq ($(USE_DM),TRUE)
  EXTENSIONS += -DUSE_DM -DDMOV_NO_IRQ \
                -DDMOV_APP_H=\"flash_dmov_msg.h\"  \
                -DFLASH_NAND_ECC_SET_ALLOWED
  ifeq ($(BOOT_USES_DCACHE),TRUE)
    EXTENSIONS += -DDMOV_WRITE_THROUGH_CACHE
  else
    EXTENSIONS += -DDMOV_NO_CACHE
  endif
endif

ifeq ($(FLASH),IMEM)
EXTENSIONS += -DBUILD_IMEM #
endif

#-------------------------------------------------------------------------------
# Diagnostic support options (default = no diagnostics support)
#-------------------------------------------------------------------------------
TIMETEST     =  #                       # Disable TIMETEST profiling support
#TIMETEST     = -DTIMETEST              # Enable TIMETEST profiling support
#SHOW_STAT    = -DSHOW_STAT#            # Force LOCALs to visible global scope
SHOW_STAT     =                         # Force LOCALs to visible global scope

ASSERT_FATAL = -DASSERT=ASSERT_FATAL#   # Invoke ERR_FATAL for ASSERT
ASSERT_WARN  = -DASSERT=ASSERT_WARN#    # Invoke ERR for ASSERT
ASSERT_NONE  = -DASSERT#                # Invoke None for ASSERT
#-------------------------------------------------------------------------------
# Diagnostic message options (default = no diagnostics messages)
#-------------------------------------------------------------------------------
MSG_LVL_LOW   = -DMSG_LEVEL=MSG_LVL_LOW#        # ALL message priority levels
MSG_LVL_MED   = -DMSG_LEVEL=MSG_LVL_MED#        # MED priority level and above
MSG_LVL_HIGH  = -DMSG_LEVEL=MSG_LVL_HIGH#       # HIGH priority level and above
MSG_LVL_ERROR = -DMSG_LEVEL=MSG_LVL_ERROR#      # ERROR priority level and above
MSG_LVL_NONE  = -DMSG_LEVEL=MSG_LVL_NONE#       # NO messages

#-------------------------------------------------------------------------------
# Compiler symbol definitions
#-------------------------------------------------------------------------------
# Default definitions
DMSS_CFLAGS = $(ARM) $(EXTENSIONS) $(SHOW_STAT) $(TIMETEST) $(DEPEND_FLAGS) $(ASSERT_NONE)


#-------------------------------------------------------------------------------
# Assembler symbol definitions
#-------------------------------------------------------------------------------
DMSS_AFLAGS = $(ARM) $(ARM_ASM) $(APCS) $(EXTENSIONS) $(TIMETEST)

#-------------------------------------------------------------------------------
# Linker symbol definitions
#-------------------------------------------------------------------------------
DMSS_LFLAGS = $(KEEP_FLAGS)

