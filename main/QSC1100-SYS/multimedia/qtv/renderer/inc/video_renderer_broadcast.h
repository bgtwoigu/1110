#ifndef QTV_VIDEO_RENDERER_BROADCAST_H
#define QTV_VIDEO_RENDERER_BROADCAST_H
/* =======================================================================

                          video_renderer_broadcast.h

DESCRIPTION
  Definition of the broadcast types generated by the video renderer.

INITIALIZATION AND SEQUENCING REQUIREMENTS
  None.

Copyright 2005 QUALCOMM Incorporated, All Rights Reserved
========================================================================== */
/* =======================================================================
                             Edit History

$Header: //source/qcom/qct/multimedia/qtv/renderer/main/latest/inc/video_renderer_broadcast.h#1 $
$DateTime: 2008/05/09 08:14:38 $
$Change: 657007 $

========================================================================== */

/* =======================================================================
**               Includes and Public Data Declarations
** ======================================================================= */

/* ==========================================================================

                     INCLUDE FILES FOR MODULE

========================================================================== */
/* Includes custmp4.h. The following 2 includes must be the first includes in this file! */
#include "customer.h"
#include "qtvInternalDefs.h"
#include "broadcast.h"
#include "vdecoder_types.h"
#include "qtv_utils.h"

/* ==========================================================================

                        DATA DECLARATIONS

========================================================================== */
/* -----------------------------------------------------------------------
** Constant / Define Declarations
** ----------------------------------------------------------------------- */

/* -----------------------------------------------------------------------
** Type Declarations
** ----------------------------------------------------------------------- */

/* -----------------------------------------------------------------------
** Global Constant Data Declarations
** ----------------------------------------------------------------------- */

/* -----------------------------------------------------------------------
** Global Data Declarations
** ----------------------------------------------------------------------- */

/* =======================================================================
**                        Macro Definitions
** ======================================================================= */

/* =======================================================================
**                        Class & Function Declarations
** ======================================================================= */
class QTV_VideoRendererBroadcast : public QTV_Broadcast
{
public:

  // Subtypes are used in some cases to provide extra clarification
  // of the event type for those receivers which are interested.
  enum Subtype
  {
    FIRST_SUBTYPE = 0,
    SUBTYPE_UNUSED = FIRST_SUBTYPE, // No extra information available.
    SUBTYPE_DROP_DUE_TO_AVSYNC,            // frame late wrt audio
    SUBTYPE_DROP_DUE_TO_RENDERING_FAILURE, // application not ready
    SUBTYPE_DROP_DUE_TO_FRAME_ERROR,       // an error in the decoded frame
    SUBTYPE_DROP_DUE_TO_RENDERER_MODE,     // renderer not ready
    NUM_SUBTYPES
  };

  Subtype m_subtype;
  
  // The frame buffer pointer in the VDEC_FRAME is not guaranteed to 
  // be valid when broadcasts are received.  However, everything else in
  // the structure is good, and that's the useful part anyway.
  
  VDEC_FRAME m_frame;

  // Timeliness is a measure of how far from the proper presentation time
  // the frame was dispatched.  Negative is late, positive is early.
  // 0 means the frame was right on time.
  // This does not have meaning for flush notifications.
  
  long m_timeliness; 

  QTV_VideoRendererBroadcast
  (
    const QTV_Broadcast::Type type,
    const Subtype             subtype,
    const VDEC_FRAME         &frame,
    const long                timeliness
  );
  
  virtual ~QTV_VideoRendererBroadcast( void );

  #ifdef QTV_BROADCAST_VERBOSE_DIAG

  virtual int Describe( char* const pBuf, const int bufSiz );

  #endif /* QTV_BROADCAST_VERBOSE_DIAG */
};

#endif // QTV_VIDEO_RENDERER_BROADCAST_H
