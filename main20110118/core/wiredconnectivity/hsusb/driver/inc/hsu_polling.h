#ifndef HSU_POLLING_H
#define HSU_POLLING_H

/*==============================================================================

HSU_POLLING.H


GENERAL DESCRIPTION
This file define functions that used in HS USB polling mode.


EXTERNALIZED FUNCTIONS
hsu_polling_init
hsu_polling_read
hsu_polling_write
hsu_polling_handle_interrupt
hsu_polling_is_active


INITIALIZATION AND SEQUENCING REQUIREMENTS
hsu_polling_init should be called to use other APIs.

Copyright (c) 2008 by QUALCOMM, Incorporated.  All Rights Reserved.
==============================================================================*/

/*==============================================================================

EDIT HISTORY FOR MODULE

This section contains comments describing changes made to the module.
Notice that changes are listed in reverse chronological order.

$Header:

when      who     what, where, why
--------  ---     --------------------------------------------------------------
10/28/08  tk     Initial version

==============================================================================*/


/*===========================================================================

                     INCLUDE FILES FOR MODULE

===========================================================================*/
#include <jtypes.h>
#include "jusb_common.h"

/*==============================================================================
Constants and Macros
==============================================================================*/

/*==============================================================================
Typedefs
==============================================================================*/
/* forward declaration for hsu_polling_handle_type for use in 
   hsu_polling_rx_callback and  hsu_polling_tx_callback typedef */
typedef struct hsu_polling_handle_s hsu_polling_handle_type;

/* read complete callback function */
typedef void (*hsu_polling_rx_callback)(hsu_polling_handle_type *handle);

/* write complete callback function */
typedef void (*hsu_polling_tx_callback)(hsu_polling_handle_type *handle);

/* status of read and write operation */
typedef enum {
  HSU_POLLING_SUCCESS,
  HSU_POLLING_BLOCKED,
  HSU_POLLING_IDLE,
  HSU_POLLING_START,
  HSU_POLLING_COMPLETED,
  HSU_POLLING_ERROR
}  hsu_polling_status;

/* core context */
typedef void * hsu_polling_core_t;

/* polling handle for read and write operation. It is generated by 
   hsu_polling_init */
struct hsu_polling_handle_s {
  jbool_t active;
  jbool_t is_core_configured;
  jbool_t is_buff_pmem;
  hsu_polling_status rx_state;
  hsu_polling_status tx_state;
  hsu_polling_core_t core_ctx;
  juint8_t in_ep_num;
  juint8_t out_ep_num;
  pipe_desc_t *in_pipe;
  pipe_desc_t *out_pipe;
  hsu_polling_rx_callback rxcb;
  juint32_t rx_size;
  hsu_polling_tx_callback txcb;
  juint32_t tx_size;  
};

/*==============================================================================
Externalized Variables
==============================================================================*/

/*===========================================================================

                      FUNCTION DEFINITIONS

===========================================================================*/
  
/*===========================================================================

FUNCTION hsu_polling_init

DESCRIPTION
  The function initializes the polling mode. It disables the interrupt and task 
  switching and modifies core vairalbles for polling mode operation. It will 
  return the handle for other APIs from hsu_polling.

DEPENDENCIES
None.

RETURN VALUE
hsu polling handle.

SIDE EFFECTS
  interrupt and task switching are disabled.
  
===========================================================================*/
hsu_polling_handle_type *hsu_polling_init
(
  juint8_t core_idx,
  juint8_t in_ep_num,
  juint8_t out_ep_num,
  hsu_polling_rx_callback rxcb,
  hsu_polling_tx_callback txcb,
  jbool_t is_buff_pmem
);

/*===========================================================================

FUNCTION hsu_polling_handle_interrupt

DESCRIPTION
  The function reads the interupt status register and call the corresponding 
  interrupt handlers. It kicks hardware watch dog to prevent dog reset. 

DEPENDENCIES
  hsu_polling_init must have been called in advance. 

RETURN VALUE
None.

SIDE EFFECTS
None.
===========================================================================*/
void hsu_polling_handle_interrupt(void);


/*===========================================================================

FUNCTION hsu_polling_read

DESCRIPTION
  It receives the data from host. The buffer should be from physical address 
  and non-cached if local feature HSU_POLLING_BUFFER_DMA_ABLE is turned on. 
  The size variable  is the size of the buffer. The data in the buffer is only 
  valid when the return value is not 0. 

DEPENDENCIES
  hsu_polling_init must have been called in advance. 

RETURN VALUE
 the size of valid read.

SIDE EFFECTS
None.
===========================================================================*/
juint32_t hsu_polling_read
(
  hsu_polling_handle_type *handle, 
  void *buffer, 
  juint32_t size
);

/*===========================================================================

FUNCTION hsu_polling_write

DESCRIPTION
  The function send data to host. It only returns when the tranmission is 
  completed. the buffer should from  physical address and non-cached if local 
  feature HSU_POLLING_BUFFER_DMA_ABLE is turned on. The size variable  is the 
  size of  valid data. The return value is the size of data sent.
  
DEPENDENCIES
  hsu_polling_init must have been called in advance. 

RETURN VALUE
  The size of data sent. 

SIDE EFFECTS
None.
===========================================================================*/
juint32_t hsu_polling_write
(
  hsu_polling_handle_type *handle, 
  void *buffer, 
  juint32_t size
);

/*===========================================================================

FUNCTION hsu_polling_is_active

DESCRIPTION
  It tells if polling mode is enabled or not. The polling mode is enabled once 
  hsu_polling_init has been called. 

DEPENDENCIES
None.

RETURN VALUE
  TRUE : polling mode
  FALSE : normal mode. 

SIDE EFFECTS
None.
===========================================================================*/
jbool_t hsu_polling_is_active(void);

#endif /* !HSU_POLLING_H */
