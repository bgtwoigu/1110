/*=====================================================================
USE CASE SCENARIOS DOCUMENTATION
=======================================================================
=ICamera - Creating and setting up an ICamera object=

This section discusses how the user can creates an ICamera object and sets it up for snapshot or movie recording.

The discussion covers the following broad steps:

* Creating an ICamera object: including choosing the camera sensor
* Setting up an ICamera object: for snapshot or movie recording
*

==Creating an ICamera object==

A device may support one or more camera sensors. In BREW, each camera sensor is identified by a classID. For example, if
a device with two sensors uses AEECLSID_CAMERA to refer to the default sensor, then use AEECLSID_CAMERA2 to refer to the
second one. Each of these classes represents an ICamera interface.

To create a new ICamera object, use the ISHELL_CreateInstance() API:
{{{
   nErr = ISHELL_CreateInstance(pme->a.m_pIShell, AEECLSID_CAMERA, (void **)&pme->m_pICamera);
   if (SUCCESS != nErr)
   {
      // Handle error condition
      return;
   }
}}}

Now, pme->m_pICamera refers to the camera sensor of the device. The ICamera object will be in the READY mode.

==Setting up an ICamera object==

After successfully creating an ICamera object, you need to perform the steps outlined in this section to make it ready for the snapshot or preview mode.

=== Registering a callback function===
ICamera delivers several asynchronous events via the callback function during operations like preview, record snapshot, record movie, and so forth. You need to register a callback function to receive ICamera events:
{{{
   // Register CApp_CameraNotify() function as callback.
   nErr = ICAMERA_RegisterNotify(pme->pICamera, CApp_CameraNotify, pme);
   if (SUCCESS != nErr)
   {
      // Handle error condition
      return;
   }
}}}
ICamera operations like preview, record snapshot, record movie and some parameters configuration are asynchronous in nature. These operations trigger
various asynchronous events that are delivered via the registered callback. For example, when preview is started, ICAMERA_Preview() returns SUCCESS. This means
the preview command is accepted and preview will begin soon. Subsequently, all preview events are sent via the callback. In case of parameters configuration, if ICAMERA_SetParm()/ICAMERA_GetParm() return
CAM_PENDING, then it means result of the operation will be delivered via callback.
An application need not process all the ICamera events but only the required events. The AEECameraNotify structure in the registered callback function (CApp_CameraNotify) contains the event information:
* nCmd: contains command information (CAM_CMD_XXX).
* nSubCmd: contains command specific information.
* nStatus: contains the operation status ( CAM_STATUS_XXX).
* pData: points to context specific data.
* dwSize: contains the size (in bytes) of context-specific data.
*
The discussions in the following sections represent an event as {nCmd, nSubCmd, nStatus [, pData][, dwSize]}

===Setting the preview type ===
The preview type specifies the intended use of preview, that is, whether the preview is being done for snapshot recording or movie recording.
This helps optimize device multimedia resources. 

{{{
   // To preview for snapshot, specify CAM_PREVIEW_SNAPSHOT.
   nErr = ICAMERA_SetParm(pme->pICamera, CAM_PARM_PREVIEW_TYPE, CAM_PREVIEW_SNAPSHOT, 0);
   if (SUCCESS != nErr)
   {
      // Handle error condition
      return;
   }

   // To preview for movie, specify CAM_PREVIEW_MOVIE.
   nErr = ICAMERA_SetParm(pme->pICamera, CAM_PARM_PREVIEW_TYPE, CAM_PREVIEW_MOVIE, 0);
   if (SUCCESS != nErr)
   {
      // Handle error condition
      return;
   }
}}}

=== Setting the display size===
The display size is the size of the preview (view finder) frame that is displayed as the camera frames are previewed.
{{{
   nErr = ICAMERA_SetDisplaySize(pme->m_pICamera, &pme->m_sizeDisplay);
   if (SUCCESS != nErr)
   {
      // Handle error condition
      return;
   }
}}}

===Setting a frame size for encoding===
Set the size of the frame to be encoded. This is usually larger than the display size.
{{{
   nErr = ICAMERA_SetSize(pme->m_pICamera, &pme->m_sizeFrame);
   if (SUCCESS != nErr)
   {
      // Handle error condition
      return;
   }
}}}

===Setting a video (image) encoding type for a snapshot or a movie===
For snapshot recording, set the video (image) encoding type (format). This is identfied with a BREW classID.
Set JPEG as the image encoding format.
{{{
   nErr = ICAMERA_SetVideoEncode(pme->m_pICamera, AEECLSID_JPEG, 0);
   if (SUCCESS != nErr)
   {
      // Handle error condition
      return;
   }
}}}

For movie recording, set the video encoding type (format). This is identfied with a BREW classID.
Set MPEG4 as the video encoding format.
{{{
   nErr = ICAMERA_SetVideoEncode(pme->m_pICamera, AEECLSID_MEDIAMPEG4, 0);
   if (SUCCESS != nErr)
   {
      // Handle error condition
      return;
   }
}}}
Refer to the ICamera functions for advanced format details specified in ICAMERA_SetMediaData() and ICAMERA_SetVideoEncode().

=== Setting the audio encoding type for a movie ===
For movie recording, set the audio encoding type (format). This is identfied with a BREW classID.
Set AAC as the audio encoding format.
{{{
   nErr = ICAMERA_SetAudioEncode(pme->m_pICamera, AEECLSID_MEDIAAAC, 0);
   if (SUCCESS != nErr)
   {
      // Handle error condition
      return;
   }
}}}
Refer to the ICamera functions for advanced format details specified in ICAMERA_SetAudioEncode().

=== Setting the camera control parameters===
See the Camera Control Parameters section for details.

==Summary==
ICamera enables an application to access a device camera sensor. ICamera can be set up to capture a snapshot or a movies. 

=======================================================================
=ICamera - Preview=
This section discusses how the user can preview the camera frames in preview or view finder mode.

The discussion covers the following broad steps.

* Starting and stopping the preview operation
* Processing the preview events
*

==Starting and stopping the preview operation==

After an ICamera object is set up as described in "Creating and setting up an ICamera object section,
an application can start the preview operation. The ICamera object must be in READY mode to start the preview.

To start the preview, use the ICAMERA_Preview() API.
{{{
   nErr = ICAMERA_Preview(pme->m_pICamera);
   if (SUCCESS != nErr)
   {
      // Handle error condition
      return;
   }
}}}

This operation triggers a series of asynchronous events that are delivered to the application via the registered callback function.

To stop the preview, use the ICAMERA_Stop() API.
{{{
   nErr = ICAMERA_Stop(pme->m_pICamera);
   if (SUCCESS != nErr)
   {
      // Handle error condition
      return;
   }
}}}

See the next section for event details after a stop command is issued.

==Processing the preview events==
The following sequence of events occurs in response to preview operation:

* {CAM_CMD_START, CAM_MODE_PREVIEW, CAM_STATUS_START} is received to indicate that the preview has begun successfully.
At this point the ICamera object transitions from READY to PREVIEW mode.

* A series of frame events is sent: {CAM_CMD_START, CAM_MODE_PREVIEW, CAM_STATUS_FRAME}. Each frame event
is an indication to preview the frame.  An application retrieves the frame using the ICAMERA_GetFrame() API and displays it at the desired location on the screen.

* {CAM_CMD_START, CAM_MODE_PREVIEW, CAM_STATUS_DONE} is received when stop is called. At this point, the ICamera object transitions from PREVIEW to READY mode.

* {CAM_CMD_START, CAM_MODE_PREVIEW, CAM_STATUS_ABORT, CAM_EXXX_} can be received at any time if the preview aborts for some reason:
*
{{{
   static void CApp_CameraNotify(void * pUser, AEECameraNotify * pn)
   {
      CApp *   pme = (CApp *)pUser;

      if (!pme || !pn)
         return;

      switch (pn->nStatus)
      {
         case CAM_STATUS_START:
            // Preview has begun...
            break;

         case CAM_STATUS_FRAME:
         {
            IBitmap *      pFrame;
            AEEBitmapInfo  bi;
            
            //
            // IMPORTANT NOTE: You need to do IBITMAP_Release(pFrame) after you are done with pFrame.
            //
            if (SUCCESS == ICAMERA_GetFrame(pme->m_pICamera, &pFrame))
               return;

            // Get the bitmap info...this can be saved in app global structure.
            IBITMAP_GetInfo(pFrame, &bi, sizeof(bi));

            // Display the frame at (0, 0) location of the screen
            IDISPLAY_BitBlt(pme, 0, 0, bi.cx, bi.cy, pFrame, 0, 0, AEE_RO_COPY);
            IBITMAP_Release(pFrame);
            break;
         }

         case CAM_STATUS_DONE:
            // ICAMERA_Stop() was called and the preview operation stopped.
            break;

         case CAM_STATUS_ABORT:
            // Preview got aborted.
            break;
      }
   }
}}}

==Summary==
ICamera enables an application to preview the frames from the device camera sensor in view finder mode. 
ICamera delivers the preview frames to the application via the registered callback function.

=======================================================================
=ICamera - Record Snapshot=
This Record Snapshot (Digital Camera Mode) section discusses how the user can record snapshots after previewing the frames in preview (view finder) mode.

The discussion covers the following broad steps:
* Recording and encoding a snapshot
* Processing the record-snapshot events
* Recording a snapshot but deferring its encoding
*

==Recording and encoding a snapshot==
After an application previews the frame, it needs to exit the preview mode and put the ICamera object back in READY mode to record a snapshot. To perform a snapshot recording operation, you are strongly encouraged to preview using the snapshot preview type (CAM_PREVIEW_SNAPSHOT) as described in '''ICamera - Creating and setting up an ICamera object'''.

Snapshot recording has two steps.
# Record the snapshot: The raw frame is captured in memory but not saved in the application-specified destination and format
# Encode the snapshot: The raw frame is encoded in the application-specified format and saved in the application-specified destination
#

ICamera object has two ways to capture snapshot:
# Default mode: The recording and encoding happens in one call 
# Defer encode mode: The recording and encoding happen separately
#

===Default mode===
This is the mode that the application gets by default when the ICamera object is created. In this mode, recording and encoding 
happen in one call to ICAMERA_RecordSnapshot().
{{{
   nErr = ICAMERA_RecordSnapshot(pme->m_pICamera);
   if (SUCCESS != nErr)
   {
      // Handle error condition
      return;
   }
}}}

The following sequence of events occurs in response to the snapshot recording operation:

* {CAM_CMD_START, CAM_MODE_SNAPSHOT, CAM_STATUS_START} is received to indicate that the recording has begun successfully.
At this point, the ICamera object transitions from the READY to SNAPSHOT mode.

* A frame events is sent: {CAM_CMD_START, CAM_MODE_SNAPSHOT, CAM_STATUS_FRAME}. This frame event is an indication to the application to retrieve the recorded frame for display purposes. The application retrieves the frame using the ICAMERA_GetFrame() API and displays it at the desired location on the screen

* {CAM_CMD_START, CAM_MODE_SNAPSHOT, CAM_STATUS_DONE} is received to indicate that the snapshot recording is done. At this point the ICamera object transitions from the PREVIEW to READY mode.

* {CAM_CMD_START, CAM_MODE_ENCODESNAPSHOT, CAM_STATUS_DONE} is received to indicate that the snapshot encoding is done.

* {CAM_CMD_START, CAM_MODE_SNAPSHOT/CAM_MODE_ENCODESNAPSHOT, CAM_STATUS_ABORT, CAM_EXXX_} can be received at any time if operation 
aborts due to some reason.
*

===Defer encode mode===
In this mode, recording and encoding happen separately. This provides flexibility to the application in determining which snapshot gets encoded
to the application-specified destination.

To enable the defer encode mode, use ICAMER_DeferEncode() API.
{{{
   nErr = ICAMERA_DeferEncode(pme->m_pICamera, TRUE);
   if (SUCCESS != nErr)
   {
      // Handle error condition
      return;
   }
}}}

To encode snapshot in this mode, call ICAMERA_RecordSnapshot().
{{{
   nErr = ICAMERA_RecordSnapshot(pme->m_pICamera);
   if (SUCCESS != nErr)
   {
      // Handle error condition
      return;
   }
}}}


The following sequence of events occurs in response to this operation:

* {CAM_CMD_START, CAM_MODE_SNAPSHOT, CAM_STATUS_START} is received to indicate that the recording has begun successfully. At this point the ICamera object transitions from the the READY to SNAPSHOT mode

* A frame events is sent: {CAM_CMD_START, CAM_MODE_SNAPSHOT, CAM_STATUS_FRAME}. This frame event is an indication to the application to retrieve the recorded frame for display purposes. The application retrieves the frame using the ICAMERA_GetFrame() API and displays it at the desired location on the screen.

* {CAM_CMD_START, CAM_MODE_SNAPSHOT, CAM_STATUS_DONE} is received to indicate that the snapshot recording is done. At this point the ICamera object transitions from the the PREVIEW to READY mode.

* Now, the application can choose to encode or not. To encode this frame, call ICAMERA_EncodeSnapshot().

{{{
   nErr = ICAMERA_EncodeSnapshot(pme->m_pICamera);
   if (SUCCESS != nErr)
   {
      // Handle error condition
      return;
   }
}}}

* {CAM_CMD_START, CAM_MODE_ENCODESNAPSHOT, CAM_STATUS_DONE} is received to indicate that the snapshot encoding is done.

* {CAM_CMD_START, CAM_MODE_SNAPSHOT/CAM_MODE_ENCODESNAPSHOT, CAM_STATUS_ABORT, CAM_EXXX_} can be received at any time if operation 
aborts due to some reason.

*

==Summary==
ICamera enables the application to record and encode snapshots. The application can defer the encoding if needed and can separately call
ICAMERA_EncodeSnapshot() to encode the current frame.

=======================================================================
=ICamera - Record Movie= 

This section discusses how the user can record a movie after previewing the frames in the preview (view finder) mode.

The discussion covers the following broad steps:

* Recording and encoding the movie
* Processing the Record Movie events
*

==Recording and encoding the movie==
After an application previews the frames, it needs to exit the preview mode and to put the ICamera object in the READY mode to record a movie. To perform a movie recording operation, you are encouraged to preview in ''movie preview type''(CAM_PREVIEW_MOVIE) as described in '''ICamera - Creating and setting up an ICamera object'''.

To start the movie recording, use the ICAMERA_RecordMovie() API.
{{{
   nErr = ICAMERA_RecordMovie(pme->m_pICamera);
   if (SUCCESS != nErr)
   {
      // Handle error condition
      return;
   }
}}}

This operation triggers a series of asynchronous events that are delivered to the application via the registered callback function.

To stop the movie recording, use the ICAMERA_Stop() API.
{{{
   nErr = ICAMERA_Stop(pme->m_pICamera);
   if (SUCCESS != nErr)
   {
      // Handle error condition
      return;
   }
}}}

See the '''Processing a record movie events''' section for event details after the stop command is issued.

==Processing a record movie events==
The following sequence of events occurs in response to a movie recording operation:

* {CAM_CMD_START, CAM_MODE_MOVIE, CAM_STATUS_START} is received to indicate that the movie recording has begun successfully.
At this point the ICamera object transitions from the READY to MOVIE mode.

* A series of frame events are sent: {CAM_CMD_START, CAM_MODE_MOVIE, CAM_STATUS_FRAME}. This frame event
is an indication to the application to retrieve the recorded frame for display purposes. The application retrieves the frame using the ICAMERA_GetFrame() API and displays it at the desired location on the screen. At the same time, the frame is also encoded in the application-specified format at the application-specified destination. 

* {CAM_CMD_START, CAM_MODE_MOVIE, CAM_STATUS_DONE} is received when stop is called. At this point the ICamera object transitions from the PREVIEW to READY mode.

* {CAM_CMD_START, CAM_MODE_MOVIE, CAM_STATUS_ABORT, CAM_EXXX_} can be received at any time if preview aborts for some reason.

{{{
   static void CApp_CameraNotify(void * pUser, AEECameraNotify * pn)
   {
      CApp *   pme = (CApp *)pUser;

      if (!pme || !pn)
         return;

      switch (pn->nStatus)
      {
         case CAM_STATUS_START:
            // Preview has begun...
            break;

         case CAM_STATUS_FRAME:
         {
            IBitmap *      pFrame;
            AEEBitmapInfo  bi;
            
            //
            // IMPORTANT NOTE: You need to do IBITMAP_Release(pFrame) after you're done with pFrame.
            //
            if (SUCCESS == ICAMERA_GetFrame(pme->m_pICamera, &pFrame))
               return;

            // Get the bitmap info...this can be saved in app global structure.
            IBITMAP_GetInfo(pFrame, &bi, sizeof(bi));

            // Display the frame at (0, 0) location of the screen
            IDISPLAY_BitBlt(pme, 0, 0, bi.cx, bi.cy, pFrame, 0, 0, AEE_RO_COPY);
            IBITMAP_Release(pFrame);
            break;
         }

         case CAM_STATUS_DONE:
            // ICAMERA_Stop() was called and preview operation stopped.
            break;

         case CAM_STATUS_ABORT:
            // Preview got aborted.
            break;
      }
   }
}}}

==Summary==
ICamera enables an application to record a movie from the device camera sensor. ICamera delivers the recorded frames to the application via the registered callback function. The frames are encoded in the application-specified format at the application-specified destination.
=======================================================================*/

