#============================================================================
#  Name:
#    FSBL_FLAGS.MIN
#
#  Description:
#    An includable component of the makefile to build the FSBL software.
#
# Copyright (c) 2008-2009 by QUALCOMM, Incorporated.  All Rights Reserved.
#----------------------------------------------------------------------------
#============================================================================
#
#                        EDIT HISTORY FOR MODULE
#
# $Header: //depot/asic/qsc1100/romboot/sbl/fsbl/fsbl_flags.min#9 $
#
# when       who     what, where, why
# --------   ---     --------------------------------------------------------
# 04/01/09   ddk     Enabling MMU and data cache.
# 02/07/08   MJS     Use PBL authentication routines.
# 01/14/08   MJS     Initial version.
#============================================================================

MSMTYPE    = 1100 
MSMFAMILY  = 11x0

#===============================================================================
#                         COMPILE FLAG DEFINITIONS
#===============================================================================
ARMTOOLS ?= ADS12

# This is the customer include file
ifeq ($(BUILD_UNIX), yes)
    CUSTFILE       =$(shell echo CUST$(BUILD).H | tr "[:upper:]" "[:lower:]")
else
    CUSTFILE       = CUST$(BUILD).H
endif

DEPEND_FLAGS = $(DEPEND) $(@D)/$*.dep

KEEP_FLAGS = $(addprefix $(KEEP) , $(KEEP_OBJECTS))

export CUSTH   = -DCUST_H=\"$(CUSTFILE)\" # Feature include file definition
ARM_ASM = -D_ARM_ASM_#                     # ARM assembly language selection
ARM     = -DT_ARM -D__ARMEL__#             # ARM processor target

EXTENSIONS =  -DBUILD_BOOT_CHAIN -DFSBL # Flags for various target extensions
EXTENSIONS += -DBUILD_BOOT_CHAIN_FSBL # 
EXTENSIONS += -DBOOT_LOADER #
EXTENSIONS += -DIMAGE_MODEM_PROC $(CUSTH) #
EXTENSIONS += -DBOOT_WATCHDOG_DISABLED #

# Build information for DLOAD detection
BUILD = "0315"
ASIC = "6XXXX"
BUILD_VERSION:= -DBUILD_ASIC=\"$(ASIC)\" -DBUILD_TARGET=\"$(BUILD_VERSION)\" \
                 -DBUILD_VER=\"$(BUILD)\" -DBOOT_TARGET

EXTENSIONS += $(BUILD_VERSION)

# Extract the build version for module versioning
BOOT_MODULE_BUILD_VERSION := $(shell perl -e "'$(VERSION)'=~/^\\d{1,4}/g; print int $$&")#
ifeq ($(strip $(BOOT_MODULE_BUILD_VERSION)),)
  BOOT_MODULE_BUILD_VERSION := 0#
endif
EXTENSIONS += -DBOOT_MODULE_BUILD_VERSION=$(BOOT_MODULE_BUILD_VERSION)

# data cache feature
BOOT_USES_DCACHE = TRUE
ifeq ($(BOOT_USES_DCACHE),TRUE)
  EXTENSIONS += -DBOOT_USES_DCACHE
endif

USES_RUMI=no
ifeq ($(USES_RUMI),yes)
  EXTENSIONS += -DRUMIBUILD
endif

#-------------------------------------------------------------------------------
# Security MODS
# Telling the security code which Boot Image is including it.
#-------------------------------------------------------------------------------
EXTENSIONS += -DBOOT_SBL_H=\"fsbl.h\"
EXTENSIONS += -DBOOT_MSG_SUPPRESS_H=\"boot_msg.h\"
EXTENSIONS += -DBOOT_CUSTSBL_H=\"custfsbl.h\"
EXTENSIONS += -DBOOT_SBLDLOAD_H=\"fsbl_dload.h\"

#CE MODS
USE_CE = FALSE
ifeq ($(USE_CE),TRUE)
  EXTENSIONS += -DBOOT_USE_CE -DFEATURE_CE_BUG
endif #ifeq ($(USE_CE),TRUE)

# Secboot API defines
EXTENSIONS += -DBOOT_USE_PBL_SHARED_AUTH_ROUTINES
EXTENSIONS += -DBOOT_USE_PBL_SHARED_HASH_ROUTINES

#DM MODS
USE_DM = FALSE
ifeq ($(USE_DM),TRUE)
  EXTENSIONS += -DUSE_DM -DDMOV_NO_IRQ \
                -DDMOV_APP_H=\"boot_msg.h\" -DDMOV_MSM_H=\"dmov_7500.h\"
  ifeq ($(BOOT_USES_DCACHE),TRUE)
    EXTENSIONS += -DDMOV_WRITE_THROUGH_CACHE
  else
    EXTENSIONS += -DDMOV_NO_CACHE
  endif
endif # ifeq ($(USE_DM),TRUE)

#Downloader MODS
FSBL_ENABLED_DLOAD = TRUE
ifeq ($(FSBL_ENABLED_DLOAD),TRUE)
  EXTENSIONS += -DFSBL_ENABLED_DLOAD

#-------------------------------------------------------------------------------
# HACK for getting thing Compiled correctly
# ....................NEED TO FIX THIS.........................................
# ...................... HACK START............................................
#-------------------------------------------------------------------------------
EXTENSIONS += -DBUILD_BOOT_CHAIN_OEMSBL
#-------------------------------------------------------------------------------
# HACK for getting thing Compiled correctly
# ....................NEED TO FIX THIS.........................................
# ...................... HACK END .............................................
#-------------------------------------------------------------------------------

# It is either QHSUSB or HSU.
ifeq ($(USES_QHSUSB),yes)
  override USES_HSU = no
endif

ifeq ($(USES_HSU),yes)
  EXTENSIONS += -DFEATURE_HS_USB_BASIC
endif # ifeq ($(USES_HSU),yes)

endif # ifeq ($(FSBL_ENABLED_DLOAD),TRUE)

#-------------------------------------------------------------------------------
# Diagnostic support options (default = no diagnostics support)
#-------------------------------------------------------------------------------
TIMETEST     =  #                       # Disable TIMETEST profiling support
#TIMETEST     = -DTIMETEST              # Enable TIMETEST profiling support
#SHOW_STAT    = -DSHOW_STAT#            # Force LOCALs to visible global scope
SHOW_STAT     =                         # Force LOCALs to visible global scope

ASSERT_FATAL = -DASSERT=ASSERT_FATAL#   # Invoke ERR_FATAL for ASSERT
ASSERT_WARN  = -DASSERT=ASSERT_WARN#    # Invoke ERR for ASSERT
ASSERT_NONE  = -DASSERT#                # Invoke None for ASSERT

#-------------------------------------------------------------------------------
# Diagnostic message options (default = no diagnostics messages)
#-------------------------------------------------------------------------------
MSG_LVL_LOW   = -DMSG_LEVEL=MSG_LVL_LOW#        # ALL message priority levels
MSG_LVL_MED   = -DMSG_LEVEL=MSG_LVL_MED#        # MED priority level and above
MSG_LVL_HIGH  = -DMSG_LEVEL=MSG_LVL_HIGH#       # HIGH priority level and above
MSG_LVL_ERROR = -DMSG_LEVEL=MSG_LVL_ERROR#      # ERROR priority level and above
MSG_LVL_NONE  = -DMSG_LEVEL=MSG_LVL_NONE#       # NO messages

#-------------------------------------------------------------------------------
# Compiler symbol definitions
#-------------------------------------------------------------------------------
# Default definitions
DMSS_CFLAGS = $(ARM) $(EXTENSIONS) $(SHOW_STAT) $(TIMETEST) $(DEPEND_FLAGS) $(ASSERT_NONE)

#-------------------------------------------------------------------------------
# Assembler symbol definitions
#-------------------------------------------------------------------------------
DMSS_AFLAGS = $(ARM) $(ARM_ASM) $(APCS) $(EXTENSIONS) $(TIMETEST)

#-------------------------------------------------------------------------------
# Linker symbol definitions
#-------------------------------------------------------------------------------
DMSS_LFLAGS = $(KEEP_FLAGS)

#-------------------------------------------------------------------------------
# Compiler symbol definitions for LINTing
#-------------------------------------------------------------------------------
LINT_CFLAGS = $(ARM) $(EXTENSIONS) $(SHOW_STAT) $(TIMETEST) $(ASSERT_NONE)
LINT_AFLAGS = $(ARM) $(ARM_ASM) $(APCS) $(EXTENSIONS) $(TIMETEST)

#-------------------------------------------------------------------------------
# Scatter Loader Preprocessing flags
#-------------------------------------------------------------------------------
SCL_FLAGS = $(ARM_ASM)
