#ifndef _OI_OBEXSRV_H
#define _OI_OBEXSRV_H
/*===========================================================================

                        EDIT HISTORY FOR MODULE

  This section contains comments describing changes made to the module.
  Notice that changes are listed in reverse chronological order.

$Header: //source/qcom/qct/wconnect/bthost/pf/rel/00.00.26/inc/oi_obexsrv.h#1 $ 

$Log: $

*    #11        13 Feb 2007            MH
* Added server disconnect response function.
*
*    #11        13 Feb 2007            MH
* Modified Set path indication to support optional headers
*
*    #10       10 Nov  2006           PR
*  Merged OI Code v3.0.14rev1revQ
*
*    #9        19 Sept 2006           MH
*  Server Authentication function prototype is added.
*
*    #8        12 Aug 2006            BK
* Added a function header for indication CB
*
*    #7        29 Jul 2006            BK
* Modified for obex client initiated authentication.
*
*    #5-6      10 Jul 2006            JH
* Removed extra linefeeds introduced in previous checkin.
*
*    #4        31 May 2006            JH
* Added support for optional headers in the AcceptConnect commands for JSR82.
*
*    #3        04 Nov 2004            JH
* Updated to version 3.0.12 revision 3 baseline
*
===========================================================================*/
/**
  @file   
  This file provides the API for the server side of the Generic Object Exchange Profile.
 */

/** \addtogroup OBEX */
/**@{*/

/**********************************************************************************
  $Revision: #1 $
  Copyright 2002 - 2004 Open Interface North America, Inc. All rights reserved.
***********************************************************************************/

#include "oi_stddefs.h"
#include "oi_status.h"
#include "oi_obexspec.h"
#include "oi_bt_profile_config.h"


/**
 * OBEX registered server required authentication
 */

typedef enum {
    OI_OBEXSRV_AUTH_NONE = 0,
    OI_OBEXSRV_AUTH_PASSWORD,
    OI_OBEXSRV_AUTH_USERID_AND_PASSWORD
} OI_OBEXSRV_AUTHENTICATION;


/**
 * handle representing an active connection to an OBEX client
 */
typedef OI_UINT16 OI_OBEXSRV_CONNECTION_HANDLE;


/**
 * A callback function of this type indicates that a client is attempting to connect to this server.
 *
 * @param connectionId     a unique identifier generated by the OBEX server that
 *                         identifies the connection
 *
 * @param unauthorized     If TRUE indicates that this connection requires
 *                         authentication and the application must call back
 *                         with a password.
 *
 * @param userId           If unauthorized is TRUE the client may have provided
 *                         a user id.
 *
 * @param userIdLen        length of the user id.
 *
 * @param headers          This parameter is a pointer to a list of OBEX headers
 *                         accompanying the connect command.  This list may be NULL
 *                         if the connect command is simply requesting connect without
 *                         any headers.
 * 
 * @param return          OI_OK if the connection is allowed, or an error status if the
 *                         connection request is being rejected by the application.
 */

#ifdef OI_CODE
#error code not present
#else
typedef void (*OI_OBEXSRV_CONNECT_IND)(OI_OBEXSRV_CONNECTION_HANDLE connectionId,
                                       OI_BOOL unauthorized,
                                       OI_BYTE *userId,
                                       OI_UINT8 userIdLen,
                                       OI_OBEX_HEADER_LIST *headers);
#endif

/**
 * A callback function of this type indicates that a client is disconnecting from this server.
 *
 * @param connectionId     a unique identifier generated by the OBEX server that
 *                         identifies the connection
 *
 * @param cmdHeaders       This parameter is a pointer to a list of OBEX headers
 *
 */

#ifdef OI_CODE
#error code not present
#else
typedef void (*OI_OBEXSRV_DISCONNECT_IND)(OI_OBEXSRV_CONNECTION_HANDLE connectionId,
                                          OI_OBEX_HEADER_LIST *cmdHeaders);
#endif
    
/**
 * A callback function of this type indicates that a GET command has been received 
 * from a connected OBEX client.
 *
 * @param connectionId     a unique identifier generated by the OBEX server that
 *                         identifies the connection
 * 
 * @param cmdHeaders       This parameter is a pointer to a list of OBEX headers
 *                         accompanying the get command.  This list may be NULL
 *                         if the GET command is simply requesting the next
 *                         packet.
 *
 * @param status           OI_OBEX_CONTINUE indicates the client is ready for
 *                         data; the server should respond with
 *                         OI_OBEXSRV_GetResponse(connectionId, NULL, OI_OK).
 *
 *                         OI_OBEXSRV_INCOMPLETE_GET indicates that the client
 *                         will respond with more information about the request
 *                         in a subsequent packet; the server should respond
 *                         with OI_OBEXSRV_GetResponse(connectionId, NULL,
 *                         OI_OBEX_CONTINUE)
 *
 *                         Any other status indicates that the transaction is
 *                         complete, successfully or otherwise.
 * 
 * @return               a status code to indicate whether the get request is accepted or
 *                        rejected
 */

typedef OI_STATUS (*OI_OBEXSRV_GET_IND)(OI_OBEXSRV_CONNECTION_HANDLE connectionId,
                                        OI_OBEX_HEADER_LIST *cmdHeaders,
                                        OI_STATUS status);

#ifndef OI_CODE
/**
 * A callback function of this type indicates that a client is attempting to authenticate
 * this server during connection setup.
 *
 *
 * @param connectionId     a unique identifier generated by the OBEX server that
 *                         identifies the connection
 *
 * @param unauthorized     If TRUE indicates that this connection requires
 *                         authentication and the application must call back
 *                         with a password.
 *
 * @param userId           If unauthorized is TRUE the client may have provided
 *                         a user id.
 *
 * @param userIdLen        length of the user id.
 *
 * @param realmInfo        This contains the realm information describing the
 *                         userID and the password.
 *
 * @param return           OI_OK if the connection is allowed, or an error status if the
 *                         connection request is being rejected by the application.
 */
typedef OI_STATUS (*OI_OBEXSRV_AUTH_CHALLENGE_IND)(OI_OBEXSRV_CONNECTION_HANDLE connectionId,
                                              OI_BOOL fullAccess,
                                              OI_BYTE *userId,
                                              OI_BOOL userIdRequired,
                                              OI_UINT8 userIdLen,
                                              OI_REALM_INFO *realmInfo);
#endif
/** 
 * 
 * A callback function of this type indicates that a PUT request has been
 * received from a connected OBEX client.
 *
 * @param connectionId     a unique identifier generated by the OBEX server that
 *                         identifies the connection
 *  
 * @param headers          This parameter is a pointer to a list of OBEX headers
 *                         in the put request. This will be NULL if the put
 *                         operation has been aborted by the client or if the
 *                         final cleanup callback is being invoked.
 *
 * @param status           OI_OK if this is the final put request and to signal the
 *                         cleanup callback; OI_OBEX_CONTINUE if there is more
 *                         data to come; or an error status.
 *
 * @return                a status code to indicate whether the put request is
 *                        accepted or rejected.
 */

typedef OI_STATUS (*OI_OBEXSRV_PUT_IND)(OI_OBEXSRV_CONNECTION_HANDLE connectionId,
                                        OI_OBEX_HEADER_LIST *headers,
                                        OI_STATUS status);


/**
 * A callback function of this type indicates the path set for get and put operations. 
 * 
 * @param connectionId   a unique identifier generated by the OBEX server that
 *                       identifies the connection
 *
 * @param folder         a unicode string for the folder that be NULL
 *
 * @param upLevel        indicates that the path is being set to the parent folder of
 *                       the current folder (equivalent to '..')
 *
 * @param create         indicates that a new folder should be created if required and
 *                       access permissions allow
 *
 * @param headers          This parameter is a pointer to a list of OBEX headers
 *                         in the setpth request. 
 *
 * @return              a status code to indicate if the setpath request is
 *                      accepted or rejected.
 */

#ifdef OI_CODE
#error code not present
#else
typedef OI_STATUS (*OI_OBEXSRV_SET_PATH_IND)(OI_OBEXSRV_CONNECTION_HANDLE connectionId,
                                             OI_OBEX_UNICODE *folder,
                                             OI_BOOL upLevel,
                                             OI_BOOL create,
                                             OI_OBEX_HEADER_LIST *headers);

#endif 


/**
 * callback functions for handling server requests
 */
typedef struct {
    OI_OBEXSRV_CONNECT_IND connectInd;       /**< Client is attempting to connect. */
    OI_OBEXSRV_DISCONNECT_IND disconnectInd; /**< Client is disconnecting. */
    OI_OBEXSRV_GET_IND getInd;               /**< GET request received from client. */
    OI_OBEXSRV_PUT_IND putInd;               /**< PUT request received from client. */
    OI_OBEXSRV_SET_PATH_IND setPathInd;      /**< SETPATH request received from client. */
#ifndef OI_CODE
    OI_OBEXSRV_AUTH_CHALLENGE_IND authChallengeIndCB; /**< auth ch CB */
#endif
} OI_OBEXSRV_CB_LIST;



/**
 * Function called by upper layer to accept or reject a connect request.
 *
 * @param connectionHandle OBEX server connection handle for the connection
 *                         being accepted.
 *
 * @param accept           TRUE if the upper layer accepts the connect request.
 *
 * @param status           Reason for the refusal, e.g "out of resources".
 *
 * @return                 OI_OK if the confirmation was appropriate and the
 *                         connection handle is still valid.
 */

OI_STATUS OI_OBEXSRV_AcceptConnect(OI_OBEXSRV_CONNECTION_HANDLE connectionHandle,
                                   OI_BOOL accept,
#ifndef OI_CODE
                                   OI_OBEX_HEADER_LIST const *cmdHdrs,
#endif
                                   OI_STATUS status);


/**
 * Function called to confirm that the path has been set in response to a
 * setpath indication.
 *
 * @param connectionHandle OBEX server connection handle for the service request
 *                         being acknowledged.
 *
 * @param rspHeaders       This parameter is a pointer to a list of OBEX headers. 
 *                         If the server has no response headers to send, it should set
 *                         rspHeaders to NULL. Otherwise, if the return status
 *                         is OI_OK, then the application must not free any
 *                         memory referenced by the headers until the response
 *                         confirmation callback is invoked.
 * 
 * @param status           Status code indicating if the request was accepted
 *                         and completed, was rejected, or failed.
 *
 * @return                 OI_OK if the confirmation was appropriate and could
 *                         be sent.
 */

OI_STATUS OI_OBEXSRV_ConfirmSetpath(OI_OBEXSRV_CONNECTION_HANDLE connectionHandle,
#ifndef OI_CODE
                                    OI_OBEX_HEADER_LIST *headers,
#endif
                                    OI_STATUS status);

/**
 * This functions gets the connection target associated with an OBEX server
 * connection handle. If no target was used to connect, target->data is set to
 * NULL and target->len to zero.
 *
 * @param connectionHandle OBEX server connection handle for which the current
 *                         target is desired
 *
 * @param target    pointer to caller's variable where information about the
 *                  target will be stored.
 *
 * @return
 *      - OI_OK: A connection exists. The target has been placed into the
 *        caller's variable.
 *      - OI_OBEX_NOT_CONNECTED: connectionHandle is not associated with a valid
 *        OBEX connection. The callers' variable is unchanged.
 */

OI_STATUS OI_OBEXSRV_GetTarget(OI_OBEXSRV_CONNECTION_HANDLE connectionHandle,
                               OI_OBEX_BYTESEQ *target);


/**
 * This function gets the Bluetooth Device Address (BD_ADDR) associated with an
 * OBEX server connection handle.
 *
 * @param connectionHandle OBEX server connection handle for which a BD_ADDR is desired
 * 
 * @param pBdAddr pointer to caller's variable where the BD_ADDR will be stored
 *
 * @return
 *      - OI_OK: A connection exists. The BD_ADDR has been placed into the
 *        caller's variable.
 *      - OI_OBEX_NOT_CONNECTED: connectionHandle is not associated with a valid
 *        OBEX connection. The callers' variable is unchanged.
 * 
 */
OI_STATUS OI_OBEXSRV_GetClientAddr(OI_OBEXSRV_CONNECTION_HANDLE connectionHandle,
                                   OI_BD_ADDR *pBdAddr);

/**
 * This function gets the RFCOMM channel number associated with an OBEX server
 * connecting handle.
 *
 * @param connectionHandle OBEX server connection handle for which a channel
 *                         number is desired
 *
 * @param rfcommChannel pointer to caller's variable where the channel number
 *                      will be stored
 *
 * @return
 *      - OI_OK: A connection exists. The channel number has been placed into
 *        the caller's variable.
 *      - OI_OBEX_NOT_CONNECTED: connectionHandle is not associated with a valid
 *        OBEX connection. The callers' variable is unchanged.
 */
OI_STATUS OI_OBEXSRV_GetRfcommChannel(OI_OBEXSRV_CONNECTION_HANDLE connectionHandle,
                                      OI_UINT8 *rfcommChannel);

/**
 * Response to an connect indication that reported that the connection was
 * unauthorized. If the password is correct and authentication completes another
 * connect indication will be issued.
 *
 * @param connectionId     a unique identifier generated by the OBEX server that
 *                         identifies the connection
 *
 * @param password         This parameter is a pointer to a NULL-terminated
 *                         password.  A NULL value indicates that the
 *                         application is rejecting the authentication
 *                         challenge.
 *
 * @param readOnly         indicates that the application is granting read-only
 *                         access only.
 *
 * @return                 OI_OK or an error status if this function was called
 *                         at an inappropriate wrong time.
 */

OI_STATUS OI_OBEXSRV_AuthenticationResponse(OI_OBEXSRV_CONNECTION_HANDLE connectionId,
                                            const OI_CHAR *password,
                                            OI_BOOL readOnly);

/** 
 *
 * Respond to a GET command by sending data to a connected OBEX client.
 *
 * @param connectionId     a unique identifier generated by the OBEX server that
 *                         identifies the connection
 *
 * @param rspHeaders       This parameter is a pointer to a list of OBEX headers 
 *                         that contain the response to the get command. If the
 *                         return status is OI_OK, the application must not free
 *                         any memory referenced by the headers until response
 *                         confirmation callback is invoked. 
 *
 * @param rspStatus        OI_OBEX_CONTINUE if there is more data to get; OI_OK
 *                         if this is no more data; or an error status.
 *
 * @return                OI_OK or an error status if the response could not be sent.
 */

OI_STATUS OI_OBEXSRV_GetResponse(OI_OBEXSRV_CONNECTION_HANDLE connectionId,
                                 OI_OBEX_HEADER_LIST *rspHeaders,
                                 OI_STATUS rspStatus);


/** 
 *
 * Acknowledge a PUT command, optionally sending response headers to a connected
 * OBEX client.
 *
 * @param connectionId     a unique identifier generated by the OBEX server that
 *                         identifies the connection
 *
 * @param rspHeaders       This parameter is a pointer to a list of OBEX headers 
 *                         that contain the response to the put command.  If the
 *                         server has no response headers to send, it should set
 *                         rspHeaders to NULL. Otherwise, if the return status
 *                         is OI_OK, then the application must not free any
 *                         memory referenced by the headers until the response
 *                         confirmation callback is invoked. 
 *
 * @param                  rspStatus should be the same as the status passed to
 *                         the server's PUT callback (OI_OK or OI_OBEX_CONTINUE)
 *                         if the operation was successful, or an error message
 *                         otherwise.
 */
OI_STATUS OI_OBEXSRV_PutResponse(OI_OBEXSRV_CONNECTION_HANDLE connectionId,
                                 OI_OBEX_HEADER_LIST *rspHeaders,
                                 OI_STATUS rspStatus);


#ifndef OI_CODE
/** 
 *
 * Acknowledge a Disconnect command, optionally sending response headers to a connected
 * OBEX client.
 *
 * @param connectionId     a unique identifier generated by the OBEX server that
 *                         identifies the connection
 *
 * @param rspHeaders       This parameter is a pointer to a list of OBEX headers 
 *                         that contain the response to the put command.  If the
 *                         server has no response headers to send, it should set
 *                         rspHeaders to NULL. Otherwise, if the return status
 *                         is OI_OK, then the application must not free any
 *                         memory referenced by the headers until the response
 *                         confirmation callback is invoked. 
 *
 * @param                  rspStatus 
 */ 

OI_STATUS OBEXSRV_DisconnectResponse(OI_OBEXSRV_CONNECTION_HANDLE connectionId,
                                     OI_OBEX_HEADER_LIST *headers,
                                     OI_STATUS rspStatus);

#endif

/**
 * This function returns the optimal size for a body header for a connection.
 * Sending body headers that are smaller than this size or not an integer
 * multiple of this size will result in slower data transfer rates.
 *
 * @param connectionId    a unique identifier generated by the OBEX server that
 *                        identifies the connection
 *
 * @return                best  payload size or 0 if there is no connection
 */

OI_UINT16 OI_OBEXSRV_OptimalBodyHeaderSize(OI_OBEXSRV_CONNECTION_HANDLE connectionId);

/**
 * This function forcibly severs the connection from an OBEX client to the OBEX
 * server. The disconnect indication callback will be called when the disconnect
 * is complete.
 * 
 * An OBEX server may need to forcibly terminate a connection during
 * deregistration, since deregistration will fail if a connection is in place. 
 * 
 * @param connectionId     a unique identifier generated by the OBEX server that
 *                         identifies the connection.
 *
 * @return                 OI_OK if the connectionId is valid and the connection
 *                         will be terminated. 
 */

OI_STATUS OI_OBEXSRV_ForceDisconnect(OI_OBEXSRV_CONNECTION_HANDLE connectionId);

/**
 * This function registers an OBEX server to accept put and/or get requests from OBEX clients.
 *
 * @param target           a byte sequence that idenfifies the OBEX target for the
 *                         service being registered; may be NULL.
 *
 * @param CBList           pointer to a list of the application functions that
 *                         will be called when the OBEX server receives a get or
 *                         put request
 *
 *
 * @param authentication   specifies whether authentication is required on
 *                         connections to this server, with TRUE indicating that
 *                         authentication is required
 *
 * @param channelNumber    [OUT] This paramater is a pointer to the location where
 *                         the RFCOMM channel number for this service will be
 *                         written. The application will need the channel number
 *                         to register the service record for this server with
 *                         the SDP database.
 *
 * @param policy           the connection policy to use
 *
 * @return                 OI_OK if successful or an error status if the target
 *                         could not be registered
 */
#ifndef OI_CODE
OI_STATUS OI_OBEXSRV_RegisterServer(const OI_OBEX_BYTESEQ *target,
                                    OI_OBEXSRV_CB_LIST *CBList,
                                    OI_OBEXSRV_AUTHENTICATION authentication,
                                    OI_UINT8 *channelNumber,
                                    const OI_CONNECT_POLICY *policy);
#else
#error code not present
#endif

/**
 * This function registers an additional target on an existing OBEX server.
 *
 * @param target            a byte sequence that identifies the OBEX target for
 *                          the service being registered; must not be NULL.
 *
 * @param CBList           pointer to a list of the application functions that
 *                         will be called when the OBEX server receives a get or
 *                         put request
 *
 *
 * @param authentication   specifies whether authentication is required on
 *                         connections to this server, with TRUE indicating that
 *                         authentication is required
 *
 * @param channelNumber    specifies the RFCOMM channel number of the
 *                         already-registered OBEX server to which the secondary
 *                         target will be attached.
 *
 * @return                 OI_OK if successful or an error status if the target
 *                         could not be registered
 */
#ifndef OI_CODE
OI_STATUS OI_OBEXSRV_RegisterSecondaryTarget(const OI_OBEX_BYTESEQ *target,
                                             OI_OBEXSRV_CB_LIST *CBList,
                                             OI_OBEXSRV_AUTHENTICATION authentication,
                                             OI_UINT8 channelNumber);
#else
#error code not present
#endif

/**
 * This function deregisters an OBEX server so that it will no longer accept put
 * and/or get requests from OBEX clients for the specified target. This will
 * also deregister any secondary targets associated with this server.
 *
 * To deregister a server that has active connections, terminate the connections
 * using OI_OBEXSRV_ForceDisconnect() first; then deregister the server.
 *
 * @param channelNumber   the RFCOMM channel number for the service
 *
 * @return    status code indicating the result of the command to deregister the server:
 *            - OI_OK if the target was deregistered;
 *            - OI_OBEX_SERVICE_UNAVAILABLE if the channel number is invalid
 *            - OI_OBEX_OPERATION_IN_PROGRESS if a client is connected to the
 *              service. To deregister a server that is in use, the application
 *              should call OI_OBEXSRVE_ForceDisconnect() and then call
 *              OI_OBEXSRV_DeregisterServer() again after the disconnect
 *              indication is reported.
 */

OI_STATUS OI_OBEXSRV_DeregisterServer(OI_UINT8 channelNumber);


/**
 * This function returns TRUE if any client is currently connected to the server
 * associated with the specified channel number. If it returns FALSE, the server
 * is not in use, and deregistration will be successful. If no server is present
 * on the specified channel, the result is FALSE.
 *
 * @param channelNumber   the RFCOMM channel number for the server
 *
 * @return                TRUE if the server is busy.
 */
OI_BOOL OI_OBEXSRV_IsServerBusy(OI_UINT8 channelNumber);

/**
 * Associates a caller defined context with an OBEX server connection. This
 * context can then be retrieved by calling OI_OBEXSRV_GetConnectionContext().
 *
 * @param connectionId   The connection to associate the context with.
 *
 * @param context         A value supplied by the caller.
 *
 * @return                OI_OK if the context was set, OI_STATUS_NOT_FOUND if
 *                        the connection id is not valid.
 */
OI_STATUS OI_OBEXSRV_SetConnectionContext(OI_OBEXSRV_CONNECTION_HANDLE connectionId,
                                          void *context);


/**
 * Gets a caller defined context associate with an OBEX server connection. This is a value
 * that we previously set by a call to OI_OBEXSRV_SetConnectionContext().
 *
 * @param connectionId    The OBEX server connection to get the context from.
 *
 * @return                A context pointer or NULL if the handle is invalid or
 *                        there is no context associated with this connection.
 */
void* OI_OBEXSRV_GetConnectionContext(OI_OBEXSRV_CONNECTION_HANDLE connectionId);


/**
 * Associates a caller defined context with an OBEX server. This
 * context can then be retrieved by calling OI_OBEXSRV_GetServerContext().
 *
 * @param channelNumber   The RFCOMM channel number for the server.
 *
 * @param context         A value supplied by the caller.
 *
 * @return                OI_OK if the context was set, OI_STATUS_NOT_FOUND if
 *                        the connection id is not valid.
 */
OI_STATUS OI_OBEXSRV_SetServerContext(OI_UINT8 channelNumber,
                                      void *context);


/**
 * Gets a caller defined context associate with an OBEX server. This is a value
 * that we previously set by a call to OI_OBEXSRV_SetServerContext().
 *
 * @param channelNumber   The RFCOMM channel number for the server.
 *
 * @return                A context pointer or NULL if the handle is invalid or
 *                        there is no context associated with this connection.
 */
void* OI_OBEXSRV_GetServerContext(OI_UINT8 channelNumber);


#ifndef OI_CODE
/**
 * This function returns OI_SUCCESS if the registration of the callback
 * is successful.
 *
 * @param channelNumber   the RFCOMM channel number for the server
 *
 * @param authCb          pointer to the application authenthentication
 *                        indication callback.
 *
 * @return                OI_STATUS_NOT_FOUND if the entry wrt the channel
 *                        number is missing.
 */
OI_STATUS OI_OBEXSRV_RegisterServerAuthCb(OI_UINT8 channelNumber,
                                          OI_OBEXSRV_CB_LIST *CBlist);
/**
 * This function returns TRUE if succesful to store the authentication parameters
 * returns FALSE, if it fails to store the authentication parameters from the app.
 *
 * @param bdAddr        Bluetooth Device Address
 * @param channel       ServerChannelNumber
 * @param realmInfo     Realm Information
 * @param uidReqd       UserID Required
 * @param fullAccess    Access Information
 *                      TRUE 
 *                      FALSE - Read only access
 * 
 * @return              OI_OK if successful
 *                      OI_STATUS_NO_RESOURCES if no resource available to store 
 *                      authentication info
 *                      
 */

OI_STATUS OI_OBEXSRV_Authenticate(OI_OBEXSRV_CONNECTION_HANDLE connectionId,
                                    OI_BD_ADDR *bdAddr,
                                    OI_UINT8 channel,
                                    OI_REALM_INFO *realmInfo,
                                    OI_BOOL uidReqd,
                                    OI_BOOL fullAccess);
#endif /*OI_CODE*/

/*****************************************************************************/
/**@}*/
#endif /* _OI_OBEXSRV_H */

